
Projekt_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008820  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800896c  0800896c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800896c  0800896c  000202cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800896c  0800896c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  08008974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200002cc  08008c40  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08008c40  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018979  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339b  00000000  00000000  00038cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a1  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001996e  00000000  00000000  0003e649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2e8  00000000  00000000  00057fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093dcd  00000000  00000000  0007329f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059e8  00000000  00000000  0010706c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0010ca54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002cc 	.word	0x200002cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008914 	.word	0x08008914

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002d0 	.word	0x200002d0
 8000148:	08008914 	.word	0x08008914

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037c:	4b52      	ldr	r3, [pc, #328]	; (80004c8 <MX_GPIO_Init+0x160>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a51      	ldr	r2, [pc, #324]	; (80004c8 <MX_GPIO_Init+0x160>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b4f      	ldr	r3, [pc, #316]	; (80004c8 <MX_GPIO_Init+0x160>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0310 	and.w	r3, r3, #16
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b4c      	ldr	r3, [pc, #304]	; (80004c8 <MX_GPIO_Init+0x160>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a4b      	ldr	r2, [pc, #300]	; (80004c8 <MX_GPIO_Init+0x160>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a45      	ldr	r2, [pc, #276]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f248 0120 	movw	r1, #32800	; 0x8020
 80003e2:	483a      	ldr	r0, [pc, #232]	; (80004cc <MX_GPIO_Init+0x164>)
 80003e4:	f000 fea4 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	4838      	ldr	r0, [pc, #224]	; (80004d0 <MX_GPIO_Init+0x168>)
 80003ee:	f000 fe9f 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2180      	movs	r1, #128	; 0x80
 80003f6:	4837      	ldr	r0, [pc, #220]	; (80004d4 <MX_GPIO_Init+0x16c>)
 80003f8:	f000 fe9a 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <MX_GPIO_Init+0x170>)
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4830      	ldr	r0, [pc, #192]	; (80004d4 <MX_GPIO_Init+0x16c>)
 8000412:	f000 fd09 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT_Pin;
 8000416:	f248 0320 	movw	r3, #32800	; 0x8020
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4827      	ldr	r0, [pc, #156]	; (80004cc <MX_GPIO_Init+0x164>)
 8000430:	f000 fcfa 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000434:	2301      	movs	r3, #1
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4821      	ldr	r0, [pc, #132]	; (80004d0 <MX_GPIO_Init+0x168>)
 800044c:	f000 fcec 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000450:	2302      	movs	r3, #2
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <MX_GPIO_Init+0x174>)
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000458:	2301      	movs	r3, #1
 800045a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	481b      	ldr	r0, [pc, #108]	; (80004d0 <MX_GPIO_Init+0x168>)
 8000464:	f000 fce0 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_Pin;
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4815      	ldr	r0, [pc, #84]	; (80004d4 <MX_GPIO_Init+0x16c>)
 8000480:	f000 fcd2 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_GPIO_Init+0x174>)
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_GPIO_Init+0x164>)
 800049a:	f000 fcc5 	bl	8000e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	2007      	movs	r0, #7
 80004a4:	f000 fc7b 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004a8:	2007      	movs	r0, #7
 80004aa:	f000 fc94 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2100      	movs	r1, #0
 80004b2:	2028      	movs	r0, #40	; 0x28
 80004b4:	f000 fc73 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004b8:	2028      	movs	r0, #40	; 0x28
 80004ba:	f000 fc8c 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40011000 	.word	0x40011000
 80004d8:	10110000 	.word	0x10110000
 80004dc:	10210000 	.word	0x10210000

080004e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_I2C1_Init+0x50>)
 80004e6:	4a13      	ldr	r2, [pc, #76]	; (8000534 <MX_I2C1_Init+0x54>)
 80004e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_I2C1_Init+0x50>)
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_I2C1_Init+0x58>)
 80004ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_I2C1_Init+0x50>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_I2C1_Init+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_I2C1_Init+0x50>)
 80004fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000502:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MX_I2C1_Init+0x50>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_I2C1_Init+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MX_I2C1_Init+0x50>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_I2C1_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_I2C1_Init+0x50>)
 800051e:	f000 fe51 	bl	80011c4 <HAL_I2C_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000528:	f000 f8fa 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200002e8 	.word	0x200002e8
 8000534:	40005400 	.word	0x40005400
 8000538:	000186a0 	.word	0x000186a0

0800053c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C2_Init+0x50>)
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <MX_I2C2_Init+0x54>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_I2C2_Init+0x50>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_I2C2_Init+0x58>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_I2C2_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C2_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_I2C2_Init+0x50>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C2_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_I2C2_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_I2C2_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C2_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_I2C2_Init+0x50>)
 800057a:	f000 fe23 	bl	80011c4 <HAL_I2C_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000584:	f000 f8cc 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000033c 	.word	0x2000033c
 8000590:	40005800 	.word	0x40005800
 8000594:	000186a0 	.word	0x000186a0

08000598 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <HAL_I2C_MspInit+0xc8>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d124      	bne.n	8000602 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a29      	ldr	r2, [pc, #164]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005d0:	23c0      	movs	r3, #192	; 0xc0
 80005d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d4:	2312      	movs	r3, #18
 80005d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	4619      	mov	r1, r3
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <HAL_I2C_MspInit+0xd0>)
 80005e4:	f000 fc20 	bl	8000e28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000600:	e029      	b.n	8000656 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <HAL_I2C_MspInit+0xd4>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d124      	bne.n	8000656 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062a:	2312      	movs	r3, #18
 800062c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_I2C_MspInit+0xd0>)
 800063a:	f000 fbf5 	bl	8000e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40005400 	.word	0x40005400
 8000664:	40021000 	.word	0x40021000
 8000668:	40010c00 	.word	0x40010c00
 800066c:	40005800 	.word	0x40005800

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fa12 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f811 	bl	800069e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff fe74 	bl	8000368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f97e 	bl	8000980 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000684:	f7ff ff2c 	bl	80004e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000688:	f7ff ff58 	bl	800053c <MX_I2C2_Init>
  MX_TIM1_Init();
 800068c:	f000 f8e8 	bl	8000860 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  peripherialsInit();
 8000690:	f007 fe3c 	bl	800830c <peripherialsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Compute(1,2);
 8000694:	2102      	movs	r1, #2
 8000696:	2001      	movs	r0, #1
 8000698:	f007 fe5e 	bl	8008358 <Compute>
 800069c:	e7fa      	b.n	8000694 <main+0x24>

0800069e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b090      	sub	sp, #64	; 0x40
 80006a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	2228      	movs	r2, #40	; 0x28
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f008 f8ef 	bl	8008890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006d4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 ff34 	bl	800254c <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006ea:	f000 f819 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f9a1 	bl	8002a50 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000714:	f000 f804 	bl	8000720 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3740      	adds	r7, #64	; 0x40
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f9a7 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f000 fcd6 	bl	8001194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <TIM1_BRK_IRQHandler+0x10>)
 80007f2:	f002 fb5d 	bl	8002eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000390 	.word	0x20000390

08000800 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <TIM1_UP_IRQHandler+0x10>)
 8000806:	f002 fb53 	bl	8002eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000390 	.word	0x20000390

08000814 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM1_TRG_COM_IRQHandler+0x10>)
 800081a:	f002 fb49 	bl	8002eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000390 	.word	0x20000390

08000828 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <TIM1_CC_IRQHandler+0x10>)
 800082e:	f002 fb3f 	bl	8002eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000390 	.word	0x20000390

0800083c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000840:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000844:	f000 fca6 	bl	8001194 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000848:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800084c:	f000 fca2 	bl	8001194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_TIM1_Init+0x9c>)
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <MX_TIM1_Init+0xa0>)
 8000880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_TIM1_Init+0x9c>)
 8000884:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000888:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM1_Init+0x9c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM1_Init+0x9c>)
 8000892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000896:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_TIM1_Init+0x9c>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM1_Init+0x9c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_TIM1_Init+0x9c>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM1_Init+0x9c>)
 80008ac:	f002 fa5e 	bl	8002d6c <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008b6:	f7ff ff33 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM1_Init+0x9c>)
 80008c8:	f002 fbfa 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80008d2:	f7ff ff25 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM1_Init+0x9c>)
 80008e4:	f002 fdd0 	bl	8003488 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80008ee:	f7ff ff17 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000390 	.word	0x20000390
 8000900:	40012c00 	.word	0x40012c00

08000904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_TIM_Base_MspInit+0x74>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12b      	bne.n	800096e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_TIM_Base_MspInit+0x78>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_TIM_Base_MspInit+0x78>)
 800091c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_TIM_Base_MspInit+0x78>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2018      	movs	r0, #24
 8000934:	f000 fa33 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000938:	2018      	movs	r0, #24
 800093a:	f000 fa4c 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2019      	movs	r0, #25
 8000944:	f000 fa2b 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000948:	2019      	movs	r0, #25
 800094a:	f000 fa44 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	201a      	movs	r0, #26
 8000954:	f000 fa23 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000958:	201a      	movs	r0, #26
 800095a:	f000 fa3c 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	201b      	movs	r0, #27
 8000964:	f000 fa1b 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000968:	201b      	movs	r0, #27
 800096a:	f000 fa34 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40012c00 	.word	0x40012c00
 800097c:	40021000 	.word	0x40021000

08000980 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f002 fdd6 	bl	8003568 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f7ff fead 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200003d8 	.word	0x200003d8
 80009d0:	40004400 	.word	0x40004400

080009d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x70>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d123      	bne.n	8000a3c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_UART_MspInit+0x74>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_UART_MspInit+0x74>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fe:	61d3      	str	r3, [r2, #28]
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0x74>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_UART_MspInit+0x74>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_UART_MspInit+0x74>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_UART_MspInit+0x74>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a24:	230c      	movs	r3, #12
 8000a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0x78>)
 8000a38:	f000 f9f6 	bl	8000e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010800 	.word	0x40010800

08000a50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff ff00 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a56:	490c      	ldr	r1, [pc, #48]	; (8000a88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a6c:	4c09      	ldr	r4, [pc, #36]	; (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f007 ff11 	bl	80088a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff fdf7 	bl	8000670 <main>
  bx lr
 8000a82:	4770      	bx	lr
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8000a8c:	08008974 	.word	0x08008974
  ldr r2, =_sbss
 8000a90:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8000a94:	20000620 	.word	0x20000620

08000a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_2_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x28>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x28>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f96b 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff fe38 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f991 	bl	8000e0e <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f94b 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000420 	.word	0x20000420

08000b4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000420 	.word	0x20000420

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4906      	ldr	r1, [pc, #24]	; (8000c40 <__NVIC_EnableIRQ+0x34>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db12      	blt.n	8000c7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	490a      	ldr	r1, [pc, #40]	; (8000c88 <__NVIC_DisableIRQ+0x44>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	3320      	adds	r3, #32
 8000c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c70:	f3bf 8f4f 	dsb	sy
}
 8000c74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c76:	f3bf 8f6f 	isb	sy
}
 8000c7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff90 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff09 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff1e 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff90 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5f 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff11 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff1f 	bl	8000c44 <__NVIC_DisableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff94 	bl	8000d44 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e169      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8158 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a9a      	ldr	r2, [pc, #616]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a94      	ldr	r2, [pc, #592]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a90      	ldr	r2, [pc, #576]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a79      	ldr	r2, [pc, #484]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b1 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e0>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2304      	movs	r3, #4
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001026:	492f      	ldr	r1, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	492c      	ldr	r1, [pc, #176]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4928      	ldr	r1, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	491e      	ldr	r1, [pc, #120]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4914      	ldr	r1, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
 80010c4:	e021      	b.n	800110a <HAL_GPIO_Init+0x2e2>
 80010c6:	bf00      	nop
 80010c8:	10320000 	.word	0x10320000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_GPIO_Init+0x304>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4909      	ldr	r1, [pc, #36]	; (800112c <HAL_GPIO_Init+0x304>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f ae8e 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	; 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4013      	ands	r3, r2
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43d9      	mvns	r1, r3
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	400b      	ands	r3, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	611a      	str	r2, [r3, #16]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 f97c 	bl	80084b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e12b      	b.n	800142e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff f9d4 	bl	8000598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2224      	movs	r2, #36	; 0x24
 80011f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001228:	f001 fd5a 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a81      	ldr	r2, [pc, #516]	; (8001438 <HAL_I2C_Init+0x274>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d807      	bhi.n	8001248 <HAL_I2C_Init+0x84>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a80      	ldr	r2, [pc, #512]	; (800143c <HAL_I2C_Init+0x278>)
 800123c:	4293      	cmp	r3, r2
 800123e:	bf94      	ite	ls
 8001240:	2301      	movls	r3, #1
 8001242:	2300      	movhi	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e006      	b.n	8001256 <HAL_I2C_Init+0x92>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a7d      	ldr	r2, [pc, #500]	; (8001440 <HAL_I2C_Init+0x27c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	bf94      	ite	ls
 8001250:	2301      	movls	r3, #1
 8001252:	2300      	movhi	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0e7      	b.n	800142e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4a78      	ldr	r2, [pc, #480]	; (8001444 <HAL_I2C_Init+0x280>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	430a      	orrs	r2, r1
 800127c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_I2C_Init+0x274>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d802      	bhi.n	8001298 <HAL_I2C_Init+0xd4>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	e009      	b.n	80012ac <HAL_I2C_Init+0xe8>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_I2C_Init+0x284>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	3301      	adds	r3, #1
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	495c      	ldr	r1, [pc, #368]	; (8001438 <HAL_I2C_Init+0x274>)
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d819      	bhi.n	8001300 <HAL_I2C_Init+0x13c>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e59      	subs	r1, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012da:	1c59      	adds	r1, r3, #1
 80012dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012e0:	400b      	ands	r3, r1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00a      	beq.n	80012fc <HAL_I2C_Init+0x138>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e59      	subs	r1, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fa:	e051      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 80012fc:	2304      	movs	r3, #4
 80012fe:	e04f      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d111      	bne.n	800132c <HAL_I2C_Init+0x168>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1e58      	subs	r0, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	440b      	add	r3, r1
 8001316:	fbb0 f3f3 	udiv	r3, r0, r3
 800131a:	3301      	adds	r3, #1
 800131c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	e012      	b.n	8001352 <HAL_I2C_Init+0x18e>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1e58      	subs	r0, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	0099      	lsls	r1, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001342:	3301      	adds	r3, #1
 8001344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Init+0x196>
 8001356:	2301      	movs	r3, #1
 8001358:	e022      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10e      	bne.n	8001380 <HAL_I2C_Init+0x1bc>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1e58      	subs	r0, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6859      	ldr	r1, [r3, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	440b      	add	r3, r1
 8001370:	fbb0 f3f3 	udiv	r3, r0, r3
 8001374:	3301      	adds	r3, #1
 8001376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	e00f      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1e58      	subs	r0, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	0099      	lsls	r1, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	fbb0 f3f3 	udiv	r3, r0, r3
 8001396:	3301      	adds	r3, #1
 8001398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	6809      	ldr	r1, [r1, #0]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6911      	ldr	r1, [r2, #16]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68d2      	ldr	r2, [r2, #12]
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	000186a0 	.word	0x000186a0
 800143c:	001e847f 	.word	0x001e847f
 8001440:	003d08ff 	.word	0x003d08ff
 8001444:	431bde83 	.word	0x431bde83
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	461a      	mov	r2, r3
 8001458:	460b      	mov	r3, r1
 800145a:	817b      	strh	r3, [r7, #10]
 800145c:	4613      	mov	r3, r2
 800145e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fb74 	bl	8000b4c <HAL_GetTick>
 8001464:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	f040 80e0 	bne.w	8001634 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2319      	movs	r3, #25
 800147a:	2201      	movs	r2, #1
 800147c:	4970      	ldr	r1, [pc, #448]	; (8001640 <HAL_I2C_Master_Transmit+0x1f4>)
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 fe2e 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800148a:	2302      	movs	r3, #2
 800148c:	e0d3      	b.n	8001636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_I2C_Master_Transmit+0x50>
 8001498:	2302      	movs	r3, #2
 800149a:	e0cc      	b.n	8001636 <HAL_I2C_Master_Transmit+0x1ea>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d007      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2221      	movs	r2, #33	; 0x21
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2210      	movs	r2, #16
 80014de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	893a      	ldrh	r2, [r7, #8]
 80014f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4a50      	ldr	r2, [pc, #320]	; (8001644 <HAL_I2C_Master_Transmit+0x1f8>)
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001504:	8979      	ldrh	r1, [r7, #10]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	6a3a      	ldr	r2, [r7, #32]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 fc02 	bl	8001d14 <I2C_MasterRequestWrite>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e08d      	b.n	8001636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001530:	e066      	b.n	8001600 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 feec 	bl	8002314 <I2C_WaitOnTXEFlagUntilTimeout>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00d      	beq.n	800155e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2b04      	cmp	r3, #4
 8001548:	d107      	bne.n	800155a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001558:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06b      	b.n	8001636 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d11b      	bne.n	80015d4 <HAL_I2C_Master_Transmit+0x188>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d017      	beq.n	80015d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	6a39      	ldr	r1, [r7, #32]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fee3 	bl	80023a4 <I2C_WaitOnBTFFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00d      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d107      	bne.n	80015fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e01a      	b.n	8001636 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d194      	bne.n	8001532 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001634:	2302      	movs	r3, #2
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	00100002 	.word	0x00100002
 8001644:	ffff0000 	.word	0xffff0000

08001648 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	460b      	mov	r3, r1
 8001656:	817b      	strh	r3, [r7, #10]
 8001658:	4613      	mov	r3, r2
 800165a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fa74 	bl	8000b4c <HAL_GetTick>
 8001664:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b20      	cmp	r3, #32
 8001670:	f040 824b 	bne.w	8001b0a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2319      	movs	r3, #25
 800167a:	2201      	movs	r2, #1
 800167c:	497f      	ldr	r1, [pc, #508]	; (800187c <HAL_I2C_Master_Receive+0x234>)
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 fd2e 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
 800168c:	e23e      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_I2C_Master_Receive+0x54>
 8001698:	2302      	movs	r3, #2
 800169a:	e237      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d007      	beq.n	80016c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2222      	movs	r2, #34	; 0x22
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2210      	movs	r2, #16
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	893a      	ldrh	r2, [r7, #8]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a5f      	ldr	r2, [pc, #380]	; (8001880 <HAL_I2C_Master_Receive+0x238>)
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fb84 	bl	8001e18 <I2C_MasterRequestRead>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e1f8      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	d113      	bne.n	800174a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e1cc      	b.n	8001ae4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	2b01      	cmp	r3, #1
 8001750:	d11e      	bne.n	8001790 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001762:	b672      	cpsid	i
}
 8001764:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800178c:	b662      	cpsie	i
}
 800178e:	e035      	b.n	80017fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	2b02      	cmp	r3, #2
 8001796:	d11e      	bne.n	80017d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017d2:	b662      	cpsie	i
}
 80017d4:	e012      	b.n	80017fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80017fc:	e172      	b.n	8001ae4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001802:	2b03      	cmp	r3, #3
 8001804:	f200 811f 	bhi.w	8001a46 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180c:	2b01      	cmp	r3, #1
 800180e:	d123      	bne.n	8001858 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fe0d 	bl	8002434 <I2C_WaitOnRXNEFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e173      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001856:	e145      	b.n	8001ae4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	2b02      	cmp	r3, #2
 800185e:	d152      	bne.n	8001906 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001866:	2200      	movs	r2, #0
 8001868:	4906      	ldr	r1, [pc, #24]	; (8001884 <HAL_I2C_Master_Receive+0x23c>)
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fc38 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e148      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
 800187a:	bf00      	nop
 800187c:	00100002 	.word	0x00100002
 8001880:	ffff0000 	.word	0xffff0000
 8001884:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018ce:	b662      	cpsie	i
}
 80018d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001904:	e0ee      	b.n	8001ae4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190c:	2200      	movs	r2, #0
 800190e:	4981      	ldr	r1, [pc, #516]	; (8001b14 <HAL_I2C_Master_Receive+0x4cc>)
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fbe5 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0f5      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001966:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <HAL_I2C_Master_Receive+0x4d0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	4a6b      	ldr	r2, [pc, #428]	; (8001b1c <HAL_I2C_Master_Receive+0x4d4>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a1a      	lsrs	r2, r3, #8
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00da      	lsls	r2, r3, #3
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	3b01      	subs	r3, #1
 8001984:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d118      	bne.n	80019be <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f043 0220 	orr.w	r2, r3, #32
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80019ae:	b662      	cpsie	i
}
 80019b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0a6      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d1d9      	bne.n	8001980 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0e:	b662      	cpsie	i
}
 8001a10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a44:	e04e      	b.n	8001ae4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fcf2 	bl	8002434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e058      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d124      	bne.n	8001ae4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d107      	bne.n	8001ab2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f ae88 	bne.w	80017fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	00010004 	.word	0x00010004
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	14f8b589 	.word	0x14f8b589

08001b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	817b      	strh	r3, [r7, #10]
 8001b32:	460b      	mov	r3, r1
 8001b34:	813b      	strh	r3, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b3a:	f7ff f807 	bl	8000b4c <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	f040 80d9 	bne.w	8001d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2319      	movs	r3, #25
 8001b54:	2201      	movs	r2, #1
 8001b56:	496d      	ldr	r1, [pc, #436]	; (8001d0c <HAL_I2C_Mem_Write+0x1ec>)
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fac1 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0cc      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_I2C_Mem_Write+0x56>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0c5      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d007      	beq.n	8001b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2221      	movs	r2, #33	; 0x21
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2240      	movs	r2, #64	; 0x40
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a4d      	ldr	r2, [pc, #308]	; (8001d10 <HAL_I2C_Mem_Write+0x1f0>)
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bde:	88f8      	ldrh	r0, [r7, #6]
 8001be0:	893a      	ldrh	r2, [r7, #8]
 8001be2:	8979      	ldrh	r1, [r7, #10]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	4603      	mov	r3, r0
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f9e0 	bl	8001fb4 <I2C_RequestMemoryWrite>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d052      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e081      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fb86 	bl	8002314 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d107      	bne.n	8001c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d11b      	bne.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d017      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1aa      	bne.n	8001bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fb79 	bl	80023a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e016      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e000      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	00100002 	.word	0x00100002
 8001d10:	ffff0000 	.word	0xffff0000

08001d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	460b      	mov	r3, r1
 8001d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d006      	beq.n	8001d3e <I2C_MasterRequestWrite+0x2a>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <I2C_MasterRequestWrite+0x2a>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d3c:	d108      	bne.n	8001d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e00b      	b.n	8001d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d107      	bne.n	8001d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f9b3 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8e:	d103      	bne.n	8001d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e035      	b.n	8001e08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da4:	d108      	bne.n	8001db8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001da6:	897b      	ldrh	r3, [r7, #10]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	e01b      	b.n	8001df0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	11db      	asrs	r3, r3, #7
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 0306 	and.w	r3, r3, #6
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f063 030f 	orn	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <I2C_MasterRequestWrite+0xfc>)
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f9fc 	bl	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e010      	b.n	8001e08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <I2C_MasterRequestWrite+0x100>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f9ec 	bl	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	00010008 	.word	0x00010008
 8001e14:	00010002 	.word	0x00010002

08001e18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	460b      	mov	r3, r1
 8001e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d006      	beq.n	8001e52 <I2C_MasterRequestRead+0x3a>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d003      	beq.n	8001e52 <I2C_MasterRequestRead+0x3a>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e50:	d108      	bne.n	8001e64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e00b      	b.n	8001e7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d107      	bne.n	8001e7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f929 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d103      	bne.n	8001eac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e079      	b.n	8001fa4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb8:	d108      	bne.n	8001ecc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	e05f      	b.n	8001f8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ecc:	897b      	ldrh	r3, [r7, #10]
 8001ece:	11db      	asrs	r3, r3, #7
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 0306 	and.w	r3, r3, #6
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f063 030f 	orn	r3, r3, #15
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4930      	ldr	r1, [pc, #192]	; (8001fac <I2C_MasterRequestRead+0x194>)
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f972 	bl	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e054      	b.n	8001fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001efa:	897b      	ldrh	r3, [r7, #10]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4929      	ldr	r1, [pc, #164]	; (8001fb0 <I2C_MasterRequestRead+0x198>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f962 	bl	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e044      	b.n	8001fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f8c7 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f66:	d103      	bne.n	8001f70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e017      	b.n	8001fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f74:	897b      	ldrh	r3, [r7, #10]
 8001f76:	11db      	asrs	r3, r3, #7
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 0306 	and.w	r3, r3, #6
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f063 030e 	orn	r3, r3, #14
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <I2C_MasterRequestRead+0x198>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f91e 	bl	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	00010008 	.word	0x00010008
 8001fb0:	00010002 	.word	0x00010002

08001fb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	817b      	strh	r3, [r7, #10]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	813b      	strh	r3, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f878 	bl	80020e0 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002004:	d103      	bne.n	800200e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e05f      	b.n	80020d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	6a3a      	ldr	r2, [r7, #32]
 8002026:	492d      	ldr	r1, [pc, #180]	; (80020dc <I2C_RequestMemoryWrite+0x128>)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f8d3 	bl	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e04c      	b.n	80020d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	6a39      	ldr	r1, [r7, #32]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f95e 	bl	8002314 <I2C_WaitOnTXEFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00d      	beq.n	800207a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b04      	cmp	r3, #4
 8002064:	d107      	bne.n	8002076 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e02b      	b.n	80020d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002080:	893b      	ldrh	r3, [r7, #8]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	e021      	b.n	80020d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800208c:	893b      	ldrh	r3, [r7, #8]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	6a39      	ldr	r1, [r7, #32]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f938 	bl	8002314 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d107      	bne.n	80020c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e005      	b.n	80020d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020c6:	893b      	ldrh	r3, [r7, #8]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	00010002 	.word	0x00010002

080020e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f0:	e048      	b.n	8002184 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d044      	beq.n	8002184 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7fe fd27 	bl	8000b4c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d302      	bcc.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d139      	bne.n	8002184 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10d      	bne.n	8002136 <I2C_WaitOnFlagUntilTimeout+0x56>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	43da      	mvns	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4013      	ands	r3, r2
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	e00c      	b.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	43da      	mvns	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4013      	ands	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	429a      	cmp	r2, r3
 8002154:	d116      	bne.n	8002184 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e023      	b.n	80021cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d10d      	bne.n	80021aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	43da      	mvns	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	e00c      	b.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4013      	ands	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d093      	beq.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021e2:	e071      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f2:	d123      	bne.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002202:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f043 0204 	orr.w	r2, r3, #4
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e067      	b.n	800230c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d041      	beq.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7fe fc82 	bl	8000b4c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d136      	bne.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10c      	bne.n	800227e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4013      	ands	r3, r2
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	e00b      	b.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	43da      	mvns	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4013      	ands	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e021      	b.n	800230c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10c      	bne.n	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	43da      	mvns	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4013      	ands	r3, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e00b      	b.n	8002304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f af6d 	bne.w	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002320:	e034      	b.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f8e3 	bl	80024ee <I2C_IsAcknowledgeFailed>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e034      	b.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d028      	beq.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7fe fc07 	bl	8000b4c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d11d      	bne.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d016      	beq.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e007      	b.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	d1c3      	bne.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b0:	e034      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f89b 	bl	80024ee <I2C_IsAcknowledgeFailed>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e034      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d028      	beq.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7fe fbbf 	bl	8000b4c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11d      	bne.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d016      	beq.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e007      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b04      	cmp	r3, #4
 8002428:	d1c3      	bne.n	80023b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002440:	e049      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d119      	bne.n	8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0210 	mvn.w	r2, #16
 8002458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e030      	b.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7fe fb62 	bl	8000b4c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11d      	bne.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d016      	beq.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e007      	b.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d1ae      	bne.n	8002442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002504:	d11b      	bne.n	800253e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800250e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0204 	orr.w	r2, r3, #4
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e272      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8087 	beq.w	800267a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800256c:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b04      	cmp	r3, #4
 8002576:	d00c      	beq.n	8002592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002578:	4b8f      	ldr	r3, [pc, #572]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d112      	bne.n	80025aa <HAL_RCC_OscConfig+0x5e>
 8002584:	4b8c      	ldr	r3, [pc, #560]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d10b      	bne.n	80025aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d06c      	beq.n	8002678 <HAL_RCC_OscConfig+0x12c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d168      	bne.n	8002678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e24c      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x76>
 80025b4:	4b80      	ldr	r3, [pc, #512]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e02e      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b7b      	ldr	r3, [pc, #492]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7a      	ldr	r2, [pc, #488]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b78      	ldr	r3, [pc, #480]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a77      	ldr	r2, [pc, #476]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0xbc>
 80025ee:	4b72      	ldr	r3, [pc, #456]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a71      	ldr	r2, [pc, #452]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6f      	ldr	r3, [pc, #444]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 8002608:	4b6b      	ldr	r3, [pc, #428]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a6a      	ldr	r2, [pc, #424]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b68      	ldr	r3, [pc, #416]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a67      	ldr	r2, [pc, #412]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fa90 	bl	8000b4c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fa8c 	bl	8000b4c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e200      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xe4>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fa7c 	bl	8000b4c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fa78 	bl	8000b4c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1ec      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x10c>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002686:	4b4c      	ldr	r3, [pc, #304]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x18c>
 800269e:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c0      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4939      	ldr	r1, [pc, #228]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe fa31 	bl	8000b4c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe fa2d 	bl	8000b4c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a1      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4927      	ldr	r1, [pc, #156]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fa10 	bl	8000b4c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002730:	f7fe fa0c 	bl	8000b4c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e180      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03a      	beq.n	80027d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d019      	beq.n	8002796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe f9f0 	bl	8000b4c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe f9ec 	bl	8000b4c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e160      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800278e:	2001      	movs	r0, #1
 8002790:	f000 face 	bl	8002d30 <RCC_Delay>
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe f9d6 	bl	8000b4c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a2:	e00f      	b.n	80027c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe f9d2 	bl	8000b4c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d908      	bls.n	80027c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e146      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	42420000 	.word	0x42420000
 80027c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e9      	bne.n	80027a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a6 	beq.w	800292a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7e      	ldr	r2, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7fe f993 	bl	8000b4c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe f98f 	bl	8000b4c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e103      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b75      	ldr	r3, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x312>
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e02d      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x334>
 8002866:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a69      	ldr	r2, [pc, #420]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a66      	ldr	r2, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	e01c      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x356>
 8002888:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a60      	ldr	r2, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6213      	str	r3, [r2, #32]
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d015      	beq.n	80028ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe f943 	bl	8000b4c <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe f93f 	bl	8000b4c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0b1      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ee      	beq.n	80028ca <HAL_RCC_OscConfig+0x37e>
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe f92d 	bl	8000b4c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe f929 	bl	8000b4c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e09b      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8087 	beq.w	8002a42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d061      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d146      	bne.n	80029d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fe f8fd 	bl	8000b4c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe f8f9 	bl	8000b4c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e06d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297c:	d108      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4921      	ldr	r1, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a19      	ldr	r1, [r3, #32]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	430b      	orrs	r3, r1
 80029a2:	491b      	ldr	r1, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe f8cd 	bl	8000b4c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe f8c9 	bl	8000b4c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e03d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x46a>
 80029d4:	e035      	b.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe f8b6 	bl	8000b4c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe f8b2 	bl	8000b4c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e026      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x498>
 8002a02:	e01e      	b.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e019      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x500>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d0      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4965      	ldr	r1, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d040      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e073      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4936      	ldr	r1, [pc, #216]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7fe f804 	bl	8000b4c <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7fe f800 	bl	8000b4c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e053      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d210      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1cc>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd ff62 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40021000 	.word	0x40021000
 8002c18:	0800892c 	.word	0x0800892c
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x30>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x36>
 8002c52:	e027      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c56:	613b      	str	r3, [r7, #16]
      break;
 8002c58:	e027      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c5b      	lsrs	r3, r3, #17
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	fb03 f202 	mul.w	r2, r3, r2
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e004      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	613b      	str	r3, [r7, #16]
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	693b      	ldr	r3, [r7, #16]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	007a1200 	.word	0x007a1200
 8002cc0:	08008944 	.word	0x08008944
 8002cc4:	08008954 	.word	0x08008954
 8002cc8:	003d0900 	.word	0x003d0900

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff2 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	0800893c 	.word	0x0800893c

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffde 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	0adb      	lsrs	r3, r3, #11
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	0800893c 	.word	0x0800893c

08002d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <RCC_Delay+0x34>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <RCC_Delay+0x38>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0a5b      	lsrs	r3, r3, #9
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d4c:	bf00      	nop
  }
  while (Delay --);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	60fa      	str	r2, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <RCC_Delay+0x1c>
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	20000000 	.word	0x20000000
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e041      	b.n	8002e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fdb6 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f000 fa74 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e03a      	b.n	8002e9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x58>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d009      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x58>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x58>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <HAL_TIM_Base_Start_IT+0xa0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d111      	bne.n	8002e88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d010      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e86:	e007      	b.n	8002e98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0202 	mvn.w	r2, #2
 8002edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9b4 	bl	8003260 <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9a7 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f9b6 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0204 	mvn.w	r2, #4
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f98a 	bl	8003260 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f97d 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f98c 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0208 	mvn.w	r2, #8
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f960 	bl	8003260 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f953 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f962 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0210 	mvn.w	r2, #16
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f936 	bl	8003260 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f929 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f938 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0201 	mvn.w	r2, #1
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f005 fa6e 	bl	8008510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d10e      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d107      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa7b 	bl	8003556 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8fc 	bl	8003284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b20      	cmp	r3, #32
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0220 	mvn.w	r2, #32
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa46 	bl	8003544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_ConfigClockSource+0x1c>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0b4      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x186>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xd4>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8086 	beq.w	8003232 <HAL_TIM_ConfigClockSource+0x172>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xa6>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x11a>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xfa>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x13a>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	f000 f968 	bl	800344a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04f      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a4:	f000 f951 	bl	800344a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 f8c8 	bl	800335c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f91f 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 f8e6 	bl	80033b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f90f 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	461a      	mov	r2, r3
 8003208:	f000 f8a8 	bl	800335c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f8ff 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 8003218:	e00c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 f8f6 	bl	8003416 <TIM_ITRx_SetConfig>
      break;
 800322a:	e003      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
	...

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_Base_SetConfig+0xbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_Base_SetConfig+0xc0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <TIM_Base_SetConfig+0xbc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a18      	ldr	r2, [pc, #96]	; (8003358 <TIM_Base_SetConfig+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a07      	ldr	r2, [pc, #28]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800

0800335c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0201 	bic.w	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 030a 	bic.w	r3, r3, #10
 8003398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0210 	bic.w	r2, r3, #16
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	031b      	lsls	r3, r3, #12
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	f043 0307 	orr.w	r3, r3, #7
 8003438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800344a:	b480      	push	{r7}
 800344c:	b087      	sub	sp, #28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003464:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	021a      	lsls	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	609a      	str	r2, [r3, #8]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800349c:	2302      	movs	r3, #2
 800349e:	e046      	b.n	800352e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d009      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10c      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800

08003544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e042      	b.n	8003600 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fa20 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	; 0x24
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f82b 	bl	8003608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003642:	f023 030c 	bic.w	r3, r3, #12
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	430b      	orrs	r3, r1
 800364e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2c      	ldr	r2, [pc, #176]	; (800371c <UART_SetConfig+0x114>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d103      	bne.n	8003678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003670:	f7ff fb4a 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	e002      	b.n	800367e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7ff fb32 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800367c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009a      	lsls	r2, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <UART_SetConfig+0x118>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	0119      	lsls	r1, r3, #4
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009a      	lsls	r2, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <UART_SetConfig+0x118>)
 80036b6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2064      	movs	r0, #100	; 0x64
 80036be:	fb00 f303 	mul.w	r3, r0, r3
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	3332      	adds	r3, #50	; 0x32
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <UART_SetConfig+0x118>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	4419      	add	r1, r3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <UART_SetConfig+0x118>)
 80036ee:	fba3 0302 	umull	r0, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2064      	movs	r0, #100	; 0x64
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	3332      	adds	r3, #50	; 0x32
 8003700:	4a07      	ldr	r2, [pc, #28]	; (8003720 <UART_SetConfig+0x118>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	f003 020f 	and.w	r2, r3, #15
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	440a      	add	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40013800 	.word	0x40013800
 8003720:	51eb851f 	.word	0x51eb851f

08003724 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f001 fc92 	bl	800505e <VL53L0X_get_offset_calibration_data_micro_meter>
 800373a:	4603      	mov	r3, r0
 800373c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b096      	sub	sp, #88	; 0x58
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003754:	2300      	movs	r3, #0
 8003756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800375a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003762:	2200      	movs	r2, #0
 8003764:	2188      	movs	r1, #136	; 0x88
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f004 fbea 	bl	8007f40 <VL53L0X_WrByte>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003780:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800378a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a9e      	ldr	r2, [pc, #632]	; (8003a0c <VL53L0X_DataInit+0x2c0>)
 8003792:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a9d      	ldr	r2, [pc, #628]	; (8003a10 <VL53L0X_DataInit+0x2c4>)
 800379a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fac1 	bl	8003d32 <VL53L0X_GetDeviceParameters>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80037b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d112      	bne.n	80037e4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80037be:	2300      	movs	r3, #0
 80037c0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80037c2:	2300      	movs	r3, #0
 80037c4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 0410 	add.w	r4, r3, #16
 80037cc:	f107 0510 	add.w	r5, r7, #16
 80037d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2264      	movs	r2, #100	; 0x64
 80037e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f44f 7261 	mov.w	r2, #900	; 0x384
 80037f2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037fc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003806:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003812:	2201      	movs	r2, #1
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f004 fb92 	bl	8007f40 <VL53L0X_WrByte>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003824:	4313      	orrs	r3, r2
 8003826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800382a:	2201      	movs	r2, #1
 800382c:	21ff      	movs	r1, #255	; 0xff
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f004 fb86 	bl	8007f40 <VL53L0X_WrByte>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800383c:	4313      	orrs	r3, r2
 800383e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f004 fb7a 	bl	8007f40 <VL53L0X_WrByte>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003854:	4313      	orrs	r3, r2
 8003856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800385a:	f107 030f 	add.w	r3, r7, #15
 800385e:	461a      	mov	r2, r3
 8003860:	2191      	movs	r1, #145	; 0x91
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f004 fbee 	bl	8008044 <VL53L0X_RdByte>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003870:	4313      	orrs	r3, r2
 8003872:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800387e:	2201      	movs	r2, #1
 8003880:	2100      	movs	r1, #0
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f004 fb5c 	bl	8007f40 <VL53L0X_WrByte>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003890:	4313      	orrs	r3, r2
 8003892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003896:	2200      	movs	r2, #0
 8003898:	21ff      	movs	r1, #255	; 0xff
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f004 fb50 	bl	8007f40 <VL53L0X_WrByte>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f004 fb44 	bl	8007f40 <VL53L0X_WrByte>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	653b      	str	r3, [r7, #80]	; 0x50
 80038ca:	e014      	b.n	80038f6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80038cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d114      	bne.n	80038fe <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80038d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fd19 	bl	8004314 <VL53L0X_SetLimitCheckEnable>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f2:	3301      	adds	r3, #1
 80038f4:	653b      	str	r3, [r7, #80]	; 0x50
 80038f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	dde7      	ble.n	80038cc <VL53L0X_DataInit+0x180>
 80038fc:	e000      	b.n	8003900 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80038fe:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003900:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003908:	2200      	movs	r2, #0
 800390a:	2102      	movs	r1, #2
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fd01 	bl	8004314 <VL53L0X_SetLimitCheckEnable>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003918:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003920:	2200      	movs	r2, #0
 8003922:	2103      	movs	r1, #3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fcf5 	bl	8004314 <VL53L0X_SetLimitCheckEnable>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003930:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003938:	2200      	movs	r2, #0
 800393a:	2104      	movs	r1, #4
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fce9 	bl	8004314 <VL53L0X_SetLimitCheckEnable>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003948:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003950:	2200      	movs	r2, #0
 8003952:	2105      	movs	r1, #5
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fcdd 	bl	8004314 <VL53L0X_SetLimitCheckEnable>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003960:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003968:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800396c:	2100      	movs	r1, #0
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fd7e 	bl	8004470 <VL53L0X_SetLimitCheckValue>
 8003974:	4603      	mov	r3, r0
 8003976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800397a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800397e:	2b00      	cmp	r3, #0
 8003980:	d108      	bne.n	8003994 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003986:	2101      	movs	r1, #1
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fd71 	bl	8004470 <VL53L0X_SetLimitCheckValue>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003994:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800399c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80039a0:	2102      	movs	r1, #2
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fd64 	bl	8004470 <VL53L0X_SetLimitCheckValue>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039b6:	2200      	movs	r2, #0
 80039b8:	2103      	movs	r1, #3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fd58 	bl	8004470 <VL53L0X_SetLimitCheckValue>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	2101      	movs	r1, #1
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f004 fab0 	bl	8007f40 <VL53L0X_WrByte>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80039ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80039fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3758      	adds	r7, #88	; 0x58
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	00016b85 	.word	0x00016b85
 8003a10:	000970a4 	.word	0x000970a4

08003a14 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b09e      	sub	sp, #120	; 0x78
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 ff30 	bl	8008890 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003a50:	2101      	movs	r1, #1
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f002 fa43 	bl	8005ede <VL53L0X_get_info_from_device>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d80d      	bhi.n	8003a94 <VL53L0X_StaticInit+0x80>
 8003a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d806      	bhi.n	8003a94 <VL53L0X_StaticInit+0x80>
 8003a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d90b      	bls.n	8003aac <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003a94:	f107 0218 	add.w	r2, r7, #24
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 fcd7 	bl	8005452 <VL53L0X_perform_ref_spad_management>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003aaa:	e009      	b.n	8003ac0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f001 fed8 	bl	800586a <VL53L0X_set_reference_spads>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003ac0:	4b94      	ldr	r3, [pc, #592]	; (8003d14 <VL53L0X_StaticInit+0x300>)
 8003ac2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003ac4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10f      	bne.n	8003aec <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003ad2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae6:	e001      	b.n	8003aec <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003ae8:	4b8a      	ldr	r3, [pc, #552]	; (8003d14 <VL53L0X_StaticInit+0x300>)
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003aec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003af4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f003 fb0c 	bl	8007114 <VL53L0X_load_tuning_settings>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2304      	movs	r3, #4
 8003b10:	2200      	movs	r2, #0
 8003b12:	2100      	movs	r1, #0
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 f8d3 	bl	8004cc0 <VL53L0X_SetGpioConfig>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b20:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d121      	bne.n	8003b6c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b28:	2201      	movs	r2, #1
 8003b2a:	21ff      	movs	r1, #255	; 0xff
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f004 fa07 	bl	8007f40 <VL53L0X_WrByte>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003b38:	f107 031a 	add.w	r3, r7, #26
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2184      	movs	r1, #132	; 0x84
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f004 faa9 	bl	8008098 <VL53L0X_RdWord>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b54:	2200      	movs	r2, #0
 8003b56:	21ff      	movs	r1, #255	; 0xff
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f004 f9f1 	bl	8007f40 <VL53L0X_WrByte>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003b74:	8b7b      	ldrh	r3, [r7, #26]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003b80:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8cf 	bl	8003d32 <VL53L0X_GetDeviceParameters>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003b9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d110      	bne.n	8003bc4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003ba2:	f107 0319 	add.w	r3, r7, #25
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f991 	bl	8003ed0 <VL53L0X_GetFractionEnable>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003bb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003bbc:	7e7a      	ldrb	r2, [r7, #25]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003bc4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10e      	bne.n	8003bea <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f103 0410 	add.w	r4, r3, #16
 8003bd2:	f107 051c 	add.w	r5, r7, #28
 8003bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003bea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d111      	bne.n	8003c16 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003bf2:	f107 0319 	add.w	r3, r7, #25
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f004 fa22 	bl	8008044 <VL53L0X_RdByte>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003c06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003c0e:	7e7a      	ldrb	r2, [r7, #25]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003c16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9b0 	bl	8003f88 <VL53L0X_SetSequenceStepEnable>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003c2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c36:	2200      	movs	r2, #0
 8003c38:	2102      	movs	r1, #2
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9a4 	bl	8003f88 <VL53L0X_SetSequenceStepEnable>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003c46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c5e:	f107 0313 	add.w	r3, r7, #19
 8003c62:	461a      	mov	r2, r3
 8003c64:	2100      	movs	r1, #0
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f977 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003c7a:	7cfa      	ldrb	r2, [r7, #19]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c8a:	f107 0313 	add.w	r3, r7, #19
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2101      	movs	r1, #1
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f961 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ca6:	7cfa      	ldrb	r2, [r7, #19]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2103      	movs	r1, #3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f002 fe8c 	bl	80069dc <get_sequence_step_timeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2104      	movs	r1, #4
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f002 fe76 	bl	80069dc <get_sequence_step_timeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3770      	adds	r7, #112	; 0x70
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdb0      	pop	{r4, r5, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2000000c 	.word	0x2000000c

08003d18 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003d20:	239d      	movs	r3, #157	; 0x9d
 8003d22:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8b1 	bl	8003eac <VL53L0X_GetDeviceMode>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa5d 	bl	800421c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d107      	bne.n	8003d8c <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3310      	adds	r3, #16
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa92 	bl	80042ac <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fcc2 	bl	8003724 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d134      	bne.n	8003e16 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	e02a      	b.n	8003e08 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d12a      	bne.n	8003e10 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	b299      	uxth	r1, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fbb1 	bl	8004534 <VL53L0X_GetLimitCheckValue>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d117      	bne.n	8003e14 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	b299      	uxth	r1, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3318      	adds	r3, #24
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	461a      	mov	r2, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fb1a 	bl	800442c <VL53L0X_GetLimitCheckEnable>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	ddd1      	ble.n	8003db2 <VL53L0X_GetDeviceParameters+0x80>
 8003e0e:	e002      	b.n	8003e16 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003e14:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	333c      	adds	r3, #60	; 0x3c
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fc13 	bl	8004650 <VL53L0X_GetWrapAroundCheckEnable>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f879 	bl	8003f34 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003e42:	4603      	mov	r3, r0
 8003e44:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	2b15      	cmp	r3, #21
 8003e68:	bf8c      	ite	hi
 8003e6a:	2201      	movhi	r2, #1
 8003e6c:	2200      	movls	r2, #0
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	d10f      	bne.n	8003e94 <VL53L0X_SetDeviceMode+0x40>
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <VL53L0X_SetDeviceMode+0x54>)
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	741a      	strb	r2, [r3, #16]
		break;
 8003e92:	e001      	b.n	8003e98 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003e94:	23f8      	movs	r3, #248	; 0xf8
 8003e96:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	0030000b 	.word	0x0030000b

08003eac <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7c1a      	ldrb	r2, [r3, #16]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	2109      	movs	r1, #9
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f004 f8ae 	bl	8008044 <VL53L0X_RdByte>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f002 ff66 	bl	8006df0 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f003 f833 	bl	8006fb0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	460b      	mov	r3, r1
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4619      	mov	r1, r3
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f002 ff05 	bl	8006d82 <VL53L0X_get_vcsel_pulse_period>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2101      	movs	r1, #1
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f004 f849 	bl	8008044 <VL53L0X_RdByte>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d159      	bne.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003fc2:	78bb      	ldrb	r3, [r7, #2]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d12b      	bne.n	8004020 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d825      	bhi.n	800401a <VL53L0X_SetSequenceStepEnable+0x92>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	08003ff3 	.word	0x08003ff3
 8003fdc:	08003ffd 	.word	0x08003ffd
 8003fe0:	08004007 	.word	0x08004007
 8003fe4:	08004011 	.word	0x08004011
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003fe8:	7dbb      	ldrb	r3, [r7, #22]
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	75bb      	strb	r3, [r7, #22]
				break;
 8003ff0:	e041      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003ff2:	7dbb      	ldrb	r3, [r7, #22]
 8003ff4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003ff8:	75bb      	strb	r3, [r7, #22]
				break;
 8003ffa:	e03c      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003ffc:	7dbb      	ldrb	r3, [r7, #22]
 8003ffe:	f043 0304 	orr.w	r3, r3, #4
 8004002:	75bb      	strb	r3, [r7, #22]
				break;
 8004004:	e037      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004006:	7dbb      	ldrb	r3, [r7, #22]
 8004008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800400c:	75bb      	strb	r3, [r7, #22]
				break;
 800400e:	e032      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004010:	7dbb      	ldrb	r3, [r7, #22]
 8004012:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004016:	75bb      	strb	r3, [r7, #22]
				break;
 8004018:	e02d      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800401a:	23fc      	movs	r3, #252	; 0xfc
 800401c:	75fb      	strb	r3, [r7, #23]
 800401e:	e02a      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d825      	bhi.n	8004072 <VL53L0X_SetSequenceStepEnable+0xea>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004041 	.word	0x08004041
 8004030:	0800404b 	.word	0x0800404b
 8004034:	08004055 	.word	0x08004055
 8004038:	0800405f 	.word	0x0800405f
 800403c:	08004069 	.word	0x08004069
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004040:	7dbb      	ldrb	r3, [r7, #22]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	75bb      	strb	r3, [r7, #22]
				break;
 8004048:	e015      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800404a:	7dbb      	ldrb	r3, [r7, #22]
 800404c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004050:	75bb      	strb	r3, [r7, #22]
				break;
 8004052:	e010      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004054:	7dbb      	ldrb	r3, [r7, #22]
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	75bb      	strb	r3, [r7, #22]
				break;
 800405c:	e00b      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800405e:	7dbb      	ldrb	r3, [r7, #22]
 8004060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004064:	75bb      	strb	r3, [r7, #22]
				break;
 8004066:	e006      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004068:	7dbb      	ldrb	r3, [r7, #22]
 800406a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406e:	75bb      	strb	r3, [r7, #22]
				break;
 8004070:	e001      	b.n	8004076 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004072:	23fc      	movs	r3, #252	; 0xfc
 8004074:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	7dba      	ldrb	r2, [r7, #22]
 800407a:	429a      	cmp	r2, r3
 800407c:	d01e      	beq.n	80040bc <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800407e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8004086:	7dbb      	ldrb	r3, [r7, #22]
 8004088:	461a      	mov	r2, r3
 800408a:	2101      	movs	r1, #1
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f003 ff57 	bl	8007f40 <VL53L0X_WrByte>
 8004092:	4603      	mov	r3, r0
 8004094:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7dba      	ldrb	r2, [r7, #22]
 80040a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80040a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ff29 	bl	8003f0e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80040bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	72fb      	strb	r3, [r7, #11]
 80040d6:	4613      	mov	r3, r2
 80040d8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d836      	bhi.n	8004158 <sequence_step_enabled+0x90>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <sequence_step_enabled+0x28>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	08004105 	.word	0x08004105
 80040f4:	08004117 	.word	0x08004117
 80040f8:	08004129 	.word	0x08004129
 80040fc:	0800413b 	.word	0x0800413b
 8004100:	0800414d 	.word	0x0800414d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004104:	7abb      	ldrb	r3, [r7, #10]
 8004106:	111b      	asrs	r3, r3, #4
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	701a      	strb	r2, [r3, #0]
		break;
 8004114:	e022      	b.n	800415c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004116:	7abb      	ldrb	r3, [r7, #10]
 8004118:	10db      	asrs	r3, r3, #3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	b2da      	uxtb	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	701a      	strb	r2, [r3, #0]
		break;
 8004126:	e019      	b.n	800415c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004128:	7abb      	ldrb	r3, [r7, #10]
 800412a:	109b      	asrs	r3, r3, #2
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	701a      	strb	r2, [r3, #0]
		break;
 8004138:	e010      	b.n	800415c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800413a:	7abb      	ldrb	r3, [r7, #10]
 800413c:	119b      	asrs	r3, r3, #6
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	701a      	strb	r2, [r3, #0]
		break;
 800414a:	e007      	b.n	800415c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800414c:	7abb      	ldrb	r3, [r7, #10]
 800414e:	09db      	lsrs	r3, r3, #7
 8004150:	b2da      	uxtb	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	701a      	strb	r2, [r3, #0]
		break;
 8004156:	e001      	b.n	800415c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004158:	23fc      	movs	r3, #252	; 0xfc
 800415a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800415c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop

0800416c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800417e:	f107 030e 	add.w	r3, r7, #14
 8004182:	461a      	mov	r2, r3
 8004184:	2101      	movs	r1, #1
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f003 ff5c 	bl	8008044 <VL53L0X_RdByte>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d107      	bne.n	80041a8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004198:	7bba      	ldrb	r2, [r7, #14]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2100      	movs	r1, #0
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ff92 	bl	80040c8 <sequence_step_enabled>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d108      	bne.n	80041c2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80041b0:	7bba      	ldrb	r2, [r7, #14]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3302      	adds	r3, #2
 80041b6:	2101      	movs	r1, #1
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff85 	bl	80040c8 <sequence_step_enabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80041ca:	7bba      	ldrb	r2, [r7, #14]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	2102      	movs	r1, #2
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff ff78 	bl	80040c8 <sequence_step_enabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80041e4:	7bba      	ldrb	r2, [r7, #14]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	3303      	adds	r3, #3
 80041ea:	2103      	movs	r1, #3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff6b 	bl	80040c8 <sequence_step_enabled>
 80041f2:	4603      	mov	r3, r0
 80041f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80041fe:	7bba      	ldrb	r2, [r7, #14]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	3304      	adds	r3, #4
 8004204:	2104      	movs	r1, #4
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff ff5e 	bl	80040c8 <sequence_step_enabled>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004210:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	461a      	mov	r2, r3
 8004230:	21f8      	movs	r1, #248	; 0xf8
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f003 ff30 	bl	8008098 <VL53L0X_RdWord>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800423c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d108      	bne.n	8004256 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	461a      	mov	r2, r3
 800424a:	2104      	movs	r1, #4
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f003 ff5b 	bl	8008108 <VL53L0X_RdDWord>
 8004252:	4603      	mov	r3, r0
 8004254:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800425e:	89bb      	ldrh	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	89ba      	ldrh	r2, [r7, #12]
 8004268:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7f1b      	ldrb	r3, [r3, #28]
 8004296:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	7bba      	ldrb	r2, [r7, #14]
 800429c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80042ba:	f107 030e 	add.w	r3, r7, #14
 80042be:	461a      	mov	r2, r3
 80042c0:	2120      	movs	r1, #32
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f003 fee8 	bl	8008098 <VL53L0X_RdWord>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80042cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d118      	bne.n	8004306 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80042d4:	89fb      	ldrh	r3, [r7, #14]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
 80042ec:	e00b      	b.n	8004306 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004324:	2300      	movs	r3, #0
 8004326:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d902      	bls.n	8004340 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800433a:	23fc      	movs	r3, #252	; 0xfc
 800433c:	75fb      	strb	r3, [r7, #23]
 800433e:	e05b      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	73bb      	strb	r3, [r7, #14]
 8004352:	e00a      	b.n	800436a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	330c      	adds	r3, #12
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d841      	bhi.n	80043f4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004391 	.word	0x08004391
 800437c:	0800439b 	.word	0x0800439b
 8004380:	080043b1 	.word	0x080043b1
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043c5 	.word	0x080043c5
 800438c:	080043dd 	.word	0x080043dd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004398:	e02e      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800439e:	b29b      	uxth	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	2144      	movs	r1, #68	; 0x44
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f003 fdef 	bl	8007f88 <VL53L0X_WrWord>
 80043aa:	4603      	mov	r3, r0
 80043ac:	75fb      	strb	r3, [r7, #23]

			break;
 80043ae:	e023      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80043b8:	e01e      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80043c2:	e019      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80043ca:	7b7b      	ldrb	r3, [r7, #13]
 80043cc:	22fe      	movs	r2, #254	; 0xfe
 80043ce:	2160      	movs	r1, #96	; 0x60
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f003 fe03 	bl	8007fdc <VL53L0X_UpdateByte>
 80043d6:	4603      	mov	r3, r0
 80043d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80043da:	e00d      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80043dc:	7bbb      	ldrb	r3, [r7, #14]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80043e2:	7b7b      	ldrb	r3, [r7, #13]
 80043e4:	22ef      	movs	r2, #239	; 0xef
 80043e6:	2160      	movs	r1, #96	; 0x60
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f003 fdf7 	bl	8007fdc <VL53L0X_UpdateByte>
 80043ee:	4603      	mov	r3, r0
 80043f0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80043f2:	e001      	b.n	80043f8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043f4:	23fc      	movs	r3, #252	; 0xfc
 80043f6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80043f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10f      	bne.n	8004420 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004400:	787b      	ldrb	r3, [r7, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004412:	e005      	b.n	8004420 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	460b      	mov	r3, r1
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	2b05      	cmp	r3, #5
 8004442:	d905      	bls.n	8004450 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004444:	23fc      	movs	r3, #252	; 0xfc
 8004446:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e008      	b.n	8004462 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004450:	897b      	ldrh	r3, [r7, #10]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800445a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7dba      	ldrb	r2, [r7, #22]
 8004460:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004466:	4618      	mov	r0, r3
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	460b      	mov	r3, r1
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800448e:	7dbb      	ldrb	r3, [r7, #22]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d107      	bne.n	80044a4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004494:	897b      	ldrh	r3, [r7, #10]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	330c      	adds	r3, #12
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e040      	b.n	8004526 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80044a4:	897b      	ldrh	r3, [r7, #10]
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d830      	bhi.n	800450c <VL53L0X_SetLimitCheckValue+0x9c>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <VL53L0X_SetLimitCheckValue+0x40>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044c9 	.word	0x080044c9
 80044b4:	080044d1 	.word	0x080044d1
 80044b8:	080044e7 	.word	0x080044e7
 80044bc:	080044ef 	.word	0x080044ef
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80044ce:	e01f      	b.n	8004510 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	2144      	movs	r1, #68	; 0x44
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f003 fd54 	bl	8007f88 <VL53L0X_WrWord>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80044e4:	e014      	b.n	8004510 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80044ec:	e010      	b.n	8004510 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80044f4:	e00c      	b.n	8004510 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	2164      	movs	r1, #100	; 0x64
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f003 fd41 	bl	8007f88 <VL53L0X_WrWord>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800450a:	e001      	b.n	8004510 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800450c:	23fc      	movs	r3, #252	; 0xfc
 800450e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004510:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	330c      	adds	r3, #12
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	460b      	mov	r3, r1
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004542:	2300      	movs	r3, #0
 8004544:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d847      	bhi.n	80045e0 <VL53L0X_GetLimitCheckValue+0xac>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <VL53L0X_GetLimitCheckValue+0x24>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004571 	.word	0x08004571
 800455c:	0800457d 	.word	0x0800457d
 8004560:	080045a3 	.word	0x080045a3
 8004564:	080045af 	.word	0x080045af
 8004568:	080045bb 	.word	0x080045bb
 800456c:	080045bb 	.word	0x080045bb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	77bb      	strb	r3, [r7, #30]
		break;
 800457a:	e033      	b.n	80045e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800457c:	f107 0316 	add.w	r3, r7, #22
 8004580:	461a      	mov	r2, r3
 8004582:	2144      	movs	r1, #68	; 0x44
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f003 fd87 	bl	8008098 <VL53L0X_RdWord>
 800458a:	4603      	mov	r3, r0
 800458c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800458e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004596:	8afb      	ldrh	r3, [r7, #22]
 8004598:	025b      	lsls	r3, r3, #9
 800459a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800459c:	2301      	movs	r3, #1
 800459e:	77bb      	strb	r3, [r7, #30]
		break;
 80045a0:	e020      	b.n	80045e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	77bb      	strb	r3, [r7, #30]
		break;
 80045ac:	e01a      	b.n	80045e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	77bb      	strb	r3, [r7, #30]
		break;
 80045b8:	e014      	b.n	80045e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80045ba:	f107 0316 	add.w	r3, r7, #22
 80045be:	461a      	mov	r2, r3
 80045c0:	2164      	movs	r1, #100	; 0x64
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f003 fd68 	bl	8008098 <VL53L0X_RdWord>
 80045c8:	4603      	mov	r3, r0
 80045ca:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80045cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80045d4:	8afb      	ldrh	r3, [r7, #22]
 80045d6:	025b      	lsls	r3, r3, #9
 80045d8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	77bb      	strb	r3, [r7, #30]
		break;
 80045de:	e001      	b.n	80045e4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045e0:	23fc      	movs	r3, #252	; 0xfc
 80045e2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d12a      	bne.n	8004642 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80045ec:	7fbb      	ldrb	r3, [r7, #30]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d124      	bne.n	800463c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d110      	bne.n	800461a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	330c      	adds	r3, #12
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800460c:	897b      	ldrh	r3, [r7, #10]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004618:	e013      	b.n	8004642 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004620:	897b      	ldrh	r3, [r7, #10]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	330c      	adds	r3, #12
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800463a:	e002      	b.n	8004642 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004642:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800465e:	f107 030e 	add.w	r3, r7, #14
 8004662:	461a      	mov	r2, r3
 8004664:	2101      	movs	r1, #1
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f003 fcec 	bl	8008044 <VL53L0X_RdByte>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10e      	bne.n	8004696 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004678:	7bba      	ldrb	r2, [r7, #14]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004680:	7bbb      	ldrb	r3, [r7, #14]
 8004682:	b25b      	sxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	da03      	bge.n	8004690 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e002      	b.n	8004696 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80046a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80046c0:	f107 030e 	add.w	r3, r7, #14
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fbf0 	bl	8003eac <VL53L0X_GetDeviceMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80046d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d107      	bne.n	80046e8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f898 	bl	8004814 <VL53L0X_StartMeasurement>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80046e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 fb3c 	bl	8005d6e <VL53L0X_measurement_poll_for_completion>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004702:	7bbb      	ldrb	r3, [r7, #14]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d103      	bne.n	8004710 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2203      	movs	r2, #3
 800470c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004728:	2300      	movs	r3, #0
 800472a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800472c:	2301      	movs	r3, #1
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f001 fade 	bl	8005cf4 <VL53L0X_perform_ref_calibration>
 8004738:	4603      	mov	r3, r0
 800473a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800473c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800475e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004760:	7dbb      	ldrb	r3, [r7, #22]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d005      	beq.n	8004772 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004766:	7dbb      	ldrb	r3, [r7, #22]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d002      	beq.n	8004772 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800476c:	7dbb      	ldrb	r3, [r7, #22]
 800476e:	2b03      	cmp	r3, #3
 8004770:	d147      	bne.n	8004802 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	f107 0210 	add.w	r2, r7, #16
 800477a:	2101      	movs	r1, #1
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fbc1 	bl	8004f04 <VL53L0X_GetInterruptThresholds>
 8004782:	4603      	mov	r3, r0
 8004784:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800478c:	d803      	bhi.n	8004796 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800478e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004790:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004794:	d935      	bls.n	8004802 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d131      	bne.n	8004802 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80047a4:	491a      	ldr	r1, [pc, #104]	; (8004810 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f002 fcb4 	bl	8007114 <VL53L0X_load_tuning_settings>
 80047ac:	4603      	mov	r3, r0
 80047ae:	75fb      	strb	r3, [r7, #23]
 80047b0:	e027      	b.n	8004802 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80047b2:	2204      	movs	r2, #4
 80047b4:	21ff      	movs	r1, #255	; 0xff
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f003 fbc2 	bl	8007f40 <VL53L0X_WrByte>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80047c6:	2200      	movs	r2, #0
 80047c8:	2170      	movs	r1, #112	; 0x70
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f003 fbb8 	bl	8007f40 <VL53L0X_WrByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80047da:	2200      	movs	r2, #0
 80047dc:	21ff      	movs	r1, #255	; 0xff
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f003 fbae 	bl	8007f40 <VL53L0X_WrByte>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80047ee:	2200      	movs	r2, #0
 80047f0:	2180      	movs	r1, #128	; 0x80
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f003 fba4 	bl	8007f40 <VL53L0X_WrByte>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	4313      	orrs	r3, r2
 8004800:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004802:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000100 	.word	0x20000100

08004814 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004824:	f107 030e 	add.w	r3, r7, #14
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fb3e 	bl	8003eac <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004830:	2201      	movs	r2, #1
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f003 fb83 	bl	8007f40 <VL53L0X_WrByte>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800483e:	2201      	movs	r2, #1
 8004840:	21ff      	movs	r1, #255	; 0xff
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f003 fb7c 	bl	8007f40 <VL53L0X_WrByte>
 8004848:	4603      	mov	r3, r0
 800484a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800484c:	2200      	movs	r2, #0
 800484e:	2100      	movs	r1, #0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f003 fb75 	bl	8007f40 <VL53L0X_WrByte>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004860:	461a      	mov	r2, r3
 8004862:	2191      	movs	r1, #145	; 0x91
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f003 fb6b 	bl	8007f40 <VL53L0X_WrByte>
 800486a:	4603      	mov	r3, r0
 800486c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800486e:	2201      	movs	r2, #1
 8004870:	2100      	movs	r1, #0
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f003 fb64 	bl	8007f40 <VL53L0X_WrByte>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800487c:	2200      	movs	r2, #0
 800487e:	21ff      	movs	r1, #255	; 0xff
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f003 fb5d 	bl	8007f40 <VL53L0X_WrByte>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800488a:	2200      	movs	r2, #0
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f003 fb56 	bl	8007f40 <VL53L0X_WrByte>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d054      	beq.n	8004948 <VL53L0X_StartMeasurement+0x134>
 800489e:	2b03      	cmp	r3, #3
 80048a0:	dc6c      	bgt.n	800497c <VL53L0X_StartMeasurement+0x168>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <VL53L0X_StartMeasurement+0x98>
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d034      	beq.n	8004914 <VL53L0X_StartMeasurement+0x100>
 80048aa:	e067      	b.n	800497c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80048ac:	2201      	movs	r2, #1
 80048ae:	2100      	movs	r1, #0
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f003 fb45 	bl	8007f40 <VL53L0X_WrByte>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80048be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d15d      	bne.n	8004982 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80048d0:	f107 030d 	add.w	r3, r7, #13
 80048d4:	461a      	mov	r2, r3
 80048d6:	2100      	movs	r1, #0
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f003 fbb3 	bl	8008044 <VL53L0X_RdByte>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3301      	adds	r3, #1
 80048e6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80048e8:	7b7a      	ldrb	r2, [r7, #13]
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	4013      	ands	r3, r2
 80048ee:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d107      	bne.n	8004906 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80048f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004904:	d3e1      	bcc.n	80048ca <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800490c:	d339      	bcc.n	8004982 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800490e:	23f9      	movs	r3, #249	; 0xf9
 8004910:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004912:	e036      	b.n	8004982 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800491c:	2101      	movs	r1, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ff12 	bl	8004748 <VL53L0X_CheckAndLoadInterruptSettings>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004928:	2202      	movs	r2, #2
 800492a:	2100      	movs	r1, #0
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f003 fb07 	bl	8007f40 <VL53L0X_WrByte>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d123      	bne.n	8004986 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004946:	e01e      	b.n	8004986 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004950:	2101      	movs	r1, #1
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fef8 	bl	8004748 <VL53L0X_CheckAndLoadInterruptSettings>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800495c:	2204      	movs	r2, #4
 800495e:	2100      	movs	r1, #0
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f003 faed 	bl	8007f40 <VL53L0X_WrByte>
 8004966:	4603      	mov	r3, r0
 8004968:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800496a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2204      	movs	r2, #4
 8004976:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800497a:	e006      	b.n	800498a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800497c:	23f8      	movs	r3, #248	; 0xf8
 800497e:	75fb      	strb	r3, [r7, #23]
 8004980:	e004      	b.n	800498c <VL53L0X_StartMeasurement+0x178>
		break;
 8004982:	bf00      	nop
 8004984:	e002      	b.n	800498c <VL53L0X_StartMeasurement+0x178>
		break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <VL53L0X_StartMeasurement+0x178>
		break;
 800498a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800498c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80049ac:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80049ae:	7bbb      	ldrb	r3, [r7, #14]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d112      	bne.n	80049da <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb18 	bl	8004ff0 <VL53L0X_GetInterruptMaskStatus>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d103      	bne.n	80049d2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e01c      	b.n	8004a0c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e018      	b.n	8004a0c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80049da:	f107 030d 	add.w	r3, r7, #13
 80049de:	461a      	mov	r2, r3
 80049e0:	2114      	movs	r1, #20
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f003 fb2e 	bl	8008044 <VL53L0X_RdByte>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80049ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80049f4:	7b7b      	ldrb	r3, [r7, #13]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e002      	b.n	8004a0c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004a18:	b5b0      	push	{r4, r5, r7, lr}
 8004a1a:	b096      	sub	sp, #88	; 0x58
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004a28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	2114      	movs	r1, #20
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f003 fa59 	bl	8007ee8 <VL53L0X_ReadMulti>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004a3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 80d1 	bne.w	8004be8 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004a52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	4413      	add	r3, r2
 8004a64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004a6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004a8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004aae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004aca:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004acc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004ada:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004ae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aec:	d046      	beq.n	8004b7c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004aee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004af0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004afc:	4a57      	ldr	r2, [pc, #348]	; (8004c5c <VL53L0X_GetRangingMeasurementData+0x244>)
 8004afe:	fb82 1203 	smull	r1, r2, r2, r3
 8004b02:	1192      	asrs	r2, r2, #6
 8004b04:	17db      	asrs	r3, r3, #31
 8004b06:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004b08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7f1b      	ldrb	r3, [r3, #28]
 8004b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02c      	beq.n	8004b7c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004b22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b24:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d10d      	bne.n	8004b50 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8004b34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8004b3c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004b40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b44:	e016      	b.n	8004b74 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8004b46:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004b4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b4e:	e011      	b.n	8004b74 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004b50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b56:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004b5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b5c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004b64:	121b      	asrs	r3, r3, #8
 8004b66:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b6a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004b70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004b74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004b7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004b84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004b90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	019b      	lsls	r3, r3, #6
 8004b98:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	75da      	strb	r2, [r3, #23]
 8004b9e:	e006      	b.n	8004bae <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004ba6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004bae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004bb2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004bb6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f002 ff43 	bl	8007a50 <VL53L0X_get_pal_range_status>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004bd8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004be0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004be8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d12f      	bne.n	8004c50 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f107 040c 	add.w	r4, r7, #12
 8004bf6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004c0a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004c18:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004c1e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004c24:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004c2a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004c30:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004c40:	f107 050c 	add.w	r5, r7, #12
 8004c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3750      	adds	r7, #80	; 0x50
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5c:	10624dd3 	.word	0x10624dd3

08004c60 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff f8ef 	bl	8003e54 <VL53L0X_SetDeviceMode>
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fd16 	bl	80046b4 <VL53L0X_PerformSingleMeasurement>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff febe 	bl	8004a18 <VL53L0X_GetRangingMeasurementData>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f960 	bl	8004f70 <VL53L0X_ClearInterruptMask>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	70fb      	strb	r3, [r7, #3]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70bb      	strb	r3, [r7, #2]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004ce4:	23f6      	movs	r3, #246	; 0xf6
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e105      	b.n	8004ef6 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004cea:	78bb      	ldrb	r3, [r7, #2]
 8004cec:	2b14      	cmp	r3, #20
 8004cee:	d110      	bne.n	8004d12 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004cf0:	7e3b      	ldrb	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	73bb      	strb	r3, [r7, #14]
 8004cfa:	e001      	b.n	8004d00 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	461a      	mov	r2, r3
 8004d04:	2184      	movs	r1, #132	; 0x84
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f003 f91a 	bl	8007f40 <VL53L0X_WrByte>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e0f1      	b.n	8004ef6 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004d12:	78bb      	ldrb	r3, [r7, #2]
 8004d14:	2b15      	cmp	r3, #21
 8004d16:	f040 8097 	bne.w	8004e48 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	21ff      	movs	r1, #255	; 0xff
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f003 f90e 	bl	8007f40 <VL53L0X_WrByte>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2100      	movs	r1, #0
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f003 f904 	bl	8007f40 <VL53L0X_WrByte>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004d42:	2200      	movs	r2, #0
 8004d44:	21ff      	movs	r1, #255	; 0xff
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f003 f8fa 	bl	8007f40 <VL53L0X_WrByte>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004d56:	2201      	movs	r2, #1
 8004d58:	2180      	movs	r1, #128	; 0x80
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f003 f8f0 	bl	8007f40 <VL53L0X_WrByte>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	2185      	movs	r1, #133	; 0x85
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f003 f8e6 	bl	8007f40 <VL53L0X_WrByte>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004d7e:	2204      	movs	r2, #4
 8004d80:	21ff      	movs	r1, #255	; 0xff
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f003 f8dc 	bl	8007f40 <VL53L0X_WrByte>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004d92:	2200      	movs	r2, #0
 8004d94:	21cd      	movs	r1, #205	; 0xcd
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f003 f8d2 	bl	8007f40 <VL53L0X_WrByte>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004da6:	2211      	movs	r2, #17
 8004da8:	21cc      	movs	r1, #204	; 0xcc
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f003 f8c8 	bl	8007f40 <VL53L0X_WrByte>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004dba:	2207      	movs	r2, #7
 8004dbc:	21ff      	movs	r1, #255	; 0xff
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f003 f8be 	bl	8007f40 <VL53L0X_WrByte>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004dce:	2200      	movs	r2, #0
 8004dd0:	21be      	movs	r1, #190	; 0xbe
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f003 f8b4 	bl	8007f40 <VL53L0X_WrByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004de2:	2206      	movs	r2, #6
 8004de4:	21ff      	movs	r1, #255	; 0xff
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f003 f8aa 	bl	8007f40 <VL53L0X_WrByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004df6:	2209      	movs	r2, #9
 8004df8:	21cc      	movs	r1, #204	; 0xcc
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f003 f8a0 	bl	8007f40 <VL53L0X_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461a      	mov	r2, r3
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	21ff      	movs	r1, #255	; 0xff
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f003 f896 	bl	8007f40 <VL53L0X_WrByte>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	21ff      	movs	r1, #255	; 0xff
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f003 f88c 	bl	8007f40 <VL53L0X_WrByte>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f003 f882 	bl	8007f40 <VL53L0X_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	e056      	b.n	8004ef6 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d120      	bne.n	8004e92 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004e50:	787b      	ldrb	r3, [r7, #1]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d81b      	bhi.n	8004e8e <VL53L0X_SetGpioConfig+0x1ce>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <VL53L0X_SetGpioConfig+0x19c>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e71 	.word	0x08004e71
 8004e60:	08004e77 	.word	0x08004e77
 8004e64:	08004e7d 	.word	0x08004e7d
 8004e68:	08004e83 	.word	0x08004e83
 8004e6c:	08004e89 	.word	0x08004e89
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73bb      	strb	r3, [r7, #14]
				break;
 8004e74:	e00d      	b.n	8004e92 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73bb      	strb	r3, [r7, #14]
				break;
 8004e7a:	e00a      	b.n	8004e92 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	73bb      	strb	r3, [r7, #14]
				break;
 8004e80:	e007      	b.n	8004e92 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004e82:	2303      	movs	r3, #3
 8004e84:	73bb      	strb	r3, [r7, #14]
				break;
 8004e86:	e004      	b.n	8004e92 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004e88:	2304      	movs	r3, #4
 8004e8a:	73bb      	strb	r3, [r7, #14]
				break;
 8004e8c:	e001      	b.n	8004e92 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004e8e:	23f5      	movs	r3, #245	; 0xf5
 8004e90:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004e9a:	7bbb      	ldrb	r3, [r7, #14]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	210a      	movs	r1, #10
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f003 f84d 	bl	8007f40 <VL53L0X_WrByte>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004eb2:	7e3b      	ldrb	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73bb      	strb	r3, [r7, #14]
 8004ebc:	e001      	b.n	8004ec2 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	22ef      	movs	r2, #239	; 0xef
 8004ec6:	2184      	movs	r1, #132	; 0x84
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f003 f887 	bl	8007fdc <VL53L0X_UpdateByte>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	787a      	ldrb	r2, [r7, #1]
 8004ede:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004eea:	2100      	movs	r1, #0
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f83f 	bl	8004f70 <VL53L0X_ClearInterruptMask>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop

08004f04 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	460b      	mov	r3, r1
 8004f12:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	210e      	movs	r1, #14
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f003 f8b9 	bl	8008098 <VL53L0X_RdWord>
 8004f26:	4603      	mov	r3, r0
 8004f28:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004f2a:	8abb      	ldrh	r3, [r7, #20]
 8004f2c:	045b      	lsls	r3, r3, #17
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <VL53L0X_GetInterruptThresholds+0x68>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10f      	bne.n	8004f60 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	461a      	mov	r2, r3
 8004f46:	210c      	movs	r1, #12
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f003 f8a5 	bl	8008098 <VL53L0X_RdWord>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004f52:	8abb      	ldrh	r3, [r7, #20]
 8004f54:	045b      	lsls	r3, r3, #17
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <VL53L0X_GetInterruptThresholds+0x68>)
 8004f5a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	1ffe0000 	.word	0x1ffe0000

08004f70 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004f82:	2201      	movs	r2, #1
 8004f84:	210b      	movs	r1, #11
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 ffda 	bl	8007f40 <VL53L0X_WrByte>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004f90:	2200      	movs	r2, #0
 8004f92:	210b      	movs	r1, #11
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f002 ffd3 	bl	8007f40 <VL53L0X_WrByte>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004fa4:	f107 030d 	add.w	r3, r7, #13
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2113      	movs	r1, #19
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f003 f849 	bl	8008044 <VL53L0X_RdByte>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004fc2:	7b7b      	ldrb	r3, [r7, #13]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d006      	beq.n	8004fda <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d803      	bhi.n	8004fda <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0d3      	beq.n	8004f82 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004fda:	7bbb      	ldrb	r3, [r7, #14]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004fe0:	23f4      	movs	r3, #244	; 0xf4
 8004fe2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004ffe:	f107 030e 	add.w	r3, r7, #14
 8005002:	461a      	mov	r2, r3
 8005004:	2113      	movs	r1, #19
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f003 f81c 	bl	8008044 <VL53L0X_RdByte>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	f003 0318 	and.w	r3, r3, #24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005024:	23fa      	movs	r3, #250	; 0xfa
 8005026:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fa02 	bl	8005452 <VL53L0X_perform_ref_spad_management>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800506c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005070:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005076:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	461a      	mov	r2, r3
 800507e:	2128      	movs	r1, #40	; 0x28
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f003 f809 	bl	8008098 <VL53L0X_RdWord>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800508a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d11e      	bne.n	80050d0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005092:	893b      	ldrh	r3, [r7, #8]
 8005094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005098:	b29b      	uxth	r3, r3
 800509a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800509c:	893b      	ldrh	r3, [r7, #8]
 800509e:	461a      	mov	r2, r3
 80050a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	dd0b      	ble.n	80050c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80050a8:	893a      	ldrh	r2, [r7, #8]
 80050aa:	897b      	ldrh	r3, [r7, #10]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	461a      	mov	r2, r3
					* 250;
 80050b4:	23fa      	movs	r3, #250	; 0xfa
 80050b6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e007      	b.n	80050d0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	23fa      	movs	r3, #250	; 0xfa
 80050c8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80050d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80050dc:	b480      	push	{r7}
 80050de:	b08b      	sub	sp, #44	; 0x2c
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80050ea:	2308      	movs	r3, #8
 80050ec:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	fbb3 f2f2 	udiv	r2, r3, r2
 800510c:	69b9      	ldr	r1, [r7, #24]
 800510e:	fb01 f202 	mul.w	r2, r1, r2
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	e030      	b.n	800517e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	4413      	add	r3, r2
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	429a      	cmp	r2, r3
 8005130:	d11e      	bne.n	8005170 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005132:	7ffa      	ldrb	r2, [r7, #31]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	fa42 f303 	asr.w	r3, r2, r3
 800513a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005140:	e016      	b.n	8005170 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <get_next_good_spad+0x88>
				success = 1;
 800514c:	2301      	movs	r3, #1
 800514e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	fb03 f202 	mul.w	r2, r3, r2
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	461a      	mov	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	601a      	str	r2, [r3, #0]
				break;
 8005162:	e009      	b.n	8005178 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005164:	7ffb      	ldrb	r3, [r7, #31]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	3301      	adds	r3, #1
 800516e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d3e4      	bcc.n	8005142 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	d202      	bcs.n	800518c <get_next_good_spad+0xb0>
 8005186:	7fbb      	ldrb	r3, [r7, #30]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0c7      	beq.n	800511c <get_next_good_spad+0x40>
		}
	}
}
 800518c:	bf00      	nop
 800518e:	372c      	adds	r7, #44	; 0x2c
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
	...

08005198 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <is_aperture+0x30>)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <is_aperture+0x22>
		isAperture = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	200002b8 	.word	0x200002b8

080051cc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80051d8:	2300      	movs	r3, #0
 80051da:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80051dc:	2308      	movs	r3, #8
 80051de:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80051f2:	69b9      	ldr	r1, [r7, #24]
 80051f4:	fb01 f202 	mul.w	r2, r1, r2
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005204:	23ce      	movs	r3, #206	; 0xce
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e010      	b.n	800522c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b25a      	sxtb	r2, r3
 8005214:	2101      	movs	r1, #1
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	b25b      	sxtb	r3, r3
 800521e:	4313      	orrs	r3, r2
 8005220:	b259      	sxtb	r1, r3
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	b2ca      	uxtb	r2, r1
 800522a:	701a      	strb	r2, [r3, #0]

	return status;
 800522c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3724      	adds	r7, #36	; 0x24
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005244:	2306      	movs	r3, #6
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	21b0      	movs	r1, #176	; 0xb0
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f002 fe1c 	bl	8007e88 <VL53L0X_WriteMulti>
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800526a:	2306      	movs	r3, #6
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	21b0      	movs	r1, #176	; 0xb0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f002 fe39 	bl	8007ee8 <VL53L0X_ReadMulti>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800527a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b08c      	sub	sp, #48	; 0x30
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	460b      	mov	r3, r1
 8005294:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005296:	2300      	movs	r3, #0
 8005298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529e:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80052a4:	2300      	movs	r3, #0
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a8:	e02b      	b.n	8005302 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80052aa:	f107 031c 	add.w	r3, r7, #28
 80052ae:	6a3a      	ldr	r2, [r7, #32]
 80052b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff ff12 	bl	80050dc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d103      	bne.n	80052c8 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80052c0:	23ce      	movs	r3, #206	; 0xce
 80052c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80052c6:	e020      	b.n	800530a <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	4413      	add	r3, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff ff61 	bl	8005198 <is_aperture>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	7afb      	ldrb	r3, [r7, #11]
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80052e0:	23ce      	movs	r3, #206	; 0xce
 80052e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80052e6:	e010      	b.n	800530a <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052f0:	6838      	ldr	r0, [r7, #0]
 80052f2:	f7ff ff6b 	bl	80051cc <enable_spad_bit>
		currentSpad++;
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	3301      	adds	r3, #1
 80052fa:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	3301      	adds	r3, #1
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
 8005302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005306:	429a      	cmp	r2, r3
 8005308:	d3cf      	bcc.n	80052aa <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800530a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530c:	6a3a      	ldr	r2, [r7, #32]
 800530e:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005310:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff8d 	bl	800523a <set_ref_spad_map>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005326:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800532a:	2b00      	cmp	r3, #0
 800532c:	d121      	bne.n	8005372 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800532e:	f107 0314 	add.w	r3, r7, #20
 8005332:	4619      	mov	r1, r3
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff ff93 	bl	8005260 <get_ref_spad_map>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005344:	e011      	b.n	800536a <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	4413      	add	r3, r2
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	f107 0114 	add.w	r1, r7, #20
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	440b      	add	r3, r1
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d003      	beq.n	8005364 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800535c:	23ce      	movs	r3, #206	; 0xce
 800535e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005362:	e006      	b.n	8005372 <enable_ref_spads+0xec>
			}
			i++;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	3301      	adds	r3, #1
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800536a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	429a      	cmp	r2, r3
 8005370:	d3e9      	bcc.n	8005346 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005372:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005376:	4618      	mov	r0, r3
 8005378:	3730      	adds	r7, #48	; 0x30
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08a      	sub	sp, #40	; 0x28
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800539a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800539e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80053a6:	22c0      	movs	r2, #192	; 0xc0
 80053a8:	2101      	movs	r1, #1
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f002 fdc8 	bl	8007f40 <VL53L0X_WrByte>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80053b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff fc4b 	bl	8004c60 <VL53L0X_PerformSingleRangingMeasurement>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80053d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80053d8:	2201      	movs	r2, #1
 80053da:	21ff      	movs	r1, #255	; 0xff
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f002 fdaf 	bl	8007f40 <VL53L0X_WrByte>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80053e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d107      	bne.n	8005400 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	21b6      	movs	r1, #182	; 0xb6
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f002 fe4f 	bl	8008098 <VL53L0X_RdWord>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005400:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005404:	2b00      	cmp	r3, #0
 8005406:	d107      	bne.n	8005418 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005408:	2200      	movs	r2, #0
 800540a:	21ff      	movs	r1, #255	; 0xff
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f002 fd97 	bl	8007f40 <VL53L0X_WrByte>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800541c:	2b00      	cmp	r3, #0
 800541e:	d112      	bne.n	8005446 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005424:	461a      	mov	r2, r3
 8005426:	2101      	movs	r1, #1
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f002 fd89 	bl	8007f40 <VL53L0X_WrByte>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005442:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8005446:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800544a:	4618      	mov	r0, r3
 800544c:	3728      	adds	r7, #40	; 0x28
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005452:	b590      	push	{r4, r7, lr}
 8005454:	b09d      	sub	sp, #116	; 0x74
 8005456:	af06      	add	r7, sp, #24
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005464:	23b4      	movs	r3, #180	; 0xb4
 8005466:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800546a:	2303      	movs	r3, #3
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800546e:	232c      	movs	r3, #44	; 0x2c
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800547e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005482:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800548c:	2306      	movs	r3, #6
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80054b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80054b8:	2300      	movs	r3, #0
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80054bc:	e009      	b.n	80054d2 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80054cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ce:	3301      	adds	r3, #1
 80054d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3f1      	bcc.n	80054be <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80054da:	2201      	movs	r2, #1
 80054dc:	21ff      	movs	r1, #255	; 0xff
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f002 fd2e 	bl	8007f40 <VL53L0X_WrByte>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80054ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80054f2:	2200      	movs	r2, #0
 80054f4:	214f      	movs	r1, #79	; 0x4f
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f002 fd22 	bl	8007f40 <VL53L0X_WrByte>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005502:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800550a:	222c      	movs	r2, #44	; 0x2c
 800550c:	214e      	movs	r1, #78	; 0x4e
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f002 fd16 	bl	8007f40 <VL53L0X_WrByte>
 8005514:	4603      	mov	r3, r0
 8005516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800551a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005522:	2200      	movs	r2, #0
 8005524:	21ff      	movs	r1, #255	; 0xff
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f002 fd0a 	bl	8007f40 <VL53L0X_WrByte>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005532:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800553a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800553e:	461a      	mov	r2, r3
 8005540:	21b6      	movs	r1, #182	; 0xb6
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f002 fcfc 	bl	8007f40 <VL53L0X_WrByte>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800554e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8005556:	2200      	movs	r2, #0
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f002 fcf0 	bl	8007f40 <VL53L0X_WrByte>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8005566:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800556e:	f107 0210 	add.w	r2, r7, #16
 8005572:	f107 0111 	add.w	r1, r7, #17
 8005576:	2300      	movs	r3, #0
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fbbb 	bl	8005cf4 <VL53L0X_perform_ref_calibration>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005588:	2b00      	cmp	r3, #0
 800558a:	d121      	bne.n	80055d0 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8005590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005592:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80055a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80055ac:	f107 0218 	add.w	r2, r7, #24
 80055b0:	9204      	str	r2, [sp, #16]
 80055b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b4:	9203      	str	r2, [sp, #12]
 80055b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055b8:	9202      	str	r2, [sp, #8]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4623      	mov	r3, r4
 80055c2:	4602      	mov	r2, r0
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fe5e 	bl	8005286 <enable_ref_spads>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d174      	bne.n	80056c2 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80055dc:	f107 0312 	add.w	r3, r7, #18
 80055e0:	4619      	mov	r1, r3
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fecb 	bl	800537e <perform_ref_signal_measurement>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80055ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d161      	bne.n	80056ba <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80055f6:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80055f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d25d      	bcs.n	80056ba <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80055fe:	2300      	movs	r3, #0
 8005600:	64bb      	str	r3, [r7, #72]	; 0x48
 8005602:	e009      	b.n	8005618 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005608:	4413      	add	r3, r2
 800560a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005614:	3301      	adds	r3, #1
 8005616:	64bb      	str	r3, [r7, #72]	; 0x48
 8005618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	429a      	cmp	r2, r3
 800561e:	d3f1      	bcc.n	8005604 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005620:	e002      	b.n	8005628 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005624:	3301      	adds	r3, #1
 8005626:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005628:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800562c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562e:	4413      	add	r3, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fdb1 	bl	8005198 <is_aperture>
 8005636:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <VL53L0X_perform_ref_spad_management+0x1f2>
 800563c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	429a      	cmp	r2, r3
 8005642:	d3ee      	bcc.n	8005622 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005644:	2301      	movs	r3, #1
 8005646:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8005648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8005658:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800565c:	f107 0218 	add.w	r2, r7, #24
 8005660:	9204      	str	r2, [sp, #16]
 8005662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005664:	9203      	str	r2, [sp, #12]
 8005666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005668:	9202      	str	r2, [sp, #8]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4623      	mov	r3, r4
 8005672:	4602      	mov	r2, r0
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff fe06 	bl	8005286 <enable_ref_spads>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005680:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11b      	bne.n	80056c0 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800568c:	f107 0312 	add.w	r3, r7, #18
 8005690:	4619      	mov	r1, r3
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fe73 	bl	800537e <perform_ref_signal_measurement>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800569e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10c      	bne.n	80056c0 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80056a6:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80056a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d208      	bcs.n	80056c0 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80056b8:	e002      	b.n	80056c0 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056be:	e000      	b.n	80056c2 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80056c0:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80056c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f040 80af 	bne.w	800582a <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80056cc:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80056ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056d0:	429a      	cmp	r2, r3
 80056d2:	f240 80aa 	bls.w	800582a <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80056e6:	f107 031c 	add.w	r3, r7, #28
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 f903 	bl	80088f8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80056f2:	8a7b      	ldrh	r3, [r7, #18]
 80056f4:	461a      	mov	r2, r3
 80056f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfb8      	it	lt
 80056fe:	425b      	neglt	r3, r3
 8005700:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005708:	e086      	b.n	8005818 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005710:	f107 0314 	add.w	r3, r7, #20
 8005714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005718:	f7ff fce0 	bl	80050dc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d103      	bne.n	800572c <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005724:	23ce      	movs	r3, #206	; 0xce
 8005726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800572a:	e07e      	b.n	800582a <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800572c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fd2f 	bl	8005198 <is_aperture>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800574a:	e06e      	b.n	800582a <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	3301      	adds	r3, #1
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800575c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800575e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fd33 	bl	80051cc <enable_spad_bit>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800576c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10c      	bne.n	800578e <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	3301      	adds	r3, #1
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fd59 	bl	800523a <set_ref_spad_map>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800578e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005792:	2b00      	cmp	r3, #0
 8005794:	d146      	bne.n	8005824 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005796:	f107 0312 	add.w	r3, r7, #18
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fdee 	bl	800537e <perform_ref_signal_measurement>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80057a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d13b      	bne.n	8005828 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80057b0:	8a7b      	ldrh	r3, [r7, #18]
 80057b2:	461a      	mov	r2, r3
 80057b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bfb8      	it	lt
 80057bc:	425b      	neglt	r3, r3
 80057be:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80057c0:	8a7b      	ldrh	r3, [r7, #18]
 80057c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d21c      	bcs.n	8005802 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d914      	bls.n	80057fa <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80057d0:	f107 031c 	add.w	r3, r7, #28
 80057d4:	4619      	mov	r1, r3
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff fd2f 	bl	800523a <set_ref_spad_map>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80057e8:	f107 011c 	add.w	r1, r7, #28
 80057ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ee:	4618      	mov	r0, r3
 80057f0:	f003 f882 	bl	80088f8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	3b01      	subs	r3, #1
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005800:	e00a      	b.n	8005818 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800580c:	f107 031c 	add.w	r3, r7, #28
 8005810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005812:	4618      	mov	r0, r3
 8005814:	f003 f870 	bl	80088f8 <memcpy>
		while (!complete) {
 8005818:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800581c:	2b00      	cmp	r3, #0
 800581e:	f43f af74 	beq.w	800570a <VL53L0X_perform_ref_spad_management+0x2b8>
 8005822:	e002      	b.n	800582a <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005828:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800582a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800582e:	2b00      	cmp	r3, #0
 8005830:	d115      	bne.n	800585e <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005836:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800583e:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800585e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005862:	4618      	mov	r0, r3
 8005864:	375c      	adds	r7, #92	; 0x5c
 8005866:	46bd      	mov	sp, r7
 8005868:	bd90      	pop	{r4, r7, pc}

0800586a <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800586a:	b590      	push	{r4, r7, lr}
 800586c:	b093      	sub	sp, #76	; 0x4c
 800586e:	af06      	add	r7, sp, #24
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	4613      	mov	r3, r2
 8005876:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005882:	23b4      	movs	r3, #180	; 0xb4
 8005884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005888:	2306      	movs	r3, #6
 800588a:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800588c:	232c      	movs	r3, #44	; 0x2c
 800588e:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005890:	2201      	movs	r2, #1
 8005892:	21ff      	movs	r1, #255	; 0xff
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f002 fb53 	bl	8007f40 <VL53L0X_WrByte>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80058a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80058a8:	2200      	movs	r2, #0
 80058aa:	214f      	movs	r1, #79	; 0x4f
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f002 fb47 	bl	8007f40 <VL53L0X_WrByte>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80058b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80058c0:	222c      	movs	r2, #44	; 0x2c
 80058c2:	214e      	movs	r1, #78	; 0x4e
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f002 fb3b 	bl	8007f40 <VL53L0X_WrByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80058d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058d8:	2200      	movs	r2, #0
 80058da:	21ff      	movs	r1, #255	; 0xff
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f002 fb2f 	bl	8007f40 <VL53L0X_WrByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80058e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80058f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f4:	461a      	mov	r2, r3
 80058f6:	21b6      	movs	r1, #182	; 0xb6
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f002 fb21 	bl	8007f40 <VL53L0X_WrByte>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005904:	2300      	movs	r3, #0
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
 8005908:	e009      	b.n	800591e <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	4413      	add	r3, r2
 8005910:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	429a      	cmp	r2, r3
 8005924:	d3f1      	bcc.n	800590a <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d011      	beq.n	8005950 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800592c:	e002      	b.n	8005934 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	3301      	adds	r3, #1
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005934:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	4413      	add	r3, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff fc2b 	bl	8005198 <is_aperture>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <VL53L0X_set_reference_spads+0xe6>
 8005948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	429a      	cmp	r2, r3
 800594e:	d3ee      	bcc.n	800592e <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800595c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005960:	79f9      	ldrb	r1, [r7, #7]
 8005962:	f107 0214 	add.w	r2, r7, #20
 8005966:	9204      	str	r2, [sp, #16]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	9203      	str	r2, [sp, #12]
 800596c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800596e:	9202      	str	r2, [sp, #8]
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4623      	mov	r3, r4
 8005978:	4602      	mov	r2, r0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fc83 	bl	8005286 <enable_ref_spads>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005986:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	79fa      	ldrb	r2, [r7, #7]
 80059a4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80059a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3734      	adds	r7, #52	; 0x34
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd90      	pop	{r4, r7, pc}

080059b4 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80059c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	2100      	movs	r1, #0
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f002 fab1 	bl	8007f40 <VL53L0X_WrByte>
 80059de:	4603      	mov	r3, r0
 80059e0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80059e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9bf 	bl	8005d6e <VL53L0X_measurement_poll_for_completion>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80059f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fab6 	bl	8004f70 <VL53L0X_ClearInterruptMask>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005a10:	2200      	movs	r2, #0
 8005a12:	2100      	movs	r1, #0
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f002 fa93 	bl	8007f40 <VL53L0X_WrByte>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	4608      	mov	r0, r1
 8005a34:	4611      	mov	r1, r2
 8005a36:	461a      	mov	r2, r3
 8005a38:	4603      	mov	r3, r0
 8005a3a:	70fb      	strb	r3, [r7, #3]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70bb      	strb	r3, [r7, #2]
 8005a40:	4613      	mov	r3, r2
 8005a42:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	21ff      	movs	r1, #255	; 0xff
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f002 fa75 	bl	8007f40 <VL53L0X_WrByte>
 8005a56:	4603      	mov	r3, r0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fa6b 	bl	8007f40 <VL53L0X_WrByte>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a74:	2200      	movs	r2, #0
 8005a76:	21ff      	movs	r1, #255	; 0xff
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f002 fa61 	bl	8007f40 <VL53L0X_WrByte>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	461a      	mov	r2, r3
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01e      	beq.n	8005acc <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	21cb      	movs	r1, #203	; 0xcb
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f002 fad2 	bl	8008044 <VL53L0X_RdByte>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02a      	beq.n	8005b08 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005ab2:	f107 030e 	add.w	r3, r7, #14
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	21ee      	movs	r1, #238	; 0xee
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 fac2 	bl	8008044 <VL53L0X_RdByte>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	73fb      	strb	r3, [r7, #15]
 8005aca:	e01d      	b.n	8005b08 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005ad4:	78bb      	ldrb	r3, [r7, #2]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	21cb      	movs	r1, #203	; 0xcb
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f002 fa30 	bl	8007f40 <VL53L0X_WrByte>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005aea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005af2:	787b      	ldrb	r3, [r7, #1]
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	21ee      	movs	r1, #238	; 0xee
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f002 fa6f 	bl	8007fdc <VL53L0X_UpdateByte>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b08:	2201      	movs	r2, #1
 8005b0a:	21ff      	movs	r1, #255	; 0xff
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fa17 	bl	8007f40 <VL53L0X_WrByte>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2100      	movs	r1, #0
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f002 fa0d 	bl	8007f40 <VL53L0X_WrByte>
 8005b26:	4603      	mov	r3, r0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b30:	2200      	movs	r2, #0
 8005b32:	21ff      	movs	r1, #255	; 0xff
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f002 fa03 	bl	8007f40 <VL53L0X_WrByte>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	f023 0310 	bic.w	r3, r3, #16
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	701a      	strb	r2, [r3, #0]

	return Status;
 8005b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af04      	add	r7, sp, #16
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	71fb      	strb	r3, [r7, #7]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005b86:	79bb      	ldrb	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005b92:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005b94:	2201      	movs	r2, #1
 8005b96:	2101      	movs	r1, #1
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f002 f9d1 	bl	8007f40 <VL53L0X_WrByte>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d105      	bne.n	8005bb6 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005baa:	2140      	movs	r1, #64	; 0x40
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff ff01 	bl	80059b4 <VL53L0X_perform_single_ref_calibration>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d115      	bne.n	8005bea <VL53L0X_perform_vhv_calibration+0x8e>
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d112      	bne.n	8005bea <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005bc4:	7d39      	ldrb	r1, [r7, #20]
 8005bc6:	7d7a      	ldrb	r2, [r7, #21]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	f107 0313 	add.w	r3, r7, #19
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	2101      	movs	r1, #1
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff ff23 	bl	8005a2a <VL53L0X_ref_calibration_io>
 8005be4:	4603      	mov	r3, r0
 8005be6:	75fb      	strb	r3, [r7, #23]
 8005be8:	e002      	b.n	8005bf0 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d112      	bne.n	8005c1e <VL53L0X_perform_vhv_calibration+0xc2>
 8005bf8:	79bb      	ldrb	r3, [r7, #6]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bfe:	7dbb      	ldrb	r3, [r7, #22]
 8005c00:	461a      	mov	r2, r3
 8005c02:	2101      	movs	r1, #1
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f002 f99b 	bl	8007f40 <VL53L0X_WrByte>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	7dba      	ldrb	r2, [r7, #22]
 8005c1a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08a      	sub	sp, #40	; 0x28
 8005c2e:	af04      	add	r7, sp, #16
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	4611      	mov	r1, r2
 8005c36:	461a      	mov	r2, r3
 8005c38:	460b      	mov	r3, r1
 8005c3a:	71fb      	strb	r3, [r7, #7]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005c50:	79bb      	ldrb	r3, [r7, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005c5c:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005c5e:	2202      	movs	r2, #2
 8005c60:	2101      	movs	r1, #1
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f002 f96c 	bl	8007f40 <VL53L0X_WrByte>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005c74:	2100      	movs	r1, #0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fe9c 	bl	80059b4 <VL53L0X_perform_single_ref_calibration>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d115      	bne.n	8005cb4 <VL53L0X_perform_phase_calibration+0x8a>
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d112      	bne.n	8005cb4 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005c8e:	7d39      	ldrb	r1, [r7, #20]
 8005c90:	7d7a      	ldrb	r2, [r7, #21]
 8005c92:	2301      	movs	r3, #1
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	f107 0313 	add.w	r3, r7, #19
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff febe 	bl	8005a2a <VL53L0X_ref_calibration_io>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75fb      	strb	r3, [r7, #23]
 8005cb2:	e002      	b.n	8005cba <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d112      	bne.n	8005ce8 <VL53L0X_perform_phase_calibration+0xbe>
 8005cc2:	79bb      	ldrb	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00f      	beq.n	8005ce8 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005cc8:	7dbb      	ldrb	r3, [r7, #22]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2101      	movs	r1, #1
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f002 f936 	bl	8007f40 <VL53L0X_WrByte>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	7dba      	ldrb	r2, [r7, #22]
 8005ce4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005d10:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	2300      	movs	r3, #0
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ff1f 	bl	8005b5c <VL53L0X_perform_vhv_calibration>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff ff7a 	bl	8005c2a <VL53L0X_perform_phase_calibration>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d42:	7dbb      	ldrb	r3, [r7, #22]
 8005d44:	461a      	mov	r2, r3
 8005d46:	2101      	movs	r1, #1
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f002 f8f9 	bl	8007f40 <VL53L0X_WrByte>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	7dba      	ldrb	r2, [r7, #22]
 8005d5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005d82:	f107 030f 	add.w	r3, r7, #15
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fe fe05 	bl	8004998 <VL53L0X_GetMeasurementDataReady>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d110      	bne.n	8005dbc <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d00f      	beq.n	8005dc0 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	3301      	adds	r3, #1
 8005da4:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005dac:	d302      	bcc.n	8005db4 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005dae:	23f9      	movs	r3, #249	; 0xf9
 8005db0:	75fb      	strb	r3, [r7, #23]
			break;
 8005db2:	e006      	b.n	8005dc2 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 f9e3 	bl	8008180 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005dba:	e7e2      	b.n	8005d82 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005dc0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	3301      	adds	r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e02:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005e04:	e002      	b.n	8005e0c <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	089b      	lsrs	r3, r3, #2
 8005e0a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d8f8      	bhi.n	8005e06 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005e14:	e017      	b.n	8005e46 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d30b      	bcc.n	8005e3a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4413      	add	r3, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e002      	b.n	8005e40 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e4      	bne.n	8005e16 <VL53L0X_isqrt+0x24>
	}

	return res;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2183      	movs	r1, #131	; 0x83
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f002 f869 	bl	8007f40 <VL53L0X_WrByte>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11e      	bne.n	8005ebe <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005e84:	f107 030f 	add.w	r3, r7, #15
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2183      	movs	r1, #131	; 0x83
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f002 f8d9 	bl	8008044 <VL53L0X_RdByte>
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <VL53L0X_device_read_strobe+0x5a>
 8005e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005eb0:	d3e8      	bcc.n	8005e84 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005eb8:	d301      	bcc.n	8005ebe <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005eba:	23f9      	movs	r3, #249	; 0xf9
 8005ebc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2183      	movs	r1, #131	; 0x83
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f002 f83c 	bl	8007f40 <VL53L0X_WrByte>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b098      	sub	sp, #96	; 0x60
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005f0e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005f26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005f2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f2e:	2b07      	cmp	r3, #7
 8005f30:	f000 8408 	beq.w	8006744 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005f34:	2201      	movs	r2, #1
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 f801 	bl	8007f40 <VL53L0X_WrByte>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	21ff      	movs	r1, #255	; 0xff
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fff5 	bl	8007f40 <VL53L0X_WrByte>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005f64:	2200      	movs	r2, #0
 8005f66:	2100      	movs	r1, #0
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 ffe9 	bl	8007f40 <VL53L0X_WrByte>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	461a      	mov	r2, r3
 8005f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005f7c:	2206      	movs	r2, #6
 8005f7e:	21ff      	movs	r1, #255	; 0xff
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ffdd 	bl	8007f40 <VL53L0X_WrByte>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005f94:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2183      	movs	r1, #131	; 0x83
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f002 f851 	bl	8008044 <VL53L0X_RdByte>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fb4:	f043 0304 	orr.w	r3, r3, #4
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	2183      	movs	r1, #131	; 0x83
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 ffbe 	bl	8007f40 <VL53L0X_WrByte>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005fd2:	2207      	movs	r2, #7
 8005fd4:	21ff      	movs	r1, #255	; 0xff
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 ffb2 	bl	8007f40 <VL53L0X_WrByte>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005fea:	2201      	movs	r2, #1
 8005fec:	2181      	movs	r1, #129	; 0x81
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 ffa6 	bl	8007f40 <VL53L0X_WrByte>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 f8bc 	bl	8008180 <VL53L0X_PollingDelay>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006010:	4313      	orrs	r3, r2
 8006012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006016:	2201      	movs	r2, #1
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 ff90 	bl	8007f40 <VL53L0X_WrByte>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006028:	4313      	orrs	r3, r2
 800602a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8098 	beq.w	800616a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800603a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800603e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 8091 	bne.w	800616a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006048:	226b      	movs	r2, #107	; 0x6b
 800604a:	2194      	movs	r1, #148	; 0x94
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 ff77 	bl	8007f40 <VL53L0X_WrByte>
 8006052:	4603      	mov	r3, r0
 8006054:	461a      	mov	r2, r3
 8006056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800605a:	4313      	orrs	r3, r2
 800605c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fef9 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800606e:	4313      	orrs	r3, r2
 8006070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006078:	461a      	mov	r2, r3
 800607a:	2190      	movs	r1, #144	; 0x90
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f002 f843 	bl	8008108 <VL53L0X_RdDWord>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800608a:	4313      	orrs	r3, r2
 800608c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	0bdb      	lsrs	r3, r3, #15
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80060ac:	2224      	movs	r2, #36	; 0x24
 80060ae:	2194      	movs	r1, #148	; 0x94
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 ff45 	bl	8007f40 <VL53L0X_WrByte>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060be:	4313      	orrs	r3, r2
 80060c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fec7 	bl	8005e58 <VL53L0X_device_read_strobe>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060dc:	461a      	mov	r2, r3
 80060de:	2190      	movs	r1, #144	; 0x90
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 f811 	bl	8008108 <VL53L0X_RdDWord>
 80060e6:	4603      	mov	r3, r0
 80060e8:	461a      	mov	r2, r3
 80060ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	0e1b      	lsrs	r3, r3, #24
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	b2db      	uxtb	r3, r3
 8006102:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	0a1b      	lsrs	r3, r3, #8
 8006108:	b2db      	uxtb	r3, r3
 800610a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	b2db      	uxtb	r3, r3
 8006110:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006112:	2225      	movs	r2, #37	; 0x25
 8006114:	2194      	movs	r1, #148	; 0x94
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 ff12 	bl	8007f40 <VL53L0X_WrByte>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006124:	4313      	orrs	r3, r2
 8006126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff fe94 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006138:	4313      	orrs	r3, r2
 800613a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800613e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006142:	461a      	mov	r2, r3
 8006144:	2190      	movs	r1, #144	; 0x90
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 ffde 	bl	8008108 <VL53L0X_RdDWord>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006154:	4313      	orrs	r3, r2
 8006156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	0e1b      	lsrs	r3, r3, #24
 800615e:	b2db      	uxtb	r3, r3
 8006160:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	b2db      	uxtb	r3, r3
 8006168:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8189 	beq.w	8006488 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800617a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 8182 	bne.w	8006488 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006184:	2202      	movs	r2, #2
 8006186:	2194      	movs	r1, #148	; 0x94
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fed9 	bl	8007f40 <VL53L0X_WrByte>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006196:	4313      	orrs	r3, r2
 8006198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fe5b 	bl	8005e58 <VL53L0X_device_read_strobe>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461a      	mov	r2, r3
 80061a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80061b0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80061b4:	461a      	mov	r2, r3
 80061b6:	2190      	movs	r1, #144	; 0x90
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 ff43 	bl	8008044 <VL53L0X_RdByte>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80061cc:	227b      	movs	r2, #123	; 0x7b
 80061ce:	2194      	movs	r1, #148	; 0x94
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 feb5 	bl	8007f40 <VL53L0X_WrByte>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061de:	4313      	orrs	r3, r2
 80061e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fe37 	bl	8005e58 <VL53L0X_device_read_strobe>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80061f8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80061fc:	461a      	mov	r2, r3
 80061fe:	2190      	movs	r1, #144	; 0x90
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 ff1f 	bl	8008044 <VL53L0X_RdByte>
 8006206:	4603      	mov	r3, r0
 8006208:	461a      	mov	r2, r3
 800620a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800620e:	4313      	orrs	r3, r2
 8006210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006214:	2277      	movs	r2, #119	; 0x77
 8006216:	2194      	movs	r1, #148	; 0x94
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fe91 	bl	8007f40 <VL53L0X_WrByte>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006226:	4313      	orrs	r3, r2
 8006228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fe13 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006232:	4603      	mov	r3, r0
 8006234:	461a      	mov	r2, r3
 8006236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800623a:	4313      	orrs	r3, r2
 800623c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006244:	461a      	mov	r2, r3
 8006246:	2190      	movs	r1, #144	; 0x90
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 ff5d 	bl	8008108 <VL53L0X_RdDWord>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006256:	4313      	orrs	r3, r2
 8006258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	0e5b      	lsrs	r3, r3, #25
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006266:	b2db      	uxtb	r3, r3
 8006268:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	0c9b      	lsrs	r3, r3, #18
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006274:	b2db      	uxtb	r3, r3
 8006276:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	0adb      	lsrs	r3, r3, #11
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006282:	b2db      	uxtb	r3, r3
 8006284:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006290:	b2db      	uxtb	r3, r3
 8006292:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	b2db      	uxtb	r3, r3
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80062a6:	2278      	movs	r2, #120	; 0x78
 80062a8:	2194      	movs	r1, #148	; 0x94
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fe48 	bl	8007f40 <VL53L0X_WrByte>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fdca 	bl	8005e58 <VL53L0X_device_read_strobe>
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80062d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062d6:	461a      	mov	r2, r3
 80062d8:	2190      	movs	r1, #144	; 0x90
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 ff14 	bl	8008108 <VL53L0X_RdDWord>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	0f5b      	lsrs	r3, r3, #29
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80062fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062fe:	4413      	add	r3, r2
 8006300:	b2db      	uxtb	r3, r3
 8006302:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	0d9b      	lsrs	r3, r3, #22
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630e:	b2db      	uxtb	r3, r3
 8006310:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	0bdb      	lsrs	r3, r3, #15
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631c:	b2db      	uxtb	r3, r3
 800631e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	0a1b      	lsrs	r3, r3, #8
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632a:	b2db      	uxtb	r3, r3
 800632c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	085b      	lsrs	r3, r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006338:	b2db      	uxtb	r3, r3
 800633a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	b2db      	uxtb	r3, r3
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800634e:	2279      	movs	r2, #121	; 0x79
 8006350:	2194      	movs	r1, #148	; 0x94
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fdf4 	bl	8007f40 <VL53L0X_WrByte>
 8006358:	4603      	mov	r3, r0
 800635a:	461a      	mov	r2, r3
 800635c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006360:	4313      	orrs	r3, r2
 8006362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fd76 	bl	8005e58 <VL53L0X_device_read_strobe>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006374:	4313      	orrs	r3, r2
 8006376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800637a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800637e:	461a      	mov	r2, r3
 8006380:	2190      	movs	r1, #144	; 0x90
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fec0 	bl	8008108 <VL53L0X_RdDWord>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006390:	4313      	orrs	r3, r2
 8006392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	0e9b      	lsrs	r3, r3, #26
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80063a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063a6:	4413      	add	r3, r2
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	0cdb      	lsrs	r3, r3, #19
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	0b1b      	lsrs	r3, r3, #12
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80063e8:	227a      	movs	r2, #122	; 0x7a
 80063ea:	2194      	movs	r1, #148	; 0x94
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fda7 	bl	8007f40 <VL53L0X_WrByte>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff fd29 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800640e:	4313      	orrs	r3, r2
 8006410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006418:	461a      	mov	r2, r3
 800641a:	2190      	movs	r1, #144	; 0x90
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fe73 	bl	8008108 <VL53L0X_RdDWord>
 8006422:	4603      	mov	r3, r0
 8006424:	461a      	mov	r2, r3
 8006426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642a:	4313      	orrs	r3, r2
 800642c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	0f9b      	lsrs	r3, r3, #30
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800643c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006440:	4413      	add	r3, r2
 8006442:	b2db      	uxtb	r3, r3
 8006444:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	0ddb      	lsrs	r3, r3, #23
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	b2db      	uxtb	r3, r3
 8006452:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645e:	b2db      	uxtb	r3, r3
 8006460:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	0a5b      	lsrs	r3, r3, #9
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	089b      	lsrs	r3, r3, #2
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80f1 	beq.w	8006676 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006498:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 80ea 	bne.w	8006676 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80064a2:	227b      	movs	r2, #123	; 0x7b
 80064a4:	2194      	movs	r1, #148	; 0x94
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fd4a 	bl	8007f40 <VL53L0X_WrByte>
 80064ac:	4603      	mov	r3, r0
 80064ae:	461a      	mov	r2, r3
 80064b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fccc 	bl	8005e58 <VL53L0X_device_read_strobe>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80064ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064d2:	461a      	mov	r2, r3
 80064d4:	2190      	movs	r1, #144	; 0x90
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fe16 	bl	8008108 <VL53L0X_RdDWord>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80064ea:	227c      	movs	r2, #124	; 0x7c
 80064ec:	2194      	movs	r1, #148	; 0x94
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fd26 	bl	8007f40 <VL53L0X_WrByte>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fca8 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006510:	4313      	orrs	r3, r2
 8006512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651a:	461a      	mov	r2, r3
 800651c:	2190      	movs	r1, #144	; 0x90
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fdf2 	bl	8008108 <VL53L0X_RdDWord>
 8006524:	4603      	mov	r3, r0
 8006526:	461a      	mov	r2, r3
 8006528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800652c:	4313      	orrs	r3, r2
 800652e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006532:	2273      	movs	r2, #115	; 0x73
 8006534:	2194      	movs	r1, #148	; 0x94
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fd02 	bl	8007f40 <VL53L0X_WrByte>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006544:	4313      	orrs	r3, r2
 8006546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fc84 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006558:	4313      	orrs	r3, r2
 800655a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800655e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006562:	461a      	mov	r2, r3
 8006564:	2190      	movs	r1, #144	; 0x90
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fdce 	bl	8008108 <VL53L0X_RdDWord>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006574:	4313      	orrs	r3, r2
 8006576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800657e:	b29b      	uxth	r3, r3
 8006580:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006582:	2274      	movs	r2, #116	; 0x74
 8006584:	2194      	movs	r1, #148	; 0x94
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 fcda 	bl	8007f40 <VL53L0X_WrByte>
 800658c:	4603      	mov	r3, r0
 800658e:	461a      	mov	r2, r3
 8006590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006594:	4313      	orrs	r3, r2
 8006596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff fc5c 	bl	8005e58 <VL53L0X_device_read_strobe>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065b2:	461a      	mov	r2, r3
 80065b4:	2190      	movs	r1, #144	; 0x90
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fda6 	bl	8008108 <VL53L0X_RdDWord>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80065ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065d0:	4313      	orrs	r3, r2
 80065d2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80065d4:	2275      	movs	r2, #117	; 0x75
 80065d6:	2194      	movs	r1, #148	; 0x94
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fcb1 	bl	8007f40 <VL53L0X_WrByte>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fc33 	bl	8005e58 <VL53L0X_device_read_strobe>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006604:	461a      	mov	r2, r3
 8006606:	2190      	movs	r1, #144	; 0x90
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fd7d 	bl	8008108 <VL53L0X_RdDWord>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006616:	4313      	orrs	r3, r2
 8006618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006620:	b29b      	uxth	r3, r3
 8006622:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006624:	2276      	movs	r2, #118	; 0x76
 8006626:	2194      	movs	r1, #148	; 0x94
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fc89 	bl	8007f40 <VL53L0X_WrByte>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006636:	4313      	orrs	r3, r2
 8006638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fc0b 	bl	8005e58 <VL53L0X_device_read_strobe>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800664a:	4313      	orrs	r3, r2
 800664c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006654:	461a      	mov	r2, r3
 8006656:	2190      	movs	r1, #144	; 0x90
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fd55 	bl	8008108 <VL53L0X_RdDWord>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006666:	4313      	orrs	r3, r2
 8006668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006672:	4313      	orrs	r3, r2
 8006674:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006676:	2200      	movs	r2, #0
 8006678:	2181      	movs	r1, #129	; 0x81
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fc60 	bl	8007f40 <VL53L0X_WrByte>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006688:	4313      	orrs	r3, r2
 800668a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800668e:	2206      	movs	r2, #6
 8006690:	21ff      	movs	r1, #255	; 0xff
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fc54 	bl	8007f40 <VL53L0X_WrByte>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80066a6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80066aa:	461a      	mov	r2, r3
 80066ac:	2183      	movs	r1, #131	; 0x83
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fcc8 	bl	8008044 <VL53L0X_RdByte>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066bc:	4313      	orrs	r3, r2
 80066be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80066c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066c6:	f023 0304 	bic.w	r3, r3, #4
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	2183      	movs	r1, #131	; 0x83
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fc35 	bl	8007f40 <VL53L0X_WrByte>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066de:	4313      	orrs	r3, r2
 80066e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066e4:	2201      	movs	r2, #1
 80066e6:	21ff      	movs	r1, #255	; 0xff
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 fc29 	bl	8007f40 <VL53L0X_WrByte>
 80066ee:	4603      	mov	r3, r0
 80066f0:	461a      	mov	r2, r3
 80066f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80066fc:	2201      	movs	r2, #1
 80066fe:	2100      	movs	r1, #0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fc1d 	bl	8007f40 <VL53L0X_WrByte>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800670e:	4313      	orrs	r3, r2
 8006710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006714:	2200      	movs	r2, #0
 8006716:	21ff      	movs	r1, #255	; 0xff
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fc11 	bl	8007f40 <VL53L0X_WrByte>
 800671e:	4603      	mov	r3, r0
 8006720:	461a      	mov	r2, r3
 8006722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006726:	4313      	orrs	r3, r2
 8006728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800672c:	2200      	movs	r2, #0
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fc05 	bl	8007f40 <VL53L0X_WrByte>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800673e:	4313      	orrs	r3, r2
 8006740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006744:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 808f 	bne.w	800686c <VL53L0X_get_info_from_device+0x98e>
 800674e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006752:	2b07      	cmp	r3, #7
 8006754:	f000 808a 	beq.w	800686c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d024      	beq.n	80067ac <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006766:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11e      	bne.n	80067ac <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006774:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800677e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006782:	2300      	movs	r3, #0
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006786:	e00e      	b.n	80067a6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006788:	f107 0208 	add.w	r2, r7, #8
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	4413      	add	r3, r2
 8006790:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006796:	4413      	add	r3, r2
 8006798:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800679c:	460a      	mov	r2, r1
 800679e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80067a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a2:	3301      	adds	r3, #1
 80067a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	dded      	ble.n	8006788 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80067b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067ba:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d112      	bne.n	80067e8 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067cc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	33f3      	adds	r3, #243	; 0xf3
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	4619      	mov	r1, r3
 80067e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067e4:	f002 f880 	bl	80088e8 <strcpy>

		}

		if (((option & 4) == 4) &&
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d030      	beq.n	8006854 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80067f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067f6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d12a      	bne.n	8006854 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006810:	025b      	lsls	r3, r3, #9
 8006812:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006818:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006824:	2b00      	cmp	r3, #0
 8006826:	d011      	beq.n	800684c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800683c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006840:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006844:	425b      	negs	r3, r3
 8006846:	b29b      	uxth	r3, r3
 8006848:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800684c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006854:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	4313      	orrs	r3, r2
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006862:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800686c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006870:	4618      	mov	r0, r3
 8006872:	3760      	adds	r7, #96	; 0x60
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006884:	f240 6277 	movw	r2, #1655	; 0x677
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006890:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006894:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80068a6:	68bb      	ldr	r3, [r7, #8]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr

080068b2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d017      	beq.n	80068fc <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80068d2:	e005      	b.n	80068e0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80068da:	89fb      	ldrh	r3, [r7, #14]
 80068dc:	3301      	adds	r3, #1
 80068de:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f4      	bne.n	80068d4 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80068ea:	89fb      	ldrh	r3, [r7, #14]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80068f8:	4413      	add	r3, r2
 80068fa:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80068fc:	8afb      	ldrh	r3, [r7, #22]

}
 80068fe:	4618      	mov	r0, r3
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	0a12      	lsrs	r2, r2, #8
 800691e:	b292      	uxth	r2, r2
 8006920:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr
	...

08006934 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	4619      	mov	r1, r3
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff ff94 	bl	8006878 <VL53L0X_calc_macro_period_ps>
 8006950:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006958:	4a0a      	ldr	r2, [pc, #40]	; (8006984 <VL53L0X_calc_timeout_mclks+0x50>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	099b      	lsrs	r3, r3, #6
 8006960:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006968:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	441a      	add	r2, r3
	timeout_period_mclks =
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800697a:	69fb      	ldr	r3, [r7, #28]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	10624dd3 	.word	0x10624dd3

08006988 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	807b      	strh	r3, [r7, #2]
 8006994:	4613      	mov	r3, r2
 8006996:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800699c:	787b      	ldrb	r3, [r7, #1]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff69 	bl	8006878 <VL53L0X_calc_macro_period_ps>
 80069a6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <VL53L0X_calc_timeout_us+0x50>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	099b      	lsrs	r3, r3, #6
 80069b6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80069b8:	887b      	ldrh	r3, [r7, #2]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	fb02 f303 	mul.w	r3, r2, r3
 80069c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <VL53L0X_calc_timeout_us+0x50>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	099b      	lsrs	r3, r3, #6
 80069cc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80069ce:	697b      	ldr	r3, [r7, #20]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	10624dd3 	.word	0x10624dd3

080069dc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	; 0x30
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	460b      	mov	r3, r1
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <get_sequence_step_timeout+0x38>
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d002      	beq.n	8006a14 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006a0e:	7afb      	ldrb	r3, [r7, #11]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d128      	bne.n	8006a66 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a14:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7fd fa9c 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006a28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006a30:	f107 0320 	add.w	r3, r7, #32
 8006a34:	461a      	mov	r2, r3
 8006a36:	2146      	movs	r1, #70	; 0x46
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f001 fb03 	bl	8008044 <VL53L0X_RdByte>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006a44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff ff5c 	bl	8006908 <VL53L0X_decode_timeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006a54:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006a58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff ff93 	bl	8006988 <VL53L0X_calc_timeout_us>
 8006a62:	62b8      	str	r0, [r7, #40]	; 0x28
 8006a64:	e092      	b.n	8006b8c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d135      	bne.n	8006ad8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a6c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006a70:	461a      	mov	r2, r3
 8006a72:	2100      	movs	r1, #0
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7fd fa70 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006a80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 8081 	bne.w	8006b8c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a8a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006a8e:	461a      	mov	r2, r3
 8006a90:	2100      	movs	r1, #0
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7fd fa61 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006a9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006aa6:	f107 031e 	add.w	r3, r7, #30
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2151      	movs	r1, #81	; 0x51
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 faf2 	bl	8008098 <VL53L0X_RdWord>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006aba:	8bfb      	ldrh	r3, [r7, #30]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff ff23 	bl	8006908 <VL53L0X_decode_timeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006ac6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006aca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006acc:	4619      	mov	r1, r3
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff ff5a 	bl	8006988 <VL53L0X_calc_timeout_us>
 8006ad4:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ad6:	e059      	b.n	8006b8c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d156      	bne.n	8006b8c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ade:	f107 0314 	add.w	r3, r7, #20
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7fd fb41 	bl	800416c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01d      	beq.n	8006b30 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006af4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006af8:	461a      	mov	r2, r3
 8006afa:	2100      	movs	r1, #0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7fd fa2c 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10f      	bne.n	8006b30 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006b10:	f107 031e 	add.w	r3, r7, #30
 8006b14:	461a      	mov	r2, r3
 8006b16:	2151      	movs	r1, #81	; 0x51
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 fabd 	bl	8008098 <VL53L0X_RdWord>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b24:	8bfb      	ldrh	r3, [r7, #30]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff feee 	bl	8006908 <VL53L0X_decode_timeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b38:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2101      	movs	r1, #1
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7fd fa0a 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006b54:	f107 031c 	add.w	r3, r7, #28
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2171      	movs	r1, #113	; 0x71
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f001 fa9b 	bl	8008098 <VL53L0X_RdWord>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b68:	8bbb      	ldrh	r3, [r7, #28]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fecc 	bl	8006908 <VL53L0X_decode_timeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006b74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006b7c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b82:	4619      	mov	r1, r3
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff feff 	bl	8006988 <VL53L0X_calc_timeout_us>
 8006b8a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b90:	601a      	str	r2, [r3, #0]

	return Status;
 8006b92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3730      	adds	r7, #48	; 0x30
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08a      	sub	sp, #40	; 0x28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <set_sequence_step_timeout+0x26>
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d002      	beq.n	8006bc4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d138      	bne.n	8006c36 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006bc4:	f107 031b 	add.w	r3, r7, #27
 8006bc8:	461a      	mov	r2, r3
 8006bca:	2100      	movs	r1, #0
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7fd f9c4 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11a      	bne.n	8006c16 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006be0:	7efb      	ldrb	r3, [r7, #27]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fea4 	bl	8006934 <VL53L0X_calc_timeout_mclks>
 8006bec:	4603      	mov	r3, r0
 8006bee:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006bf0:	8bbb      	ldrh	r3, [r7, #28]
 8006bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf6:	d903      	bls.n	8006c00 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006bf8:	23ff      	movs	r3, #255	; 0xff
 8006bfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bfe:	e004      	b.n	8006c0a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006c00:	8bbb      	ldrh	r3, [r7, #28]
 8006c02:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006c04:	3b01      	subs	r3, #1
 8006c06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006c16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 80ab 	bne.w	8006d76 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c24:	461a      	mov	r2, r3
 8006c26:	2146      	movs	r1, #70	; 0x46
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f001 f989 	bl	8007f40 <VL53L0X_WrByte>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006c34:	e09f      	b.n	8006d76 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d135      	bne.n	8006ca8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006c3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11b      	bne.n	8006c7c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c44:	f107 031b 	add.w	r3, r7, #27
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7fd f984 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006c58:	7efb      	ldrb	r3, [r7, #27]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7ff fe68 	bl	8006934 <VL53L0X_calc_timeout_mclks>
 8006c64:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006c66:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fe21 	bl	80068b2 <VL53L0X_encode_timeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c74:	8b3a      	ldrh	r2, [r7, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006c84:	8b3b      	ldrh	r3, [r7, #24]
 8006c86:	461a      	mov	r2, r3
 8006c88:	2151      	movs	r1, #81	; 0x51
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f001 f97c 	bl	8007f88 <VL53L0X_WrWord>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006c96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d16b      	bne.n	8006d76 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006ca6:	e066      	b.n	8006d76 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d160      	bne.n	8006d70 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006cae:	f107 0310 	add.w	r3, r7, #16
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7fd fa59 	bl	800416c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006cbe:	7cfb      	ldrb	r3, [r7, #19]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01d      	beq.n	8006d00 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006cc4:	f107 031b 	add.w	r3, r7, #27
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2100      	movs	r1, #0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7fd f944 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006ce0:	f107 0318 	add.w	r3, r7, #24
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2151      	movs	r1, #81	; 0x51
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f001 f9d5 	bl	8008098 <VL53L0X_RdWord>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006cf4:	8b3b      	ldrh	r3, [r7, #24]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fe06 	bl	8006908 <VL53L0X_decode_timeout>
 8006cfc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006cfe:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d08:	f107 031b 	add.w	r3, r7, #27
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2101      	movs	r1, #1
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7fd f922 	bl	8003f5a <VL53L0X_GetVcselPulsePeriod>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006d1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d128      	bne.n	8006d76 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006d24:	7efb      	ldrb	r3, [r7, #27]
 8006d26:	461a      	mov	r2, r3
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fe02 	bl	8006934 <VL53L0X_calc_timeout_mclks>
 8006d30:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d34:	6a3a      	ldr	r2, [r7, #32]
 8006d36:	4413      	add	r3, r2
 8006d38:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006d3a:	6a38      	ldr	r0, [r7, #32]
 8006d3c:	f7ff fdb9 	bl	80068b2 <VL53L0X_encode_timeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006d44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006d4c:	8bfb      	ldrh	r3, [r7, #30]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2171      	movs	r1, #113	; 0x71
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f001 f918 	bl	8007f88 <VL53L0X_WrWord>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006d5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006d6e:	e002      	b.n	8006d76 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d70:	23fc      	movs	r3, #252	; 0xfc
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006d76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3728      	adds	r7, #40	; 0x28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d00a      	beq.n	8006db4 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006d9e:	e013      	b.n	8006dc8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006da0:	f107 0316 	add.w	r3, r7, #22
 8006da4:	461a      	mov	r2, r3
 8006da6:	2150      	movs	r1, #80	; 0x50
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f001 f94b 	bl	8008044 <VL53L0X_RdByte>
 8006dae:	4603      	mov	r3, r0
 8006db0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006db2:	e00b      	b.n	8006dcc <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006db4:	f107 0316 	add.w	r3, r7, #22
 8006db8:	461a      	mov	r2, r3
 8006dba:	2170      	movs	r1, #112	; 0x70
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 f941 	bl	8008044 <VL53L0X_RdByte>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006dc6:	e001      	b.n	8006dcc <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006dc8:	23fc      	movs	r3, #252	; 0xfc
 8006dca:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d107      	bne.n	8006de4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006dd4:	7dbb      	ldrb	r3, [r7, #22]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fff9 	bl	8005dce <VL53L0X_decode_vcsel_period>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	701a      	strb	r2, [r3, #0]

	return Status;
 8006de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b092      	sub	sp, #72	; 0x48
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006e00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006e04:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006e06:	f240 7376 	movw	r3, #1910	; 0x776
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006e0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006e12:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006e18:	f240 234e 	movw	r3, #590	; 0x24e
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006e1e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006e24:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006e2a:	f240 2326 	movw	r3, #550	; 0x226
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006e34:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006e38:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d205      	bcs.n	8006e52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e46:	23fc      	movs	r3, #252	; 0xfc
 8006e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8006e4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006e50:	e0aa      	b.n	8006fa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006e5e:	f107 0314 	add.w	r3, r7, #20
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fd f981 	bl	800416c <VL53L0X_GetSequenceStepEnables>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006e70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d15b      	bne.n	8006f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8006e78:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8006e7e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d052      	beq.n	8006f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8006e8a:	f107 0310 	add.w	r3, r7, #16
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2102      	movs	r1, #2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fda2 	bl	80069dc <get_sequence_step_timeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006e9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006ea6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006eaa:	e07d      	b.n	8006fa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006eac:	7d3b      	ldrb	r3, [r7, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00f      	beq.n	8006ed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006eb2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	4413      	add	r3, r2
 8006eb8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d204      	bcs.n	8006ecc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eca:	e002      	b.n	8006ed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ecc:	23fc      	movs	r3, #252	; 0xfc
 8006ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006ed2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006eda:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ede:	e063      	b.n	8006fa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006ee0:	7dbb      	ldrb	r3, [r7, #22]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d011      	beq.n	8006f0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	4413      	add	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d204      	bcs.n	8006f02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
 8006f00:	e016      	b.n	8006f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f02:	23fc      	movs	r3, #252	; 0xfc
 8006f04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f08:	e012      	b.n	8006f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006f0a:	7d7b      	ldrb	r3, [r7, #21]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00f      	beq.n	8006f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f14:	4413      	add	r3, r2
 8006f16:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d204      	bcs.n	8006f2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	643b      	str	r3, [r7, #64]	; 0x40
 8006f28:	e002      	b.n	8006f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f2a:	23fc      	movs	r3, #252	; 0xfc
 8006f2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006f30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006f38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f3c:	e034      	b.n	8006fa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d019      	beq.n	8006f78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006f44:	f107 030c 	add.w	r3, r7, #12
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2103      	movs	r1, #3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fd45 	bl	80069dc <get_sequence_step_timeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f5c:	4413      	add	r3, r2
 8006f5e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d204      	bcs.n	8006f72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f70:	e002      	b.n	8006f78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f72:	23fc      	movs	r3, #252	; 0xfc
 8006f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006f78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d111      	bne.n	8006fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006f80:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00e      	beq.n	8006fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8006f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f90:	2104      	movs	r1, #4
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fe03 	bl	8006b9e <set_sequence_step_timeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006fa4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3748      	adds	r7, #72	; 0x48
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b090      	sub	sp, #64	; 0x40
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006fc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006fc4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006fc6:	f240 7376 	movw	r3, #1910	; 0x776
 8006fca:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006fcc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006fd2:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006fd8:	f240 234e 	movw	r3, #590	; 0x24e
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006fde:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006fe4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006fea:	f240 2326 	movw	r3, #550	; 0x226
 8006fee:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	441a      	add	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ffe:	f107 0318 	add.w	r3, r7, #24
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fd f8b1 	bl	800416c <VL53L0X_GetSequenceStepEnables>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007010:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007018:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800701c:	e075      	b.n	800710a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800701e:	7e3b      	ldrb	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007024:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800702a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800702c:	2b00      	cmp	r3, #0
 800702e:	d030      	beq.n	8007092 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007030:	f107 0310 	add.w	r3, r7, #16
 8007034:	461a      	mov	r2, r3
 8007036:	2102      	movs	r1, #2
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fccf 	bl	80069dc <get_sequence_step_timeout>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007044:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007048:	2b00      	cmp	r3, #0
 800704a:	d122      	bne.n	8007092 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800704c:	7e3b      	ldrb	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007056:	6939      	ldr	r1, [r7, #16]
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800705c:	441a      	add	r2, r3
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007062:	7ebb      	ldrb	r3, [r7, #26]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d009      	beq.n	800707c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800706c:	6939      	ldr	r1, [r7, #16]
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	440b      	add	r3, r1
 8007072:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007074:	441a      	add	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e00a      	b.n	8007092 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800707c:	7e7b      	ldrb	r3, [r7, #25]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800708c:	441a      	add	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007092:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007096:	2b00      	cmp	r3, #0
 8007098:	d114      	bne.n	80070c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800709a:	7efb      	ldrb	r3, [r7, #27]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d011      	beq.n	80070c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	461a      	mov	r2, r3
 80070a6:	2103      	movs	r1, #3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fc97 	bl	80069dc <get_sequence_step_timeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80070be:	441a      	add	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d114      	bne.n	80070f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80070cc:	7f3b      	ldrb	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80070d2:	f107 0314 	add.w	r3, r7, #20
 80070d6:	461a      	mov	r2, r3
 80070d8:	2104      	movs	r1, #4
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fc7e 	bl	80069dc <get_sequence_step_timeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80070f0:	441a      	add	r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007106:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800710a:	4618      	mov	r0, r3
 800710c:	3740      	adds	r7, #64	; 0x40
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800711e:	2300      	movs	r3, #0
 8007120:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007126:	e0c6      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4413      	add	r3, r2
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	3301      	adds	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007138:	7cfb      	ldrb	r3, [r7, #19]
 800713a:	2bff      	cmp	r3, #255	; 0xff
 800713c:	f040 808d 	bne.w	800725a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4413      	add	r3, r2
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	747b      	strb	r3, [r7, #17]
			Index++;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	3301      	adds	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007150:	7c7b      	ldrb	r3, [r7, #17]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d87e      	bhi.n	8007254 <VL53L0X_load_tuning_settings+0x140>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <VL53L0X_load_tuning_settings+0x48>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	0800716d 	.word	0x0800716d
 8007160:	080071a7 	.word	0x080071a7
 8007164:	080071e1 	.word	0x080071e1
 8007168:	0800721b 	.word	0x0800721b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	743b      	strb	r3, [r7, #16]
				Index++;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	3301      	adds	r3, #1
 800717a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4413      	add	r3, r2
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	3301      	adds	r3, #1
 800718a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800718c:	7c3b      	ldrb	r3, [r7, #16]
 800718e:	b29b      	uxth	r3, r3
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	b29a      	uxth	r2, r3
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	b29b      	uxth	r3, r3
 8007198:	4413      	add	r3, r2
 800719a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	89ba      	ldrh	r2, [r7, #12]
 80071a0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80071a4:	e087      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	4413      	add	r3, r2
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	743b      	strb	r3, [r7, #16]
				Index++;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	4413      	add	r3, r2
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	73fb      	strb	r3, [r7, #15]
				Index++;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3301      	adds	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80071c6:	7c3b      	ldrb	r3, [r7, #16]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	89ba      	ldrh	r2, [r7, #12]
 80071da:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80071de:	e06a      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4413      	add	r3, r2
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	743b      	strb	r3, [r7, #16]
				Index++;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	3301      	adds	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	4413      	add	r3, r2
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	3301      	adds	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007200:	7c3b      	ldrb	r3, [r7, #16]
 8007202:	b29b      	uxth	r3, r3
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	b29a      	uxth	r2, r3
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	b29b      	uxth	r3, r3
 800720c:	4413      	add	r3, r2
 800720e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	89ba      	ldrh	r2, [r7, #12]
 8007214:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007218:	e04d      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	4413      	add	r3, r2
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	743b      	strb	r3, [r7, #16]
				Index++;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	3301      	adds	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	4413      	add	r3, r2
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	3301      	adds	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800723a:	7c3b      	ldrb	r3, [r7, #16]
 800723c:	b29b      	uxth	r3, r3
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	b29a      	uxth	r2, r3
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	b29b      	uxth	r3, r3
 8007246:	4413      	add	r3, r2
 8007248:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	89ba      	ldrh	r2, [r7, #12]
 800724e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8007252:	e030      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007254:	23fc      	movs	r3, #252	; 0xfc
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e02d      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800725a:	7cfb      	ldrb	r3, [r7, #19]
 800725c:	2b04      	cmp	r3, #4
 800725e:	d828      	bhi.n	80072b2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	4413      	add	r3, r2
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	74bb      	strb	r3, [r7, #18]
			Index++;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	3301      	adds	r3, #1
 800726e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	e00f      	b.n	8007296 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	4413      	add	r3, r2
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	f107 0208 	add.w	r2, r7, #8
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	4413      	add	r3, r2
 8007286:	460a      	mov	r2, r1
 8007288:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	3301      	adds	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	3301      	adds	r3, #1
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	7cfb      	ldrb	r3, [r7, #19]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	429a      	cmp	r2, r3
 800729c:	dbeb      	blt.n	8007276 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800729e:	7cfb      	ldrb	r3, [r7, #19]
 80072a0:	f107 0208 	add.w	r2, r7, #8
 80072a4:	7cb9      	ldrb	r1, [r7, #18]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fdee 	bl	8007e88 <VL53L0X_WriteMulti>
 80072ac:	4603      	mov	r3, r0
 80072ae:	77fb      	strb	r3, [r7, #31]
 80072b0:	e001      	b.n	80072b6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072b2:	23fc      	movs	r3, #252	; 0xfc
 80072b4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	4413      	add	r3, r2
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <VL53L0X_load_tuning_settings+0x1b8>
 80072c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f43f af2e 	beq.w	8007128 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80072ee:	f107 0313 	add.w	r3, r7, #19
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7fc ffc5 	bl	8004284 <VL53L0X_GetXTalkCompensationEnable>
 80072fa:	4603      	mov	r3, r0
 80072fc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80072fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d111      	bne.n	800732a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	8a9b      	ldrh	r3, [r3, #20]
 8007316:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	3380      	adds	r3, #128	; 0x80
 8007324:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800732a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3720      	adds	r7, #32
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800734e:	f107 0310 	add.w	r3, r7, #16
 8007352:	461a      	mov	r2, r3
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff ffbe 	bl	80072d8 <VL53L0X_get_total_xtalk_rate>
 800735c:	4603      	mov	r3, r0
 800735e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d105      	bne.n	8007374 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	441a      	add	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]

	return Status;
 8007374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b09a      	sub	sp, #104	; 0x68
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800738e:	2312      	movs	r3, #18
 8007390:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007396:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007398:	2342      	movs	r3, #66	; 0x42
 800739a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800739c:	2306      	movs	r3, #6
 800739e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80073a0:	2307      	movs	r3, #7
 80073a2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80073ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	3380      	adds	r3, #128	; 0x80
 80073c8:	0a1b      	lsrs	r3, r3, #8
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d0:	fb02 f303 	mul.w	r3, r2, r3
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01a      	beq.n	8007416 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80073ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ec:	4413      	add	r3, r2
 80073ee:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80073f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80073fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007406:	fb03 f303 	mul.w	r3, r3, r3
 800740a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800740c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007412:	0c1b      	lsrs	r3, r3, #16
 8007414:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007426:	0c1b      	lsrs	r3, r3, #16
 8007428:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	fb03 f303 	mul.w	r3, r3, r3
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007434:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800743c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743e:	085a      	lsrs	r2, r3, #1
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	441a      	add	r2, r3
 8007444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007446:	fbb2 f3f3 	udiv	r3, r2, r3
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007450:	fb02 f303 	mul.w	r3, r2, r3
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745c:	d302      	bcc.n	8007464 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800745e:	4b54      	ldr	r3, [pc, #336]	; (80075b0 <VL53L0X_calc_dmax+0x230>)
 8007460:	663b      	str	r3, [r7, #96]	; 0x60
 8007462:	e015      	b.n	8007490 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007466:	085a      	lsrs	r2, r3, #1
 8007468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800746a:	441a      	add	r2, r3
 800746c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007472:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007478:	fb02 f303 	mul.w	r3, r2, r3
 800747c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800747e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007480:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007484:	0c1b      	lsrs	r3, r3, #16
 8007486:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007488:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800748a:	fb03 f303 	mul.w	r3, r3, r3
 800748e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007492:	039b      	lsls	r3, r3, #14
 8007494:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007498:	4a46      	ldr	r2, [pc, #280]	; (80075b4 <VL53L0X_calc_dmax+0x234>)
 800749a:	fba2 2303 	umull	r2, r3, r2, r3
 800749e:	099b      	lsrs	r3, r3, #6
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	fb03 f303 	mul.w	r3, r3, r3
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	fb03 f303 	mul.w	r3, r3, r3
 80074b0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	3308      	adds	r3, #8
 80074b6:	091b      	lsrs	r3, r3, #4
 80074b8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80074ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	4613      	mov	r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074d4:	0b9b      	lsrs	r3, r3, #14
 80074d6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80074d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074dc:	4413      	add	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80074e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4413      	add	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	039b      	lsls	r3, r3, #14
 80074f8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	085b      	lsrs	r3, r3, #1
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4413      	add	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800751e:	4a25      	ldr	r2, [pc, #148]	; (80075b4 <VL53L0X_calc_dmax+0x234>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	099b      	lsrs	r3, r3, #6
 8007526:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007534:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <VL53L0X_calc_dmax+0x234>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	099b      	lsrs	r3, r3, #6
 800753c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800753e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007540:	3380      	adds	r3, #128	; 0x80
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	085a      	lsrs	r2, r3, #1
 8007550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007552:	441a      	add	r2, r3
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	fbb2 f3f3 	udiv	r3, r2, r3
 800755a:	65bb      	str	r3, [r7, #88]	; 0x58
 800755c:	e001      	b.n	8007562 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007562:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007564:	f7fe fc45 	bl	8005df2 <VL53L0X_isqrt>
 8007568:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	085a      	lsrs	r2, r3, #1
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	441a      	add	r2, r3
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	fbb2 f3f3 	udiv	r3, r2, r3
 800757e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007580:	e001      	b.n	8007586 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007586:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007588:	f7fe fc33 	bl	8005df2 <VL53L0X_isqrt>
 800758c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800758e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007598:	429a      	cmp	r2, r3
 800759a:	d902      	bls.n	80075a2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800759c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800759e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075a0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80075a2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3768      	adds	r7, #104	; 0x68
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	fff00000 	.word	0xfff00000
 80075b4:	10624dd3 	.word	0x10624dd3

080075b8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b0b4      	sub	sp, #208	; 0xd0
 80075bc:	af04      	add	r7, sp, #16
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80075c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80075ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80075ce:	f44f 7316 	mov.w	r3, #600	; 0x258
 80075d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80075d6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80075da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80075de:	f241 235c 	movw	r3, #4700	; 0x125c
 80075e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80075e6:	4b9e      	ldr	r3, [pc, #632]	; (8007860 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80075e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80075ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80075f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80075f2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80075f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fe:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007600:	4b98      	ldr	r3, [pc, #608]	; (8007864 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007602:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007608:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800760a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800760e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007610:	f240 6377 	movw	r3, #1655	; 0x677
 8007614:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800762a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007638:	f107 0310 	add.w	r3, r7, #16
 800763c:	461a      	mov	r2, r3
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fe78 	bl	8007336 <VL53L0X_get_total_signal_rate>
 8007646:	4603      	mov	r3, r0
 8007648:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	461a      	mov	r2, r3
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff fe3f 	bl	80072d8 <VL53L0X_get_total_xtalk_rate>
 800765a:	4603      	mov	r3, r0
 800765c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007666:	fb02 f303 	mul.w	r3, r2, r3
 800766a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800766c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800766e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800767c:	fb02 f303 	mul.w	r3, r2, r3
 8007680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007684:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768a:	429a      	cmp	r2, r3
 800768c:	d902      	bls.n	8007694 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007694:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007698:	2b00      	cmp	r3, #0
 800769a:	d168      	bne.n	800776e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80076a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80076ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80076b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff f93a 	bl	8006934 <VL53L0X_calc_timeout_mclks>
 80076c0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80076d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80076d6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80076da:	461a      	mov	r2, r3
 80076dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff f927 	bl	8006934 <VL53L0X_calc_timeout_mclks>
 80076e6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80076e8:	2303      	movs	r3, #3
 80076ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80076ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d102      	bne.n	80076fc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80076f6:	2302      	movs	r3, #2
 80076f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80076fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007700:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007702:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	02db      	lsls	r3, r3, #11
 800770c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007710:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007714:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007718:	4a53      	ldr	r2, [pc, #332]	; (8007868 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	099b      	lsrs	r3, r3, #6
 8007720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007728:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800772a:	fb02 f303 	mul.w	r3, r2, r3
 800772e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007736:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800773a:	4a4b      	ldr	r2, [pc, #300]	; (8007868 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	099b      	lsrs	r3, r3, #6
 8007742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3380      	adds	r3, #128	; 0x80
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800775c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007760:	3380      	adds	r3, #128	; 0x80
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800776e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007776:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800777a:	e15e      	b.n	8007a3a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800777c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10c      	bne.n	800779c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007788:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007790:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e14c      	b.n	8007a36 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800779c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80077aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ae:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80077b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077b2:	041a      	lsls	r2, r3, #16
 80077b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80077be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d902      	bls.n	80077ce <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80077c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80077ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80077de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80077e2:	4613      	mov	r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fb01 	bl	8005df2 <VL53L0X_isqrt>
 80077f0:	4603      	mov	r3, r0
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	891b      	ldrh	r3, [r3, #8]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
 8007802:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007806:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007808:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800780c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800780e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007810:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007814:	4a14      	ldr	r2, [pc, #80]	; (8007868 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	099b      	lsrs	r3, r3, #6
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800781e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007820:	041b      	lsls	r3, r3, #16
 8007822:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007826:	4a10      	ldr	r2, [pc, #64]	; (8007868 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007828:	fba2 2303 	umull	r2, r3, r2, r3
 800782c:	099b      	lsrs	r3, r3, #6
 800782e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	425b      	neglt	r3, r3
 8007844:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	7e1b      	ldrb	r3, [r3, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800785c:	e033      	b.n	80078c6 <VL53L0X_calc_sigma_estimate+0x30e>
 800785e:	bf00      	nop
 8007860:	028f87ae 	.word	0x028f87ae
 8007864:	0006999a 	.word	0x0006999a
 8007868:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800786c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800786e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007872:	fbb2 f3f3 	udiv	r3, r2, r3
 8007876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800787a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007884:	fb02 f303 	mul.w	r3, r2, r3
 8007888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800788c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007892:	4413      	add	r3, r2
 8007894:	0c1b      	lsrs	r3, r3, #16
 8007896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800789a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80078a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80078a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078aa:	085b      	lsrs	r3, r3, #1
 80078ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80078b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078b4:	fb03 f303 	mul.w	r3, r3, r3
 80078b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80078bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078c0:	0b9b      	lsrs	r3, r3, #14
 80078c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80078c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80078d8:	0c1b      	lsrs	r3, r3, #16
 80078da:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	fb03 f303 	mul.w	r3, r3, r3
 80078e2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80078e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	fb03 f303 	mul.w	r3, r3, r3
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80078fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	4413      	add	r3, r2
 8007902:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f7fe fa74 	bl	8005df2 <VL53L0X_isqrt>
 800790a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	3332      	adds	r3, #50	; 0x32
 8007916:	4a4b      	ldr	r2, [pc, #300]	; (8007a44 <VL53L0X_calc_sigma_estimate+0x48c>)
 8007918:	fba2 2303 	umull	r2, r3, r2, r3
 800791c:	095a      	lsrs	r2, r3, #5
 800791e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800792c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007930:	fb02 f303 	mul.w	r3, r2, r3
 8007934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800793c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007940:	3308      	adds	r3, #8
 8007942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800794a:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <VL53L0X_calc_sigma_estimate+0x490>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	0b5b      	lsrs	r3, r3, #13
 8007952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800795a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800795c:	429a      	cmp	r2, r3
 800795e:	d902      	bls.n	8007966 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800796a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800796e:	4413      	add	r3, r2
 8007970:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007974:	4a35      	ldr	r2, [pc, #212]	; (8007a4c <VL53L0X_calc_sigma_estimate+0x494>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	099b      	lsrs	r3, r3, #6
 800797c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007986:	441a      	add	r2, r3
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fa2f 	bl	8005df2 <VL53L0X_isqrt>
 8007994:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80079a2:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <VL53L0X_calc_sigma_estimate+0x494>)
 80079a4:	fba2 2303 	umull	r2, r3, r2, r3
 80079a8:	099b      	lsrs	r3, r3, #6
 80079aa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80079ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079b0:	fb03 f303 	mul.w	r3, r3, r3
 80079b4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	fb03 f303 	mul.w	r3, r3, r3
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80079be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	4413      	add	r3, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fa14 	bl	8005df2 <VL53L0X_isqrt>
 80079ca:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079d2:	fb02 f303 	mul.w	r3, r2, r3
 80079d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80079da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <VL53L0X_calc_sigma_estimate+0x43c>
 80079e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <VL53L0X_calc_sigma_estimate+0x43c>
 80079e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80079ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d903      	bls.n	80079fc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80079f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007a02:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007a0e:	6939      	ldr	r1, [r7, #16]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a18:	9302      	str	r3, [sp, #8]
 8007a1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff fca8 	bl	8007380 <VL53L0X_calc_dmax>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a36:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	37c0      	adds	r7, #192	; 0xc0
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	51eb851f 	.word	0x51eb851f
 8007a48:	d1b71759 	.word	0xd1b71759
 8007a4c:	10624dd3 	.word	0x10624dd3

08007a50 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b090      	sub	sp, #64	; 0x40
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	72fb      	strb	r3, [r7, #11]
 8007a60:	4613      	mov	r3, r2
 8007a62:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007aa2:	7afb      	ldrb	r3, [r7, #11]
 8007aa4:	10db      	asrs	r3, r3, #3
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007ab0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d017      	beq.n	8007ae8 <VL53L0X_get_pal_range_status+0x98>
 8007ab8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007abc:	2b05      	cmp	r3, #5
 8007abe:	d013      	beq.n	8007ae8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007ac0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	d00f      	beq.n	8007ae8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007ac8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007acc:	2b0c      	cmp	r3, #12
 8007ace:	d00b      	beq.n	8007ae8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007ad0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ad4:	2b0d      	cmp	r3, #13
 8007ad6:	d007      	beq.n	8007ae8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007ad8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007adc:	2b0e      	cmp	r3, #14
 8007ade:	d003      	beq.n	8007ae8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007ae0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d103      	bne.n	8007af0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007aee:	e002      	b.n	8007af6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007af6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007afe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007b02:	461a      	mov	r2, r3
 8007b04:	2100      	movs	r1, #0
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7fc fc90 	bl	800442c <VL53L0X_GetLimitCheckEnable>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d02e      	beq.n	8007b78 <VL53L0X_get_pal_range_status+0x128>
 8007b1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12a      	bne.n	8007b78 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007b22:	f107 0310 	add.w	r3, r7, #16
 8007b26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007b2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fd43 	bl	80075b8 <VL53L0X_calc_sigma_estimate>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007b38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b46:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007b48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d113      	bne.n	8007b78 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007b50:	f107 0320 	add.w	r3, r7, #32
 8007b54:	461a      	mov	r2, r3
 8007b56:	2100      	movs	r1, #0
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7fc fceb 	bl	8004534 <VL53L0X_GetLimitCheckValue>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8007b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d902      	bls.n	8007b78 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b80:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007b84:	461a      	mov	r2, r3
 8007b86:	2102      	movs	r1, #2
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7fc fc4f 	bl	800442c <VL53L0X_GetLimitCheckEnable>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007b94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d044      	beq.n	8007c26 <VL53L0X_get_pal_range_status+0x1d6>
 8007b9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d140      	bne.n	8007c26 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007ba4:	f107 031c 	add.w	r3, r7, #28
 8007ba8:	461a      	mov	r2, r3
 8007baa:	2102      	movs	r1, #2
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7fc fcc1 	bl	8004534 <VL53L0X_GetLimitCheckValue>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007bb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d107      	bne.n	8007bd0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	21ff      	movs	r1, #255	; 0xff
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f9bb 	bl	8007f40 <VL53L0X_WrByte>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007bd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007bd8:	f107 0316 	add.w	r3, r7, #22
 8007bdc:	461a      	mov	r2, r3
 8007bde:	21b6      	movs	r1, #182	; 0xb6
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fa59 	bl	8008098 <VL53L0X_RdWord>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007bec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d107      	bne.n	8007c04 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	21ff      	movs	r1, #255	; 0xff
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f9a1 	bl	8007f40 <VL53L0X_WrByte>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007c04:	8afb      	ldrh	r3, [r7, #22]
 8007c06:	025b      	lsls	r3, r3, #9
 8007c08:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d006      	beq.n	8007c26 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007c18:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d902      	bls.n	8007c26 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007c26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c32:	461a      	mov	r2, r3
 8007c34:	2103      	movs	r1, #3
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7fc fbf8 	bl	800442c <VL53L0X_GetLimitCheckEnable>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007c42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d023      	beq.n	8007c92 <VL53L0X_get_pal_range_status+0x242>
 8007c4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11f      	bne.n	8007c92 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007c52:	893b      	ldrh	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5c:	e005      	b.n	8007c6a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	021a      	lsls	r2, r3, #8
 8007c62:	893b      	ldrh	r3, [r7, #8]
 8007c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007c6a:	f107 0318 	add.w	r3, r7, #24
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2103      	movs	r1, #3
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7fc fc5e 	bl	8004534 <VL53L0X_GetLimitCheckValue>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d006      	beq.n	8007c92 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007c84:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d202      	bcs.n	8007c92 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d14a      	bne.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007c9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d103      	bne.n	8007caa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	e042      	b.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007caa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d007      	beq.n	8007cc2 <VL53L0X_get_pal_range_status+0x272>
 8007cb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d003      	beq.n	8007cc2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007cba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d103      	bne.n	8007cca <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc4:	2205      	movs	r2, #5
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e032      	b.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007cca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007cce:	2b06      	cmp	r3, #6
 8007cd0:	d003      	beq.n	8007cda <VL53L0X_get_pal_range_status+0x28a>
 8007cd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007cd6:	2b09      	cmp	r3, #9
 8007cd8:	d103      	bne.n	8007ce2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cdc:	2204      	movs	r2, #4
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	e026      	b.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007ce2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d007      	beq.n	8007cfa <VL53L0X_get_pal_range_status+0x2aa>
 8007cea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007cee:	2b0a      	cmp	r3, #10
 8007cf0:	d003      	beq.n	8007cfa <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007cf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d103      	bne.n	8007d02 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e016      	b.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007d02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d003      	beq.n	8007d12 <VL53L0X_get_pal_range_status+0x2c2>
 8007d0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d103      	bne.n	8007d1a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d14:	2202      	movs	r2, #2
 8007d16:	701a      	strb	r2, [r3, #0]
 8007d18:	e00a      	b.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007d1a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d103      	bne.n	8007d2a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	e002      	b.n	8007d30 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007d3e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8007d42:	461a      	mov	r2, r3
 8007d44:	2101      	movs	r1, #1
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7fc fb70 	bl	800442c <VL53L0X_GetLimitCheckEnable>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007d52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d14f      	bne.n	8007dfa <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <VL53L0X_get_pal_range_status+0x31a>
 8007d62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d103      	bne.n	8007d72 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d70:	e002      	b.n	8007d78 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007d7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007d82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d003      	beq.n	8007d92 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007d8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d98:	e002      	b.n	8007da0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007da6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007daa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <VL53L0X_get_pal_range_status+0x36a>
 8007db2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d103      	bne.n	8007dc2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc0:	e002      	b.n	8007dc8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <VL53L0X_get_pal_range_status+0x392>
 8007dda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d103      	bne.n	8007dea <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de8:	e002      	b.n	8007df0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007df6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007dfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3740      	adds	r7, #64	; 0x40
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b088      	sub	sp, #32
 8007e0a:	af02      	add	r7, sp, #8
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	330a      	adds	r3, #10
 8007e16:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007e24:	b299      	uxth	r1, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	f7f9 fb0b 	bl	800144c <HAL_I2C_Master_Transmit>
 8007e36:	4603      	mov	r3, r0
 8007e38:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007e3a:	693b      	ldr	r3, [r7, #16]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	330a      	adds	r3, #10
 8007e54:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	b299      	uxth	r1, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4613      	mov	r3, r2
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	f7f9 fbe7 	bl	8001648 <HAL_I2C_Master_Receive>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007e7e:	693b      	ldr	r3, [r7, #16]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	460b      	mov	r3, r1
 8007e96:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8007ea0:	d902      	bls.n	8007ea8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007ea2:	f06f 0303 	mvn.w	r3, #3
 8007ea6:	e016      	b.n	8007ed6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	; (8007ee0 <VL53L0X_WriteMulti+0x58>)
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	480c      	ldr	r0, [pc, #48]	; (8007ee4 <VL53L0X_WriteMulti+0x5c>)
 8007eb4:	f000 fd20 	bl	80088f8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4908      	ldr	r1, [pc, #32]	; (8007ee0 <VL53L0X_WriteMulti+0x58>)
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff ffa0 	bl	8007e06 <_I2CWrite>
 8007ec6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ece:	23ec      	movs	r3, #236	; 0xec
 8007ed0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000424 	.word	0x20000424
 8007ee4:	20000425 	.word	0x20000425

08007ee8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007efc:	f107 030b 	add.w	r3, r7, #11
 8007f00:	2201      	movs	r2, #1
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff ff7e 	bl	8007e06 <_I2CWrite>
 8007f0a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f12:	23ec      	movs	r3, #236	; 0xec
 8007f14:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007f16:	e00c      	b.n	8007f32 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff ff91 	bl	8007e44 <_I2CRead>
 8007f22:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f2a:	23ec      	movs	r3, #236	; 0xec
 8007f2c:	75fb      	strb	r3, [r7, #23]
 8007f2e:	e000      	b.n	8007f32 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007f30:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007f54:	4a0b      	ldr	r2, [pc, #44]	; (8007f84 <VL53L0X_WrByte+0x44>)
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8007f5a:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <VL53L0X_WrByte+0x44>)
 8007f5c:	78bb      	ldrb	r3, [r7, #2]
 8007f5e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007f60:	2202      	movs	r2, #2
 8007f62:	4908      	ldr	r1, [pc, #32]	; (8007f84 <VL53L0X_WrByte+0x44>)
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ff4e 	bl	8007e06 <_I2CWrite>
 8007f6a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f72:	23ec      	movs	r3, #236	; 0xec
 8007f74:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000424 	.word	0x20000424

08007f88 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
 8007f94:	4613      	mov	r3, r2
 8007f96:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007f9c:	4a0e      	ldr	r2, [pc, #56]	; (8007fd8 <VL53L0X_WrWord+0x50>)
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8007fa2:	883b      	ldrh	r3, [r7, #0]
 8007fa4:	0a1b      	lsrs	r3, r3, #8
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <VL53L0X_WrWord+0x50>)
 8007fac:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007fae:	883b      	ldrh	r3, [r7, #0]
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <VL53L0X_WrWord+0x50>)
 8007fb4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	4907      	ldr	r1, [pc, #28]	; (8007fd8 <VL53L0X_WrWord+0x50>)
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff ff23 	bl	8007e06 <_I2CWrite>
 8007fc0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007fc8:	23ec      	movs	r3, #236	; 0xec
 8007fca:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000424 	.word	0x20000424

08007fdc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4603      	mov	r3, r0
 8007fec:	70fb      	strb	r3, [r7, #3]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70bb      	strb	r3, [r7, #2]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007ffa:	f107 020e 	add.w	r2, r7, #14
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f81e 	bl	8008044 <VL53L0X_RdByte>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800800c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d110      	bne.n	8008036 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008014:	7bba      	ldrb	r2, [r7, #14]
 8008016:	78bb      	ldrb	r3, [r7, #2]
 8008018:	4013      	ands	r3, r2
 800801a:	b2da      	uxtb	r2, r3
 800801c:	787b      	ldrb	r3, [r7, #1]
 800801e:	4313      	orrs	r3, r2
 8008020:	b2db      	uxtb	r3, r3
 8008022:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008024:	7bba      	ldrb	r2, [r7, #14]
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff ff88 	bl	8007f40 <VL53L0X_WrByte>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
 8008034:	e000      	b.n	8008038 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008036:	bf00      	nop
done:
    return Status;
 8008038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	460b      	mov	r3, r1
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008056:	f107 030b 	add.w	r3, r7, #11
 800805a:	2201      	movs	r2, #1
 800805c:	4619      	mov	r1, r3
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fed1 	bl	8007e06 <_I2CWrite>
 8008064:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800806c:	23ec      	movs	r3, #236	; 0xec
 800806e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008070:	e00c      	b.n	800808c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008072:	2201      	movs	r2, #1
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fee4 	bl	8007e44 <_I2CRead>
 800807c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008084:	23ec      	movs	r3, #236	; 0xec
 8008086:	75fb      	strb	r3, [r7, #23]
 8008088:	e000      	b.n	800808c <VL53L0X_RdByte+0x48>
    }
done:
 800808a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800808c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	460b      	mov	r3, r1
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80080aa:	f107 030b 	add.w	r3, r7, #11
 80080ae:	2201      	movs	r2, #1
 80080b0:	4619      	mov	r1, r3
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff fea7 	bl	8007e06 <_I2CWrite>
 80080b8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80080c0:	23ec      	movs	r3, #236	; 0xec
 80080c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80080c4:	e017      	b.n	80080f6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80080c6:	2202      	movs	r2, #2
 80080c8:	490e      	ldr	r1, [pc, #56]	; (8008104 <VL53L0X_RdWord+0x6c>)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff feba 	bl	8007e44 <_I2CRead>
 80080d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80080d8:	23ec      	movs	r3, #236	; 0xec
 80080da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80080dc:	e00b      	b.n	80080f6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <VL53L0X_RdWord+0x6c>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <VL53L0X_RdWord+0x6c>)
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80080f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000424 	.word	0x20000424

08008108 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	460b      	mov	r3, r1
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800811a:	f107 030b 	add.w	r3, r7, #11
 800811e:	2201      	movs	r2, #1
 8008120:	4619      	mov	r1, r3
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff fe6f 	bl	8007e06 <_I2CWrite>
 8008128:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008130:	23ec      	movs	r3, #236	; 0xec
 8008132:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008134:	e01b      	b.n	800816e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008136:	2204      	movs	r2, #4
 8008138:	4910      	ldr	r1, [pc, #64]	; (800817c <VL53L0X_RdDWord+0x74>)
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fe82 	bl	8007e44 <_I2CRead>
 8008140:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008148:	23ec      	movs	r3, #236	; 0xec
 800814a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800814c:	e00f      	b.n	800816e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800814e:	4b0b      	ldr	r3, [pc, #44]	; (800817c <VL53L0X_RdDWord+0x74>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	061a      	lsls	r2, r3, #24
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <VL53L0X_RdDWord+0x74>)
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	441a      	add	r2, r3
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <VL53L0X_RdDWord+0x74>)
 800815e:	789b      	ldrb	r3, [r3, #2]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	4413      	add	r3, r2
 8008164:	4a05      	ldr	r2, [pc, #20]	; (800817c <VL53L0X_RdDWord+0x74>)
 8008166:	78d2      	ldrb	r2, [r2, #3]
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800816e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20000424 	.word	0x20000424

08008180 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800818c:	2002      	movs	r0, #2
 800818e:	f7f8 fce7 	bl	8000b60 <HAL_Delay>
    return status;
 8008192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	4603      	mov	r3, r0
 80081a6:	460a      	mov	r2, r1
 80081a8:	80fb      	strh	r3, [r7, #6]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80081ae:	88fa      	ldrh	r2, [r7, #6]
 80081b0:	88bb      	ldrh	r3, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	2b3f      	cmp	r3, #63	; 0x3f
 80081b6:	dc01      	bgt.n	80081bc <bytestowrite+0x1e>
 80081b8:	88fb      	ldrh	r3, [r7, #6]
 80081ba:	e003      	b.n	80081c4 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80081bc:	88bb      	ldrh	r3, [r7, #4]
 80081be:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80081c2:	b29b      	uxth	r3, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
	...

080081d0 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08e      	sub	sp, #56	; 0x38
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	60ba      	str	r2, [r7, #8]
 80081d8:	461a      	mov	r2, r3
 80081da:	4603      	mov	r3, r0
 80081dc:	81fb      	strh	r3, [r7, #14]
 80081de:	460b      	mov	r3, r1
 80081e0:	81bb      	strh	r3, [r7, #12]
 80081e2:	4613      	mov	r3, r2
 80081e4:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80081e6:	2306      	movs	r3, #6
 80081e8:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80081ea:	89fb      	ldrh	r3, [r7, #14]
 80081ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80081ee:	88fa      	ldrh	r2, [r7, #6]
 80081f0:	89bb      	ldrh	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da00      	bge.n	80081fa <EEPROM_Write+0x2a>
 80081f8:	333f      	adds	r3, #63	; 0x3f
 80081fa:	119b      	asrs	r3, r3, #6
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	89fb      	ldrh	r3, [r7, #14]
 8008200:	4413      	add	r3, r2
 8008202:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8008204:	8b7a      	ldrh	r2, [r7, #26]
 8008206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	b29b      	uxth	r3, r3
 800820c:	3301      	adds	r3, #1
 800820e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8008210:	2300      	movs	r3, #0
 8008212:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8008214:	2300      	movs	r3, #0
 8008216:	623b      	str	r3, [r7, #32]
 8008218:	e034      	b.n	8008284 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800821a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	fa02 f303 	lsl.w	r3, r2, r3
 8008222:	b21a      	sxth	r2, r3
 8008224:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	b21b      	sxth	r3, r3
 800822c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800822e:	89ba      	ldrh	r2, [r7, #12]
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff ffb2 	bl	800819e <bytestowrite>
 800823a:	4603      	mov	r3, r0
 800823c:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800823e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	4413      	add	r3, r2
 8008244:	8af9      	ldrh	r1, [r7, #22]
 8008246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	8aba      	ldrh	r2, [r7, #20]
 800824e:	9201      	str	r2, [sp, #4]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2302      	movs	r3, #2
 8008254:	460a      	mov	r2, r1
 8008256:	21a0      	movs	r1, #160	; 0xa0
 8008258:	480f      	ldr	r0, [pc, #60]	; (8008298 <EEPROM_Write+0xc8>)
 800825a:	f7f9 fc61 	bl	8001b20 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800825e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008260:	3301      	adds	r3, #1
 8008262:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8008264:	2300      	movs	r3, #0
 8008266:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8008268:	88fa      	ldrh	r2, [r7, #6]
 800826a:	8abb      	ldrh	r3, [r7, #20]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8008270:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008272:	8abb      	ldrh	r3, [r7, #20]
 8008274:	4413      	add	r3, r2
 8008276:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8008278:	2005      	movs	r0, #5
 800827a:	f7f8 fc71 	bl	8000b60 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	3301      	adds	r3, #1
 8008282:	623b      	str	r3, [r7, #32]
 8008284:	8b3b      	ldrh	r3, [r7, #24]
 8008286:	6a3a      	ldr	r2, [r7, #32]
 8008288:	429a      	cmp	r2, r3
 800828a:	dbc6      	blt.n	800821a <EEPROM_Write+0x4a>
	}
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	3728      	adds	r7, #40	; 0x28
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	2000033c 	.word	0x2000033c

0800829c <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
 80082ae:	e00b      	b.n	80082c8 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80082b0:	7bfa      	ldrb	r2, [r7, #15]
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	440b      	add	r3, r1
 80082b8:	3210      	adds	r2, #16
 80082ba:	443a      	add	r2, r7
 80082bc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80082c0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3301      	adds	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d9f0      	bls.n	80082b0 <float2Bytes+0x14>
    }

}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr
	...

080082dc <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	603a      	str	r2, [r7, #0]
 80082e6:	80fb      	strh	r3, [r7, #6]
 80082e8:	460b      	mov	r3, r1
 80082ea:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	4806      	ldr	r0, [pc, #24]	; (8008308 <EEPROM_Write_NUM+0x2c>)
 80082f0:	f7ff ffd4 	bl	800829c <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 80082f4:	88b9      	ldrh	r1, [r7, #4]
 80082f6:	88f8      	ldrh	r0, [r7, #6]
 80082f8:	2304      	movs	r3, #4
 80082fa:	4a03      	ldr	r2, [pc, #12]	; (8008308 <EEPROM_Write_NUM+0x2c>)
 80082fc:	f7ff ff68 	bl	80081d0 <EEPROM_Write>
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000464 	.word	0x20000464

0800830c <peripherialsInit>:
uint8_t state_flag[3] = {0, 0, 0}; // variable that tells if the full cycle of measurement was finnished
//full cycle is considered as finnished when state_flag = {1, 1, 1} after cycle they will be reseted to 0
// {0,0,0} <==> {measurement, write to EEPROM, display}

void peripherialsInit()
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  TM1637_SetBrightness(3);
 8008310:	2003      	movs	r0, #3
 8008312:	f000 f9b5 	bl	8008680 <TM1637_SetBrightness>
  VL53_init();
 8008316:	f000 fa41 	bl	800879c <VL53_init>
  HAL_TIM_Base_Start_IT(&htim1);
 800831a:	4802      	ldr	r0, [pc, #8]	; (8008324 <peripherialsInit+0x18>)
 800831c:	f7fa fd76 	bl	8002e0c <HAL_TIM_Base_Start_IT>
}
 8008320:	bf00      	nop
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000390 	.word	0x20000390

08008328 <switchMode>:

void switchMode()
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
	/* Function that switches mode from 0 = single to 1 = cont*/
	if(mode == 0)
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <switchMode+0x2c>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <switchMode+0x14>
	{
		mode = 1;
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <switchMode+0x2c>)
 8008336:	2201      	movs	r2, #1
 8008338:	701a      	strb	r2, [r3, #0]
	}
	else if (mode == 1)
	{
		mode = 0;
	}
}
 800833a:	e006      	b.n	800834a <switchMode+0x22>
	else if (mode == 1)
 800833c:	4b05      	ldr	r3, [pc, #20]	; (8008354 <switchMode+0x2c>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d102      	bne.n	800834a <switchMode+0x22>
		mode = 0;
 8008344:	4b03      	ldr	r3, [pc, #12]	; (8008354 <switchMode+0x2c>)
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000469 	.word	0x20000469

08008358 <Compute>:

void Compute(uint8_t mode, uint8_t status)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	460a      	mov	r2, r1
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	4613      	mov	r3, r2
 8008366:	71bb      	strb	r3, [r7, #6]
	if (mode == 0)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <Compute+0x20>
	{
		singleMode(status);
 800836e:	79bb      	ldrb	r3, [r7, #6]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 f80d 	bl	8008390 <singleMode>
//	  	}
//	  	else if (state_flag[i] == 1)
//	  	{
//	  		cycleEnd();
//	  	}
}
 8008376:	e006      	b.n	8008386 <Compute+0x2e>
	else if (mode == 1)
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d103      	bne.n	8008386 <Compute+0x2e>
		continuousMode(status);
 800837e:	79bb      	ldrb	r3, [r7, #6]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 f825 	bl	80083d0 <continuousMode>
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <singleMode>:
 * status = 3 timer
 *
 *  */

void singleMode(uint8_t status)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d102      	bne.n	80083a6 <singleMode+0x16>
	{
		status = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == 3)
	{

	}
}
 80083a4:	e00e      	b.n	80083c4 <singleMode+0x34>
	else if (status == 2)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d10b      	bne.n	80083c4 <singleMode+0x34>
		readMeasure();
 80083ac:	f000 f830 	bl	8008410 <readMeasure>
		Display(Measure);
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <singleMode+0x3c>)
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f84f 	bl	8008458 <Display>
		saveToMem(Measure);
 80083ba:	4b04      	ldr	r3, [pc, #16]	; (80083cc <singleMode+0x3c>)
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 f85e 	bl	8008480 <saveToMem>
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	2000046c 	.word	0x2000046c

080083d0 <continuousMode>:
void continuousMode(uint8_t status)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	71fb      	strb	r3, [r7, #7]
	uint16_t Measure = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	81fb      	strh	r3, [r7, #14]
	if (status == 1)
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d102      	bne.n	80083ea <continuousMode+0x1a>
	{
		readMeasure();
 80083e4:	f000 f814 	bl	8008410 <readMeasure>
	}
	else if (status == 3)
	{
		Display(Measure);
	}
}
 80083e8:	e00e      	b.n	8008408 <continuousMode+0x38>
	else if (status == 2)
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d104      	bne.n	80083fa <continuousMode+0x2a>
		saveToMem(Measure);
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f844 	bl	8008480 <saveToMem>
}
 80083f8:	e006      	b.n	8008408 <continuousMode+0x38>
	else if (status == 3)
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d103      	bne.n	8008408 <continuousMode+0x38>
		Display(Measure);
 8008400:	89fb      	ldrh	r3, [r7, #14]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f828 	bl	8008458 <Display>
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <readMeasure>:
//		state_flag[i] = 0;
//	}
//}

void readMeasure()
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
	/*Function that reads distance from VL530L0X and returns as uint8_t */
	//measure if data is ready
	if(TofDataRead == 1)
 8008414:	4b0d      	ldr	r3, [pc, #52]	; (800844c <readMeasure+0x3c>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d108      	bne.n	800842e <readMeasure+0x1e>
		{
			Measure = VL53_MEASURE();
 800841c:	f000 fa16 	bl	800884c <VL53_MEASURE>
 8008420:	4603      	mov	r3, r0
 8008422:	461a      	mov	r2, r3
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <readMeasure+0x40>)
 8008426:	801a      	strh	r2, [r3, #0]
			TofDataRead = 0;
 8008428:	4b08      	ldr	r3, [pc, #32]	; (800844c <readMeasure+0x3c>)
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
		}
		//data limit
	if (Measure > 1250)
 800842e:	4b08      	ldr	r3, [pc, #32]	; (8008450 <readMeasure+0x40>)
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008436:	4293      	cmp	r3, r2
 8008438:	d903      	bls.n	8008442 <readMeasure+0x32>
		{
			Measure = 1250;
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <readMeasure+0x40>)
 800843c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008440:	801a      	strh	r2, [r3, #0]
		}
	state_flag[0] = 1; //Change temporary progress flag to 1 (1 = task done)
 8008442:	4b04      	ldr	r3, [pc, #16]	; (8008454 <readMeasure+0x44>)
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
}
 8008448:	bf00      	nop
 800844a:	bd80      	pop	{r7, pc}
 800844c:	2000046a 	.word	0x2000046a
 8008450:	2000046c 	.word	0x2000046c
 8008454:	20000470 	.word	0x20000470

08008458 <Display>:

void Display(uint16_t measure)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	80fb      	strh	r3, [r7, #6]
	TM1637_DisplayDecimal(measure, 0);
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2100      	movs	r1, #0
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f89c 	bl	80085a4 <TM1637_DisplayDecimal>
	state_flag[2] = 1; //Change temporary progress flag to 1 (1 = task done)
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <Display+0x24>)
 800846e:	2201      	movs	r2, #1
 8008470:	709a      	strb	r2, [r3, #2]
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000470 	.word	0x20000470

08008480 <saveToMem>:

void saveToMem(uint16_t measure)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	80fb      	strh	r3, [r7, #6]
	EEPROM_Write_NUM(EEPROM_PAGE, EEPROM_OFFSET, measure);
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	4618      	mov	r0, r3
 800848e:	f7f7 ff13 	bl	80002b8 <__aeabi_ui2f>
 8008492:	4603      	mov	r3, r0
 8008494:	461a      	mov	r2, r3
 8008496:	2101      	movs	r1, #1
 8008498:	2003      	movs	r0, #3
 800849a:	f7ff ff1f 	bl	80082dc <EEPROM_Write_NUM>
	state_flag[1] = 1; //Change temporary progress flag to 1 (1 = task done)
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <saveToMem+0x2c>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	705a      	strb	r2, [r3, #1]
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000470 	.word	0x20000470

080084b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	80fb      	strh	r3, [r7, #6]
	//save button
	if (GPIO_Pin == B2_Pin)
 80084ba:	88fb      	ldrh	r3, [r7, #6]
 80084bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c0:	d106      	bne.n	80084d0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80084c2:	2120      	movs	r1, #32
 80084c4:	480f      	ldr	r0, [pc, #60]	; (8008504 <HAL_GPIO_EXTI_Callback+0x54>)
 80084c6:	f7f8 fe4b 	bl	8001160 <HAL_GPIO_TogglePin>
		status = 2;
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <HAL_GPIO_EXTI_Callback+0x58>)
 80084cc:	2202      	movs	r2, #2
 80084ce:	701a      	strb	r2, [r3, #0]
	}
	//change state button
	if (GPIO_Pin == B1_Pin)
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d6:	d105      	bne.n	80084e4 <HAL_GPIO_EXTI_Callback+0x34>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80084d8:	2120      	movs	r1, #32
 80084da:	480a      	ldr	r0, [pc, #40]	; (8008504 <HAL_GPIO_EXTI_Callback+0x54>)
 80084dc:	f7f8 fe40 	bl	8001160 <HAL_GPIO_TogglePin>
		switchMode();
 80084e0:	f7ff ff22 	bl	8008328 <switchMode>
	}
	if(GPIO_Pin == TOF_INT_Pin)
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d107      	bne.n	80084fa <HAL_GPIO_EXTI_Callback+0x4a>
	{
		VL53_CLEAR_INTERRUPT_DATA();
 80084ea:	f000 f9bd 	bl	8008868 <VL53_CLEAR_INTERRUPT_DATA>
		TofDataRead = 1;
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <HAL_GPIO_EXTI_Callback+0x5c>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]
		status = 1;
 80084f4:	4b04      	ldr	r3, [pc, #16]	; (8008508 <HAL_GPIO_EXTI_Callback+0x58>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	701a      	strb	r2, [r3, #0]
	}
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	40010800 	.word	0x40010800
 8008508:	20000468 	.word	0x20000468
 800850c:	2000046a 	.word	0x2000046a

08008510 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a06      	ldr	r2, [pc, #24]	; (8008538 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d106      	bne.n	8008530 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8008522:	2120      	movs	r1, #32
 8008524:	4805      	ldr	r0, [pc, #20]	; (800853c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008526:	f7f8 fe1b 	bl	8001160 <HAL_GPIO_TogglePin>
		status = 3;
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800852c:	2203      	movs	r2, #3
 800852e:	701a      	strb	r2, [r3, #0]
	}
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40012c00 	.word	0x40012c00
 800853c:	40010800 	.word	0x40010800
 8008540:	20000468 	.word	0x20000468

08008544 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8008548:	2201      	movs	r2, #1
 800854a:	2180      	movs	r1, #128	; 0x80
 800854c:	4802      	ldr	r0, [pc, #8]	; (8008558 <TM1637_ClkHigh+0x14>)
 800854e:	f7f8 fdef 	bl	8001130 <HAL_GPIO_WritePin>
}
 8008552:	bf00      	nop
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	40011000 	.word	0x40011000

0800855c <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8008560:	2200      	movs	r2, #0
 8008562:	2180      	movs	r1, #128	; 0x80
 8008564:	4802      	ldr	r0, [pc, #8]	; (8008570 <TM1637_ClkLow+0x14>)
 8008566:	f7f8 fde3 	bl	8001130 <HAL_GPIO_WritePin>
}
 800856a:	bf00      	nop
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40011000 	.word	0x40011000

08008574 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 8008578:	2201      	movs	r2, #1
 800857a:	2101      	movs	r1, #1
 800857c:	4802      	ldr	r0, [pc, #8]	; (8008588 <TM1637_DataHigh+0x14>)
 800857e:	f7f8 fdd7 	bl	8001130 <HAL_GPIO_WritePin>
}
 8008582:	bf00      	nop
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40010c00 	.word	0x40010c00

0800858c <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8008590:	2200      	movs	r2, #0
 8008592:	2101      	movs	r1, #1
 8008594:	4802      	ldr	r0, [pc, #8]	; (80085a0 <TM1637_DataLow+0x14>)
 8008596:	f7f8 fdcb 	bl	8001130 <HAL_GPIO_WritePin>
}
 800859a:	bf00      	nop
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40010c00 	.word	0x40010c00

080085a4 <TM1637_DisplayDecimal>:
		TM1637_DisplayDecimal(i++, 0);
	}
}

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80085ae:	2300      	movs	r3, #0
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e032      	b.n	800861a <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4b30      	ldr	r3, [pc, #192]	; (8008678 <TM1637_DisplayDecimal+0xd4>)
 80085b8:	fb83 2301 	smull	r2, r3, r3, r1
 80085bc:	109a      	asrs	r2, r3, #2
 80085be:	17cb      	asrs	r3, r1, #31
 80085c0:	1ad2      	subs	r2, r2, r3
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	1aca      	subs	r2, r1, r3
 80085cc:	4b2b      	ldr	r3, [pc, #172]	; (800867c <TM1637_DisplayDecimal+0xd8>)
 80085ce:	5c99      	ldrb	r1, [r3, r2]
 80085d0:	f107 020c 	add.w	r2, r7, #12
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4413      	add	r3, r2
 80085d8:	460a      	mov	r2, r1
 80085da:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d110      	bne.n	8008604 <TM1637_DisplayDecimal+0x60>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00d      	beq.n	8008604 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 80085e8:	f107 020c 	add.w	r2, r7, #12
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	4413      	add	r3, r2
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085f6:	b2d9      	uxtb	r1, r3
 80085f8:	f107 020c 	add.w	r2, r7, #12
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4413      	add	r3, r2
 8008600:	460a      	mov	r2, r1
 8008602:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1c      	ldr	r2, [pc, #112]	; (8008678 <TM1637_DisplayDecimal+0xd4>)
 8008608:	fb82 1203 	smull	r1, r2, r2, r3
 800860c:	1092      	asrs	r2, r2, #2
 800860e:	17db      	asrs	r3, r3, #31
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	3301      	adds	r3, #1
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b03      	cmp	r3, #3
 800861e:	ddc9      	ble.n	80085b4 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8008620:	f000 f843 	bl	80086aa <TM1637_Start>
    TM1637_WriteByte(0x40);
 8008624:	2040      	movs	r0, #64	; 0x40
 8008626:	f000 f872 	bl	800870e <TM1637_WriteByte>
    TM1637_ReadResult();
 800862a:	f000 f860 	bl	80086ee <TM1637_ReadResult>
    TM1637_Stop();
 800862e:	f000 f849 	bl	80086c4 <TM1637_Stop>

    TM1637_Start();
 8008632:	f000 f83a 	bl	80086aa <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8008636:	20c0      	movs	r0, #192	; 0xc0
 8008638:	f000 f869 	bl	800870e <TM1637_WriteByte>
    TM1637_ReadResult();
 800863c:	f000 f857 	bl	80086ee <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	e00e      	b.n	8008664 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f1c3 0303 	rsb	r3, r3, #3
 800864c:	3318      	adds	r3, #24
 800864e:	443b      	add	r3, r7
 8008650:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f85a 	bl	800870e <TM1637_WriteByte>
        TM1637_ReadResult();
 800865a:	f000 f848 	bl	80086ee <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3301      	adds	r3, #1
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b03      	cmp	r3, #3
 8008668:	dded      	ble.n	8008646 <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 800866a:	f000 f82b 	bl	80086c4 <TM1637_Stop>
}
 800866e:	bf00      	nop
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	66666667 	.word	0x66666667
 800867c:	08008958 	.word	0x08008958

08008680 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800868a:	f000 f80e 	bl	80086aa <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	3b79      	subs	r3, #121	; 0x79
 8008692:	b2db      	uxtb	r3, r3
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f83a 	bl	800870e <TM1637_WriteByte>
    TM1637_ReadResult();
 800869a:	f000 f828 	bl	80086ee <TM1637_ReadResult>
    TM1637_Stop();
 800869e:	f000 f811 	bl	80086c4 <TM1637_Stop>
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <TM1637_Start>:

void TM1637_Start(void)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80086ae:	f7ff ff49 	bl	8008544 <TM1637_ClkHigh>
    TM1637_DataHigh();
 80086b2:	f7ff ff5f 	bl	8008574 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80086b6:	2002      	movs	r0, #2
 80086b8:	f000 f853 	bl	8008762 <TM1637_DelayUsec>
    TM1637_DataLow();
 80086bc:	f7ff ff66 	bl	800858c <TM1637_DataLow>
}
 80086c0:	bf00      	nop
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80086c8:	f7ff ff48 	bl	800855c <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80086cc:	2002      	movs	r0, #2
 80086ce:	f000 f848 	bl	8008762 <TM1637_DelayUsec>
    TM1637_DataLow();
 80086d2:	f7ff ff5b 	bl	800858c <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80086d6:	2002      	movs	r0, #2
 80086d8:	f000 f843 	bl	8008762 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80086dc:	f7ff ff32 	bl	8008544 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80086e0:	2002      	movs	r0, #2
 80086e2:	f000 f83e 	bl	8008762 <TM1637_DelayUsec>
    TM1637_DataHigh();
 80086e6:	f7ff ff45 	bl	8008574 <TM1637_DataHigh>
}
 80086ea:	bf00      	nop
 80086ec:	bd80      	pop	{r7, pc}

080086ee <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80086f2:	f7ff ff33 	bl	800855c <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80086f6:	2005      	movs	r0, #5
 80086f8:	f000 f833 	bl	8008762 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 80086fc:	f7ff ff22 	bl	8008544 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8008700:	2002      	movs	r0, #2
 8008702:	f000 f82e 	bl	8008762 <TM1637_DelayUsec>
    TM1637_ClkLow();
 8008706:	f7ff ff29 	bl	800855c <TM1637_ClkLow>
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}

0800870e <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	4603      	mov	r3, r0
 8008716:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	e019      	b.n	8008752 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 800871e:	f7ff ff1d 	bl	800855c <TM1637_ClkLow>
		if (b & 0x01) {
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 800872c:	f7ff ff22 	bl	8008574 <TM1637_DataHigh>
 8008730:	e001      	b.n	8008736 <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8008732:	f7ff ff2b 	bl	800858c <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8008736:	2003      	movs	r0, #3
 8008738:	f000 f813 	bl	8008762 <TM1637_DelayUsec>
		b >>= 1;
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	085b      	lsrs	r3, r3, #1
 8008740:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8008742:	f7ff feff 	bl	8008544 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8008746:	2003      	movs	r0, #3
 8008748:	f000 f80b 	bl	8008762 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b07      	cmp	r3, #7
 8008756:	dde2      	ble.n	800871e <TM1637_WriteByte+0x10>
	}
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800876a:	e00d      	b.n	8008788 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e003      	b.n	800877a <TM1637_DelayUsec+0x18>
					__NOP();
 8008772:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008780:	dbf7      	blt.n	8008772 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1ee      	bne.n	800876c <TM1637_DelayUsec+0xa>
        }
    }
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr
	...

0800879c <VL53_init>:
VL53L0X_RangingMeasurementData_t RangingData;
VL53L0X_Dev_t  vl53l0x_c; // center module
VL53L0X_DEV    Dev = &vl53l0x_c;

void VL53_init()
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c2;
 80087a2:	4b27      	ldr	r3, [pc, #156]	; (8008840 <VL53_init+0xa4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a27      	ldr	r2, [pc, #156]	; (8008844 <VL53_init+0xa8>)
 80087a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <VL53_init+0xa4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2252      	movs	r2, #82	; 0x52
 80087b2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80087b6:	2200      	movs	r2, #0
 80087b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087bc:	4822      	ldr	r0, [pc, #136]	; (8008848 <VL53_init+0xac>)
 80087be:	f7f8 fcb7 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80087c2:	2014      	movs	r0, #20
 80087c4:	f7f8 f9cc 	bl	8000b60 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 80087c8:	2201      	movs	r2, #1
 80087ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ce:	481e      	ldr	r0, [pc, #120]	; (8008848 <VL53_init+0xac>)
 80087d0:	f7f8 fcae 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80087d4:	2014      	movs	r0, #20
 80087d6:	f7f8 f9c3 	bl	8000b60 <HAL_Delay>

	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80087da:	2007      	movs	r0, #7
 80087dc:	f7f8 fb09 	bl	8000df2 <HAL_NVIC_DisableIRQ>

	VL53L0X_WaitDeviceBooted( Dev );
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <VL53_init+0xa4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fb fa97 	bl	8003d18 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80087ea:	4b15      	ldr	r3, [pc, #84]	; (8008840 <VL53_init+0xa4>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fa ffac 	bl	800374c <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80087f4:	4b12      	ldr	r3, [pc, #72]	; (8008840 <VL53_init+0xa4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fb f90b 	bl	8003a14 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <VL53_init+0xa4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1c7a      	adds	r2, r7, #1
 8008804:	1cb9      	adds	r1, r7, #2
 8008806:	4618      	mov	r0, r3
 8008808:	f7fb ff88 	bl	800471c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800880c:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <VL53_init+0xa4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	1cfa      	adds	r2, r7, #3
 8008812:	1d39      	adds	r1, r7, #4
 8008814:	4618      	mov	r0, r3
 8008816:	f7fc fc0d 	bl	8005034 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <VL53_init+0xa4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2101      	movs	r1, #1
 8008820:	4618      	mov	r0, r3
 8008822:	f7fb fb17 	bl	8003e54 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(Dev);
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <VL53_init+0xa4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f7fb fff2 	bl	8004814 <VL53L0X_StartMeasurement>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8008830:	2007      	movs	r0, #7
 8008832:	f7f8 fad0 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200002c8 	.word	0x200002c8
 8008844:	2000033c 	.word	0x2000033c
 8008848:	40010800 	.word	0x40010800

0800884c <VL53_MEASURE>:

uint16_t VL53_MEASURE()
{	uint16_t Measure = RangingData.RangeMilliMeter;
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	4b04      	ldr	r3, [pc, #16]	; (8008864 <VL53_MEASURE+0x18>)
 8008854:	891b      	ldrh	r3, [r3, #8]
 8008856:	80fb      	strh	r3, [r7, #6]
	return Measure;
 8008858:	88fb      	ldrh	r3, [r7, #6]
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr
 8008864:	20000474 	.word	0x20000474

08008868 <VL53_CLEAR_INTERRUPT_DATA>:

void VL53_CLEAR_INTERRUPT_DATA()
{
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
	VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4906      	ldr	r1, [pc, #24]	; (800888c <VL53_CLEAR_INTERRUPT_DATA+0x24>)
 8008872:	4618      	mov	r0, r3
 8008874:	f7fc f8d0 	bl	8004a18 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8008878:	4b03      	ldr	r3, [pc, #12]	; (8008888 <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2104      	movs	r1, #4
 800887e:	4618      	mov	r0, r3
 8008880:	f7fc fb76 	bl	8004f70 <VL53L0X_ClearInterruptMask>
}
 8008884:	bf00      	nop
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200002c8 	.word	0x200002c8
 800888c:	20000474 	.word	0x20000474

08008890 <memset>:
 8008890:	4603      	mov	r3, r0
 8008892:	4402      	add	r2, r0
 8008894:	4293      	cmp	r3, r2
 8008896:	d100      	bne.n	800889a <memset+0xa>
 8008898:	4770      	bx	lr
 800889a:	f803 1b01 	strb.w	r1, [r3], #1
 800889e:	e7f9      	b.n	8008894 <memset+0x4>

080088a0 <__libc_init_array>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	2600      	movs	r6, #0
 80088a4:	4d0c      	ldr	r5, [pc, #48]	; (80088d8 <__libc_init_array+0x38>)
 80088a6:	4c0d      	ldr	r4, [pc, #52]	; (80088dc <__libc_init_array+0x3c>)
 80088a8:	1b64      	subs	r4, r4, r5
 80088aa:	10a4      	asrs	r4, r4, #2
 80088ac:	42a6      	cmp	r6, r4
 80088ae:	d109      	bne.n	80088c4 <__libc_init_array+0x24>
 80088b0:	f000 f830 	bl	8008914 <_init>
 80088b4:	2600      	movs	r6, #0
 80088b6:	4d0a      	ldr	r5, [pc, #40]	; (80088e0 <__libc_init_array+0x40>)
 80088b8:	4c0a      	ldr	r4, [pc, #40]	; (80088e4 <__libc_init_array+0x44>)
 80088ba:	1b64      	subs	r4, r4, r5
 80088bc:	10a4      	asrs	r4, r4, #2
 80088be:	42a6      	cmp	r6, r4
 80088c0:	d105      	bne.n	80088ce <__libc_init_array+0x2e>
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c8:	4798      	blx	r3
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7ee      	b.n	80088ac <__libc_init_array+0xc>
 80088ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d2:	4798      	blx	r3
 80088d4:	3601      	adds	r6, #1
 80088d6:	e7f2      	b.n	80088be <__libc_init_array+0x1e>
 80088d8:	0800896c 	.word	0x0800896c
 80088dc:	0800896c 	.word	0x0800896c
 80088e0:	0800896c 	.word	0x0800896c
 80088e4:	08008970 	.word	0x08008970

080088e8 <strcpy>:
 80088e8:	4603      	mov	r3, r0
 80088ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ee:	f803 2b01 	strb.w	r2, [r3], #1
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	d1f9      	bne.n	80088ea <strcpy+0x2>
 80088f6:	4770      	bx	lr

080088f8 <memcpy>:
 80088f8:	440a      	add	r2, r1
 80088fa:	4291      	cmp	r1, r2
 80088fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008900:	d100      	bne.n	8008904 <memcpy+0xc>
 8008902:	4770      	bx	lr
 8008904:	b510      	push	{r4, lr}
 8008906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800890a:	4291      	cmp	r1, r2
 800890c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008910:	d1f9      	bne.n	8008906 <memcpy+0xe>
 8008912:	bd10      	pop	{r4, pc}

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
