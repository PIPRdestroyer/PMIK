
Projekt_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f94  08002f94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f94  08002f94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002fa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002fa8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009dcc  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cec  00000000  00000000  00029e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000797  00000000  00000000  0002c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001766c  00000000  00000000  0002cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e37f  00000000  00000000  00044303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084612  00000000  00000000  00052682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002748  00000000  00000000  000d6c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000d93dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f3c 	.word	0x08002f3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f3c 	.word	0x08002f3c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2uiz>:
 8000368:	0042      	lsls	r2, r0, #1
 800036a:	d20e      	bcs.n	800038a <__aeabi_f2uiz+0x22>
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000370:	d30b      	bcc.n	800038a <__aeabi_f2uiz+0x22>
 8000372:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d409      	bmi.n	8000390 <__aeabi_f2uiz+0x28>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000384:	fa23 f002 	lsr.w	r0, r3, r2
 8000388:	4770      	bx	lr
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	4770      	bx	lr
 8000390:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000394:	d101      	bne.n	800039a <__aeabi_f2uiz+0x32>
 8000396:	0242      	lsls	r2, r0, #9
 8000398:	d102      	bne.n	80003a0 <__aeabi_f2uiz+0x38>
 800039a:	f04f 30ff 	mov.w	r0, #4294967295
 800039e:	4770      	bx	lr
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	460a      	mov	r2, r1
 80003b2:	80fb      	strh	r3, [r7, #6]
 80003b4:	4613      	mov	r3, r2
 80003b6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80003b8:	88fa      	ldrh	r2, [r7, #6]
 80003ba:	88bb      	ldrh	r3, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	2b3f      	cmp	r3, #63	; 0x3f
 80003c0:	dc01      	bgt.n	80003c6 <bytestowrite+0x1e>
 80003c2:	88fb      	ldrh	r3, [r7, #6]
 80003c4:	e003      	b.n	80003ce <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80003c6:	88bb      	ldrh	r3, [r7, #4]
 80003c8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80003cc:	b29b      	uxth	r3, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08e      	sub	sp, #56	; 0x38
 80003dc:	af04      	add	r7, sp, #16
 80003de:	60ba      	str	r2, [r7, #8]
 80003e0:	461a      	mov	r2, r3
 80003e2:	4603      	mov	r3, r0
 80003e4:	81fb      	strh	r3, [r7, #14]
 80003e6:	460b      	mov	r3, r1
 80003e8:	81bb      	strh	r3, [r7, #12]
 80003ea:	4613      	mov	r3, r2
 80003ec:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80003ee:	2306      	movs	r3, #6
 80003f0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80003f6:	88fa      	ldrh	r2, [r7, #6]
 80003f8:	89bb      	ldrh	r3, [r7, #12]
 80003fa:	4413      	add	r3, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	da00      	bge.n	8000402 <EEPROM_Write+0x2a>
 8000400:	333f      	adds	r3, #63	; 0x3f
 8000402:	119b      	asrs	r3, r3, #6
 8000404:	b29a      	uxth	r2, r3
 8000406:	89fb      	ldrh	r3, [r7, #14]
 8000408:	4413      	add	r3, r2
 800040a:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 800040c:	8b7a      	ldrh	r2, [r7, #26]
 800040e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29b      	uxth	r3, r3
 8000414:	3301      	adds	r3, #1
 8000416:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000418:	2300      	movs	r3, #0
 800041a:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
 8000420:	e034      	b.n	800048c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000422:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	b21a      	sxth	r2, r3
 800042c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000430:	4313      	orrs	r3, r2
 8000432:	b21b      	sxth	r3, r3
 8000434:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000436:	89ba      	ldrh	r2, [r7, #12]
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ffb3 	bl	80003a8 <bytestowrite>
 8000442:	4603      	mov	r3, r0
 8000444:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	4413      	add	r3, r2
 800044c:	8af9      	ldrh	r1, [r7, #22]
 800044e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000452:	9202      	str	r2, [sp, #8]
 8000454:	8aba      	ldrh	r2, [r7, #20]
 8000456:	9201      	str	r2, [sp, #4]
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2302      	movs	r3, #2
 800045c:	460a      	mov	r2, r1
 800045e:	21a0      	movs	r1, #160	; 0xa0
 8000460:	480f      	ldr	r0, [pc, #60]	; (80004a0 <EEPROM_Write+0xc8>)
 8000462:	f001 f93b 	bl	80016dc <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000468:	3301      	adds	r3, #1
 800046a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800046c:	2300      	movs	r3, #0
 800046e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000470:	88fa      	ldrh	r2, [r7, #6]
 8000472:	8abb      	ldrh	r3, [r7, #20]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000478:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800047a:	8abb      	ldrh	r3, [r7, #20]
 800047c:	4413      	add	r3, r2
 800047e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000480:	2005      	movs	r0, #5
 8000482:	f000 fcf7 	bl	8000e74 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000486:	6a3b      	ldr	r3, [r7, #32]
 8000488:	3301      	adds	r3, #1
 800048a:	623b      	str	r3, [r7, #32]
 800048c:	8b3b      	ldrh	r3, [r7, #24]
 800048e:	6a3a      	ldr	r2, [r7, #32]
 8000490:	429a      	cmp	r2, r3
 8000492:	dbc6      	blt.n	8000422 <EEPROM_Write+0x4a>
	}
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000002c 	.word	0x2000002c

080004a4 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73fb      	strb	r3, [r7, #15]
 80004b6:	e00b      	b.n	80004d0 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80004b8:	7bfa      	ldrb	r2, [r7, #15]
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	6879      	ldr	r1, [r7, #4]
 80004be:	440b      	add	r3, r1
 80004c0:	3210      	adds	r2, #16
 80004c2:	443a      	add	r2, r7
 80004c4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80004c8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9f0      	bls.n	80004b8 <float2Bytes+0x14>
    }

}
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b087      	sub	sp, #28
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	75fb      	strb	r3, [r7, #23]
 80004ee:	e00b      	b.n	8000508 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	441a      	add	r2, r3
 80004f6:	7dfb      	ldrb	r3, [r7, #23]
 80004f8:	7812      	ldrb	r2, [r2, #0]
 80004fa:	3318      	adds	r3, #24
 80004fc:	443b      	add	r3, r7
 80004fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000502:	7dfb      	ldrb	r3, [r7, #23]
 8000504:	3301      	adds	r3, #1
 8000506:	75fb      	strb	r3, [r7, #23]
 8000508:	7dfb      	ldrb	r3, [r7, #23]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d9f0      	bls.n	80004f0 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	613b      	str	r3, [r7, #16]
   return float_variable;
 8000512:	693b      	ldr	r3, [r7, #16]
}
 8000514:	4618      	mov	r0, r3
 8000516:	371c      	adds	r7, #28
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	603a      	str	r2, [r7, #0]
 800052a:	80fb      	strh	r3, [r7, #6]
 800052c:	460b      	mov	r3, r1
 800052e:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000530:	6839      	ldr	r1, [r7, #0]
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <EEPROM_Write_NUM+0x2c>)
 8000534:	f7ff ffb6 	bl	80004a4 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000538:	88b9      	ldrh	r1, [r7, #4]
 800053a:	88f8      	ldrh	r0, [r7, #6]
 800053c:	2304      	movs	r3, #4
 800053e:	4a03      	ldr	r2, [pc, #12]	; (800054c <EEPROM_Write_NUM+0x2c>)
 8000540:	f7ff ff4a 	bl	80003d8 <EEPROM_Write>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000028 	.word	0x20000028

08000550 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	80fb      	strh	r3, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000560:	f107 020c 	add.w	r2, r7, #12
 8000564:	88b9      	ldrh	r1, [r7, #4]
 8000566:	88f8      	ldrh	r0, [r7, #6]
 8000568:	2304      	movs	r3, #4
 800056a:	f000 f80b 	bl	8000584 <EEPROM_Read>

	return (Bytes2float(buffer));
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffb5 	bl	80004e2 <Bytes2float>
 8000578:	4603      	mov	r3, r0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af04      	add	r7, sp, #16
 800058a:	60ba      	str	r2, [r7, #8]
 800058c:	461a      	mov	r2, r3
 800058e:	4603      	mov	r3, r0
 8000590:	81fb      	strh	r3, [r7, #14]
 8000592:	460b      	mov	r3, r1
 8000594:	81bb      	strh	r3, [r7, #12]
 8000596:	4613      	mov	r3, r2
 8000598:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800059a:	2306      	movs	r3, #6
 800059c:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	89bb      	ldrh	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da00      	bge.n	80005ae <EEPROM_Read+0x2a>
 80005ac:	333f      	adds	r3, #63	; 0x3f
 80005ae:	119b      	asrs	r3, r3, #6
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	4413      	add	r3, r2
 80005b6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80005b8:	8b7a      	ldrh	r2, [r7, #26]
 80005ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	3301      	adds	r3, #1
 80005c2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
 80005cc:	e031      	b.n	8000632 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80005ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21b      	sxth	r3, r3
 80005e0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80005e2:	89ba      	ldrh	r2, [r7, #12]
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4611      	mov	r1, r2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fedd 	bl	80003a8 <bytestowrite>
 80005ee:	4603      	mov	r3, r0
 80005f0:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80005f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	4413      	add	r3, r2
 80005f8:	8af9      	ldrh	r1, [r7, #22]
 80005fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fe:	9202      	str	r2, [sp, #8]
 8000600:	8aba      	ldrh	r2, [r7, #20]
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2302      	movs	r3, #2
 8000608:	460a      	mov	r2, r1
 800060a:	21a0      	movs	r1, #160	; 0xa0
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <EEPROM_Read+0xc0>)
 800060e:	f001 f95f 	bl	80018d0 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000614:	3301      	adds	r3, #1
 8000616:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000618:	2300      	movs	r3, #0
 800061a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	8abb      	ldrh	r3, [r7, #20]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000626:	8abb      	ldrh	r3, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800062c:	6a3b      	ldr	r3, [r7, #32]
 800062e:	3301      	adds	r3, #1
 8000630:	623b      	str	r3, [r7, #32]
 8000632:	8b3b      	ldrh	r3, [r7, #24]
 8000634:	6a3a      	ldr	r2, [r7, #32]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbc9      	blt.n	80005ce <EEPROM_Read+0x4a>
	}
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000002c 	.word	0x2000002c

08000648 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <TM1637_ClkHigh+0x14>)
 8000652:	f000 fec5 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40011000 	.word	0x40011000

08000660 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <TM1637_ClkLow+0x14>)
 800066a:	f000 feb9 	bl	80013e0 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40011000 	.word	0x40011000

08000678 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2101      	movs	r1, #1
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <TM1637_DataHigh+0x14>)
 8000682:	f000 fead 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40010c00 	.word	0x40010c00

08000690 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TM1637_DataLow+0x14>)
 800069a:	f000 fea1 	bl	80013e0 <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <TM1637_DisplayDecimal>:
		TM1637_DisplayDecimal(i++, 0);
	}
}

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e032      	b.n	800071e <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <TM1637_DisplayDecimal+0xd4>)
 80006bc:	fb83 2301 	smull	r2, r3, r3, r1
 80006c0:	109a      	asrs	r2, r3, #2
 80006c2:	17cb      	asrs	r3, r1, #31
 80006c4:	1ad2      	subs	r2, r2, r3
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	1aca      	subs	r2, r1, r3
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <TM1637_DisplayDecimal+0xd8>)
 80006d2:	5c99      	ldrb	r1, [r3, r2]
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d110      	bne.n	8000708 <TM1637_DisplayDecimal+0x60>
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00d      	beq.n	8000708 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 80006ec:	f107 020c 	add.w	r2, r7, #12
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <TM1637_DisplayDecimal+0xd4>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	1092      	asrs	r2, r2, #2
 8000712:	17db      	asrs	r3, r3, #31
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	2b03      	cmp	r3, #3
 8000722:	ddc9      	ble.n	80006b8 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8000724:	f000 f843 	bl	80007ae <TM1637_Start>
    TM1637_WriteByte(0x40);
 8000728:	2040      	movs	r0, #64	; 0x40
 800072a:	f000 f872 	bl	8000812 <TM1637_WriteByte>
    TM1637_ReadResult();
 800072e:	f000 f860 	bl	80007f2 <TM1637_ReadResult>
    TM1637_Stop();
 8000732:	f000 f849 	bl	80007c8 <TM1637_Stop>

    TM1637_Start();
 8000736:	f000 f83a 	bl	80007ae <TM1637_Start>
    TM1637_WriteByte(0xc0);
 800073a:	20c0      	movs	r0, #192	; 0xc0
 800073c:	f000 f869 	bl	8000812 <TM1637_WriteByte>
    TM1637_ReadResult();
 8000740:	f000 f857 	bl	80007f2 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	e00e      	b.n	8000768 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	f1c3 0303 	rsb	r3, r3, #3
 8000750:	3318      	adds	r3, #24
 8000752:	443b      	add	r3, r7
 8000754:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f85a 	bl	8000812 <TM1637_WriteByte>
        TM1637_ReadResult();
 800075e:	f000 f848 	bl	80007f2 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3301      	adds	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	2b03      	cmp	r3, #3
 800076c:	dded      	ble.n	800074a <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 800076e:	f000 f82b 	bl	80007c8 <TM1637_Stop>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	66666667 	.word	0x66666667
 8000780:	08002f54 	.word	0x08002f54

08000784 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800078e:	f000 f80e 	bl	80007ae <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3b79      	subs	r3, #121	; 0x79
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f83a 	bl	8000812 <TM1637_WriteByte>
    TM1637_ReadResult();
 800079e:	f000 f828 	bl	80007f2 <TM1637_ReadResult>
    TM1637_Stop();
 80007a2:	f000 f811 	bl	80007c8 <TM1637_Stop>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <TM1637_Start>:

void TM1637_Start(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80007b2:	f7ff ff49 	bl	8000648 <TM1637_ClkHigh>
    TM1637_DataHigh();
 80007b6:	f7ff ff5f 	bl	8000678 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 f853 	bl	8000866 <TM1637_DelayUsec>
    TM1637_DataLow();
 80007c0:	f7ff ff66 	bl	8000690 <TM1637_DataLow>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80007cc:	f7ff ff48 	bl	8000660 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f000 f848 	bl	8000866 <TM1637_DelayUsec>
    TM1637_DataLow();
 80007d6:	f7ff ff5b 	bl	8000690 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80007da:	2002      	movs	r0, #2
 80007dc:	f000 f843 	bl	8000866 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80007e0:	f7ff ff32 	bl	8000648 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f000 f83e 	bl	8000866 <TM1637_DelayUsec>
    TM1637_DataHigh();
 80007ea:	f7ff ff45 	bl	8000678 <TM1637_DataHigh>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80007f6:	f7ff ff33 	bl	8000660 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80007fa:	2005      	movs	r0, #5
 80007fc:	f000 f833 	bl	8000866 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8000800:	f7ff ff22 	bl	8000648 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8000804:	2002      	movs	r0, #2
 8000806:	f000 f82e 	bl	8000866 <TM1637_DelayUsec>
    TM1637_ClkLow();
 800080a:	f7ff ff29 	bl	8000660 <TM1637_ClkLow>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e019      	b.n	8000856 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8000822:	f7ff ff1d 	bl	8000660 <TM1637_ClkLow>
		if (b & 0x01) {
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8000830:	f7ff ff22 	bl	8000678 <TM1637_DataHigh>
 8000834:	e001      	b.n	800083a <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8000836:	f7ff ff2b 	bl	8000690 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 800083a:	2003      	movs	r0, #3
 800083c:	f000 f813 	bl	8000866 <TM1637_DelayUsec>
		b >>= 1;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8000846:	f7ff feff 	bl	8000648 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 800084a:	2003      	movs	r0, #3
 800084c:	f000 f80b 	bl	8000866 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b07      	cmp	r3, #7
 800085a:	dde2      	ble.n	8000822 <TM1637_WriteByte+0x10>
	}
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8000866:	b480      	push	{r7}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800086e:	e00d      	b.n	800088c <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e003      	b.n	800087e <TM1637_DelayUsec+0x18>
					__NOP();
 8000876:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000884:	dbf7      	blt.n	8000876 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1ee      	bne.n	8000870 <TM1637_DelayUsec+0xa>
        }
    }
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
	...

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a46      	ldr	r2, [pc, #280]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0310 	and.w	r3, r3, #16
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a40      	ldr	r2, [pc, #256]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a3a      	ldr	r2, [pc, #232]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x134>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a34      	ldr	r2, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x134>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <MX_GPIO_Init+0x134>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2120      	movs	r1, #32
 8000918:	482f      	ldr	r0, [pc, #188]	; (80009d8 <MX_GPIO_Init+0x138>)
 800091a:	f000 fd61 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	482e      	ldr	r0, [pc, #184]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000924:	f000 fd5c 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	482c      	ldr	r0, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x140>)
 800092e:	f000 fd57 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x144>)
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x140>)
 8000948:	f000 fbc6 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094c:	2320      	movs	r3, #32
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	481d      	ldr	r0, [pc, #116]	; (80009d8 <MX_GPIO_Init+0x138>)
 8000964:	f000 fbb8 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000980:	f000 fbaa 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_GPIO_Init+0x144>)
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4619      	mov	r1, r3
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <MX_GPIO_Init+0x13c>)
 800099a:	f000 fb9d 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_Pin;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <MX_GPIO_Init+0x140>)
 80009b6:	f000 fb8f 	bl	80010d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2028      	movs	r0, #40	; 0x28
 80009c0:	f000 fb53 	bl	800106a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c4:	2028      	movs	r0, #40	; 0x28
 80009c6:	f000 fb6c 	bl	80010a2 <HAL_NVIC_EnableIRQ>

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010800 	.word	0x40010800
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	40011000 	.word	0x40011000
 80009e4:	10110000 	.word	0x10110000

080009e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f000 fd15 	bl	8001454 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f8bf 	bl	8000bb2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <HAL_I2C_MspInit+0x70>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d123      	bne.n	8000aac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_I2C_MspInit+0x74>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_I2C_MspInit+0x74>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_I2C_MspInit+0x74>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a7c:	23c0      	movs	r3, #192	; 0xc0
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a80:	2312      	movs	r3, #18
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <HAL_I2C_MspInit+0x78>)
 8000a90:	f000 fb22 	bl	80010d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_I2C_MspInit+0x74>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_I2C_MspInit+0x74>)
 8000a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a9e:	61d3      	str	r3, [r2, #28]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_I2C_MspInit+0x74>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 f973 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f831 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f7ff fee7 	bl	80008a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad2:	f000 f8df 	bl	8000c94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ad6:	f7ff ff87 	bl	80009e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //EEPROM_Write_NUM(2, 0, num);
  TM1637_SetBrightness(3);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f7ff fe52 	bl	8000784 <TM1637_SetBrightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t num = EEPROM_Read_NUM(2, 0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fd34 	bl	8000550 <EEPROM_Read_NUM>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fc3c 	bl	8000368 <__aeabi_f2uiz>
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
	  if (num==0)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d103      	bne.n	8000b02 <main+0x42>
	  {
		  HAL_Delay(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f000 f9ba 	bl	8000e74 <HAL_Delay>
 8000b00:	e7ee      	b.n	8000ae0 <main+0x20>
	  } else {
		  TM1637_DisplayDecimal(num, 0);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fdce 	bl	80006a8 <TM1637_DisplayDecimal>
		  num +=1;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	71fb      	strb	r3, [r7, #7]
		  EEPROM_Write_NUM(2, 0, num);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fbcf 	bl	80002b8 <__aeabi_ui2f>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fcfd 	bl	8000520 <EEPROM_Write_NUM>
		  HAL_Delay(1000);
 8000b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2a:	f000 f9a3 	bl	8000e74 <HAL_Delay>
  {
 8000b2e:	e7d7      	b.n	8000ae0 <main+0x20>

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	; 0x40
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 f9d0 	bl	8002ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fcc9 	bl	8002508 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b7c:	f000 f819 	bl	8000bb2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 ff36 	bl	8002a0c <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ba6:	f000 f804 	bl	8000bb2 <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3740      	adds	r7, #64	; 0x40
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb6:	b672      	cpsid	i
}
 8000bb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bba:	e7fe      	b.n	8000bba <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x5c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_MspInit+0x60>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_MspInit+0x60>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f8e9 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000c72:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c76:	f000 fbcb 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c7e:	f000 fbc7 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART2_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f002 f82c 	bl	8002d28 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f7ff ff6c 	bl	8000bb2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000080 	.word	0x20000080
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x70>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d123      	bne.n	8000d50 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x74>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_UART_MspInit+0x74>)
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d12:	61d3      	str	r3, [r2, #28]
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_UART_MspInit+0x74>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_UART_MspInit+0x74>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_UART_MspInit+0x74>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_UART_MspInit+0x74>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_UART_MspInit+0x78>)
 8000d4c:	f000 f9c4 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800

08000d64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff ff8f 	bl	8000c86 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d6a:	490c      	ldr	r1, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d80:	4c09      	ldr	r4, [pc, #36]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f002 f8b1 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d92:	f7ff fe95 	bl	8000ac0 <main>
  bx lr
 8000d96:	4770      	bx	lr
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000da0:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 8000da4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da8:	200000cc 	.word	0x200000cc

08000dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_2_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x28>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x28>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f947 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fef6 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f95f 	bl	80010be <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f927 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200000c8 	.word	0x200000c8

08000e60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	200000c8 	.word	0x200000c8

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4906      	ldr	r1, [pc, #24]	; (8000f54 <__NVIC_EnableIRQ+0x34>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff90 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff2d 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff42 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff90 	bl	8000fac <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5f 	bl	8000f58 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff35 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	; (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	; (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	; (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	; 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	; (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	492c      	ldr	r1, [pc, #176]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4922      	ldr	r1, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4918      	ldr	r1, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	490e      	ldr	r1, [pc, #56]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f806 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e12b      	b.n	80016be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fae2 	bl	8000a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b8:	f001 fbf0 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a81      	ldr	r2, [pc, #516]	; (80016c8 <HAL_I2C_Init+0x274>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d807      	bhi.n	80014d8 <HAL_I2C_Init+0x84>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a80      	ldr	r2, [pc, #512]	; (80016cc <HAL_I2C_Init+0x278>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	bf94      	ite	ls
 80014d0:	2301      	movls	r3, #1
 80014d2:	2300      	movhi	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e006      	b.n	80014e6 <HAL_I2C_Init+0x92>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a7d      	ldr	r2, [pc, #500]	; (80016d0 <HAL_I2C_Init+0x27c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0e7      	b.n	80016be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a78      	ldr	r2, [pc, #480]	; (80016d4 <HAL_I2C_Init+0x280>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a6a      	ldr	r2, [pc, #424]	; (80016c8 <HAL_I2C_Init+0x274>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d802      	bhi.n	8001528 <HAL_I2C_Init+0xd4>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	e009      	b.n	800153c <HAL_I2C_Init+0xe8>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_I2C_Init+0x284>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	3301      	adds	r3, #1
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800154e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	495c      	ldr	r1, [pc, #368]	; (80016c8 <HAL_I2C_Init+0x274>)
 8001558:	428b      	cmp	r3, r1
 800155a:	d819      	bhi.n	8001590 <HAL_I2C_Init+0x13c>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e59      	subs	r1, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fbb1 f3f3 	udiv	r3, r1, r3
 800156a:	1c59      	adds	r1, r3, #1
 800156c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001570:	400b      	ands	r3, r1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <HAL_I2C_Init+0x138>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e59      	subs	r1, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fbb1 f3f3 	udiv	r3, r1, r3
 8001584:	3301      	adds	r3, #1
 8001586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158a:	e051      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 800158c:	2304      	movs	r3, #4
 800158e:	e04f      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_I2C_Init+0x168>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e012      	b.n	80015e2 <HAL_I2C_Init+0x18e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Init+0x196>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e022      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10e      	bne.n	8001610 <HAL_I2C_Init+0x1bc>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e58      	subs	r0, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	440b      	add	r3, r1
 8001600:	fbb0 f3f3 	udiv	r3, r0, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160e:	e00f      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	0099      	lsls	r1, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	4313      	orrs	r3, r2
 8001636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800165e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6911      	ldr	r1, [r2, #16]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68d2      	ldr	r2, [r2, #12]
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	000186a0 	.word	0x000186a0
 80016cc:	001e847f 	.word	0x001e847f
 80016d0:	003d08ff 	.word	0x003d08ff
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	10624dd3 	.word	0x10624dd3

080016dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	817b      	strh	r3, [r7, #10]
 80016ee:	460b      	mov	r3, r1
 80016f0:	813b      	strh	r3, [r7, #8]
 80016f2:	4613      	mov	r3, r2
 80016f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016f6:	f7ff fbb3 	bl	8000e60 <HAL_GetTick>
 80016fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b20      	cmp	r3, #32
 8001706:	f040 80d9 	bne.w	80018bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2319      	movs	r3, #25
 8001710:	2201      	movs	r2, #1
 8001712:	496d      	ldr	r1, [pc, #436]	; (80018c8 <HAL_I2C_Mem_Write+0x1ec>)
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fcc1 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001720:	2302      	movs	r3, #2
 8001722:	e0cc      	b.n	80018be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_I2C_Mem_Write+0x56>
 800172e:	2302      	movs	r3, #2
 8001730:	e0c5      	b.n	80018be <HAL_I2C_Mem_Write+0x1e2>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d007      	beq.n	8001758 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2221      	movs	r2, #33	; 0x21
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_I2C_Mem_Write+0x1f0>)
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800179a:	88f8      	ldrh	r0, [r7, #6]
 800179c:	893a      	ldrh	r2, [r7, #8]
 800179e:	8979      	ldrh	r1, [r7, #10]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	4603      	mov	r3, r0
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 faf8 	bl	8001da0 <I2C_RequestMemoryWrite>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d052      	beq.n	800185c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e081      	b.n	80018be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 fd86 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d107      	bne.n	80017e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06b      	b.n	80018be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29b      	uxth	r3, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b04      	cmp	r3, #4
 8001822:	d11b      	bne.n	800185c <HAL_I2C_Mem_Write+0x180>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d017      	beq.n	800185c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1aa      	bne.n	80017ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 fd79 	bl	8002360 <I2C_WaitOnBTFFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e016      	b.n	80018be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e000      	b.n	80018be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	00100002 	.word	0x00100002
 80018cc:	ffff0000 	.word	0xffff0000

080018d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	817b      	strh	r3, [r7, #10]
 80018e2:	460b      	mov	r3, r1
 80018e4:	813b      	strh	r3, [r7, #8]
 80018e6:	4613      	mov	r3, r2
 80018e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ee:	f7ff fab7 	bl	8000e60 <HAL_GetTick>
 80018f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	f040 8244 	bne.w	8001d8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2319      	movs	r3, #25
 8001908:	2201      	movs	r2, #1
 800190a:	4982      	ldr	r1, [pc, #520]	; (8001b14 <HAL_I2C_Mem_Read+0x244>)
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fbc5 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
 800191a:	e237      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_I2C_Mem_Read+0x5a>
 8001926:	2302      	movs	r3, #2
 8001928:	e230      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d007      	beq.n	8001950 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2222      	movs	r2, #34	; 0x22
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a62      	ldr	r2, [pc, #392]	; (8001b18 <HAL_I2C_Mem_Read+0x248>)
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001992:	88f8      	ldrh	r0, [r7, #6]
 8001994:	893a      	ldrh	r2, [r7, #8]
 8001996:	8979      	ldrh	r1, [r7, #10]
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4603      	mov	r3, r0
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fa92 	bl	8001ecc <I2C_RequestMemoryRead>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1ec      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d113      	bne.n	80019e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e1c0      	b.n	8001d64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d11e      	bne.n	8001a28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019fa:	b672      	cpsid	i
}
 80019fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a24:	b662      	cpsie	i
}
 8001a26:	e035      	b.n	8001a94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d11e      	bne.n	8001a6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a6a:	b662      	cpsie	i
}
 8001a6c:	e012      	b.n	8001a94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a94:	e166      	b.n	8001d64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	f200 811f 	bhi.w	8001cde <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d123      	bne.n	8001af0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fc9f 	bl	80023f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e167      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aee:	e139      	b.n	8001d64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d152      	bne.n	8001b9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afe:	2200      	movs	r2, #0
 8001b00:	4906      	ldr	r1, [pc, #24]	; (8001b1c <HAL_I2C_Mem_Read+0x24c>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 faca 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e13c      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
 8001b12:	bf00      	nop
 8001b14:	00100002 	.word	0x00100002
 8001b18:	ffff0000 	.word	0xffff0000
 8001b1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b66:	b662      	cpsie	i
}
 8001b68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b9c:	e0e2      	b.n	8001d64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	497b      	ldr	r1, [pc, #492]	; (8001d94 <HAL_I2C_Mem_Read+0x4c4>)
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fa77 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0e9      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_I2C_Mem_Read+0x4c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_I2C_Mem_Read+0x4cc>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0a1a      	lsrs	r2, r3, #8
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00da      	lsls	r2, r3, #3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c46:	b662      	cpsie	i
}
 8001c48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e09a      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d1d9      	bne.n	8001c18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ca6:	b662      	cpsie	i
}
 8001ca8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cdc:	e042      	b.n	8001d64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fb84 	bl	80023f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e04c      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d118      	bne.n	8001d64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae94 	bne.w	8001a96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	00010004 	.word	0x00010004
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	14f8b589 	.word	0x14f8b589

08001da0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f960 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df0:	d103      	bne.n	8001dfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e05f      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	492d      	ldr	r1, [pc, #180]	; (8001ec8 <I2C_RequestMemoryWrite+0x128>)
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f9bb 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04c      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fa46 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d107      	bne.n	8001e62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e02b      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e6c:	893b      	ldrh	r3, [r7, #8]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	e021      	b.n	8001ebc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e78:	893b      	ldrh	r3, [r7, #8]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fa20 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d107      	bne.n	8001eae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e005      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	00010002 	.word	0x00010002

08001ecc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f8c2 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2c:	d103      	bne.n	8001f36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0aa      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	4952      	ldr	r1, [pc, #328]	; (8002098 <I2C_RequestMemoryRead+0x1cc>)
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f91d 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e097      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9a8 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d107      	bne.n	8001f9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e076      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa8:	893b      	ldrh	r3, [r7, #8]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	e021      	b.n	8001ff8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f982 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d107      	bne.n	8001fea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e050      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	6a39      	ldr	r1, [r7, #32]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f967 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e035      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002032:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	2200      	movs	r2, #0
 800203c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f82b 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205a:	d103      	bne.n	8002064 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e013      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002068:	897b      	ldrh	r3, [r7, #10]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	6a3a      	ldr	r2, [r7, #32]
 800207c:	4906      	ldr	r1, [pc, #24]	; (8002098 <I2C_RequestMemoryRead+0x1cc>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f886 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	00010002 	.word	0x00010002

0800209c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ac:	e048      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d044      	beq.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b6:	f7fe fed3 	bl	8000e60 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d302      	bcc.n	80020cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d139      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	e00c      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0x70>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d116      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e023      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <I2C_WaitOnFlagUntilTimeout+0xca>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	43da      	mvns	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	e00c      	b.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	43da      	mvns	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4013      	ands	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	429a      	cmp	r2, r3
 8002184:	d093      	beq.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800219e:	e071      	b.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d123      	bne.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e067      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d041      	beq.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002200:	f7fe fe2e 	bl	8000e60 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d136      	bne.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	e00b      	b.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e021      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10c      	bne.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e00b      	b.n	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f af6d 	bne.w	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022dc:	e034      	b.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8e3 	bl	80024aa <I2C_IsAcknowledgeFailed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e034      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d028      	beq.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7fe fdb3 	bl	8000e60 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11d      	bne.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	2b80      	cmp	r3, #128	; 0x80
 8002318:	d016      	beq.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d1c3      	bne.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800236c:	e034      	b.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f89b 	bl	80024aa <I2C_IsAcknowledgeFailed>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e034      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d028      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe fd6b 	bl	8000e60 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11d      	bne.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d016      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d1c3      	bne.n	800236e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023fc:	e049      	b.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	d119      	bne.n	8002440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0210 	mvn.w	r2, #16
 8002414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e030      	b.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002440:	f7fe fd0e 	bl	8000e60 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	429a      	cmp	r2, r3
 800244e:	d302      	bcc.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d016      	beq.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e007      	b.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d1ae      	bne.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c0:	d11b      	bne.n	80024fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
	...

08002508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e272      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8087 	beq.w	8002636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002528:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00c      	beq.n	800254e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002534:	4b8f      	ldr	r3, [pc, #572]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d112      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
 8002540:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d10b      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06c      	beq.n	8002634 <HAL_RCC_OscConfig+0x12c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d168      	bne.n	8002634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e24c      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x76>
 8002570:	4b80      	ldr	r3, [pc, #512]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7f      	ldr	r2, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e02e      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b7b      	ldr	r3, [pc, #492]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7a      	ldr	r2, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a77      	ldr	r2, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0xbc>
 80025aa:	4b72      	ldr	r3, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a71      	ldr	r2, [pc, #452]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6e      	ldr	r2, [pc, #440]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025c4:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a67      	ldr	r2, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fc3c 	bl	8000e60 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fc38 	bl	8000e60 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e200      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xe4>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fc28 	bl	8000e60 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fc24 	bl	8000e60 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1ec      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x10c>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c0      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4939      	ldr	r1, [pc, #228]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fbdd 	bl	8000e60 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fbd9 	bl	8000e60 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a1      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4927      	ldr	r1, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fbbc 	bl	8000e60 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe fbb8 	bl	8000e60 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e180      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03a      	beq.n	800278c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7fe fb9c 	bl	8000e60 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fb98 	bl	8000e60 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e160      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f000 face 	bl	8002cec <RCC_Delay>
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe fb82 	bl	8000e60 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fb7e 	bl	8000e60 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d908      	bls.n	8002780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e146      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	42420000 	.word	0x42420000
 800277c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e9      	bne.n	8002760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a6 	beq.w	80028e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a87      	ldr	r2, [pc, #540]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b82      	ldr	r3, [pc, #520]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b7f      	ldr	r3, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7e      	ldr	r2, [pc, #504]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7fe fb3f 	bl	8000e60 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe fb3b 	bl	8000e60 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e103      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x312>
 800280c:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a6e      	ldr	r2, [pc, #440]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e02d      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x334>
 8002822:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	e01c      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x356>
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800285e:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b58      	ldr	r3, [pc, #352]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe faef 	bl	8000e60 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe faeb 	bl	8000e60 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0b1      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCC_OscConfig+0x37e>
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fad9 	bl	8000e60 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fad5 	bl	8000e60 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e09b      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8087 	beq.w	80029fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d061      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d146      	bne.n	8002992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe faa9 	bl	8000e60 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe faa5 	bl	8000e60 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e06d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d108      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4921      	ldr	r1, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a19      	ldr	r1, [r3, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	430b      	orrs	r3, r1
 800295e:	491b      	ldr	r1, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fa79 	bl	8000e60 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fa75 	bl	8000e60 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x46a>
 8002990:	e035      	b.n	80029fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fa62 	bl	8000e60 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fa5e 	bl	8000e60 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e026      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x498>
 80029be:	e01e      	b.n	80029fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e019      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_OscConfig+0x500>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d910      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4965      	ldr	r1, [pc, #404]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d040      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d115      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e073      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4936      	ldr	r1, [pc, #216]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe f9b0 	bl	8000e60 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe f9ac 	bl	8000e60 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e053      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d210      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4922      	ldr	r1, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f821 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1d0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f90e 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08002f68 	.word	0x08002f68
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x30>
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0e:	e027      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c12:	613b      	str	r3, [r7, #16]
      break;
 8002c14:	e027      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0c9b      	lsrs	r3, r3, #18
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	0c5b      	lsrs	r3, r3, #17
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	fb03 f202 	mul.w	r2, r3, r2
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e004      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c62:	613b      	str	r3, [r7, #16]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	693b      	ldr	r3, [r7, #16]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	08002f80 	.word	0x08002f80
 8002c80:	08002f90 	.word	0x08002f90
 8002c84:	003d0900 	.word	0x003d0900

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000000 	.word	0x20000000

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca0:	f7ff fff2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08002f78 	.word	0x08002f78

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0adb      	lsrs	r3, r3, #11
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08002f78 	.word	0x08002f78

08002cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <RCC_Delay+0x34>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <RCC_Delay+0x38>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a5b      	lsrs	r3, r3, #9
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d08:	bf00      	nop
  }
  while (Delay --);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <RCC_Delay+0x1c>
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	20000000 	.word	0x20000000
 8002d24:	10624dd3 	.word	0x10624dd3

08002d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e042      	b.n	8002dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd ffca 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f82b 	bl	8002dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e02:	f023 030c 	bic.w	r3, r3, #12
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <UART_SetConfig+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e30:	f7ff ff48 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	e002      	b.n	8002e3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7ff ff30 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8002e3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <UART_SetConfig+0x118>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	0119      	lsls	r1, r3, #4
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <UART_SetConfig+0x118>)
 8002e76:	fba3 0302 	umull	r0, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2064      	movs	r0, #100	; 0x64
 8002e7e:	fb00 f303 	mul.w	r3, r0, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <UART_SetConfig+0x118>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e94:	4419      	add	r1, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <UART_SetConfig+0x118>)
 8002eae:	fba3 0302 	umull	r0, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2064      	movs	r0, #100	; 0x64
 8002eb6:	fb00 f303 	mul.w	r3, r0, r3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	; 0x32
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <UART_SetConfig+0x118>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	51eb851f 	.word	0x51eb851f

08002ee4 <memset>:
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4402      	add	r2, r0
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d100      	bne.n	8002eee <memset+0xa>
 8002eec:	4770      	bx	lr
 8002eee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef2:	e7f9      	b.n	8002ee8 <memset+0x4>

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4d0c      	ldr	r5, [pc, #48]	; (8002f2c <__libc_init_array+0x38>)
 8002efa:	4c0d      	ldr	r4, [pc, #52]	; (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	f000 f81a 	bl	8002f3c <_init>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4d0a      	ldr	r5, [pc, #40]	; (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	; (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08002f94 	.word	0x08002f94
 8002f30:	08002f94 	.word	0x08002f94
 8002f34:	08002f94 	.word	0x08002f94
 8002f38:	08002f98 	.word	0x08002f98

08002f3c <_init>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr

08002f48 <_fini>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr
