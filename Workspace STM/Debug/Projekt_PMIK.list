
Projekt_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f08  08009f08  0002031c  2**0
                  CONTENTS
  4 .ARM          00000000  08009f08  08009f08  0002031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f08  08009f08  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f0c  08009f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  08009f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000031c  0800a22c  0002031c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  0800a22c  000207d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020345  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019922  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036c9  00000000  00000000  00039caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003e980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7f4  00000000  00000000  0003faa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a59b  00000000  00000000  0005a29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000944d7  00000000  00000000  00074835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000619c  00000000  00000000  00108d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000031c 	.word	0x2000031c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009e54 	.word	0x08009e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000320 	.word	0x20000320
 8000148:	08009e54 	.word	0x08009e54

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	80fb      	strh	r3, [r7, #6]
 8000374:	4613      	mov	r3, r2
 8000376:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000378:	88fa      	ldrh	r2, [r7, #6]
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	2b3f      	cmp	r3, #63	; 0x3f
 8000380:	dc01      	bgt.n	8000386 <bytestowrite+0x1e>
 8000382:	88fb      	ldrh	r3, [r7, #6]
 8000384:	e003      	b.n	800038e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800038c:	b29b      	uxth	r3, r3
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08e      	sub	sp, #56	; 0x38
 800039c:	af04      	add	r7, sp, #16
 800039e:	60ba      	str	r2, [r7, #8]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4603      	mov	r3, r0
 80003a4:	81fb      	strh	r3, [r7, #14]
 80003a6:	460b      	mov	r3, r1
 80003a8:	81bb      	strh	r3, [r7, #12]
 80003aa:	4613      	mov	r3, r2
 80003ac:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80003ae:	2306      	movs	r3, #6
 80003b0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80003b6:	88fa      	ldrh	r2, [r7, #6]
 80003b8:	89bb      	ldrh	r3, [r7, #12]
 80003ba:	4413      	add	r3, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	da00      	bge.n	80003c2 <EEPROM_Write+0x2a>
 80003c0:	333f      	adds	r3, #63	; 0x3f
 80003c2:	119b      	asrs	r3, r3, #6
 80003c4:	b29a      	uxth	r2, r3
 80003c6:	89fb      	ldrh	r3, [r7, #14]
 80003c8:	4413      	add	r3, r2
 80003ca:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80003cc:	8b7a      	ldrh	r2, [r7, #26]
 80003ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	3301      	adds	r3, #1
 80003d6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80003d8:	2300      	movs	r3, #0
 80003da:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
 80003e0:	e034      	b.n	800044c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80003e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003e4:	69fb      	ldr	r3, [r7, #28]
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	b21a      	sxth	r2, r3
 80003ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b21b      	sxth	r3, r3
 80003f4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80003f6:	89ba      	ldrh	r2, [r7, #12]
 80003f8:	88fb      	ldrh	r3, [r7, #6]
 80003fa:	4611      	mov	r1, r2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ffb3 	bl	8000368 <bytestowrite>
 8000402:	4603      	mov	r3, r0
 8000404:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	4413      	add	r3, r2
 800040c:	8af9      	ldrh	r1, [r7, #22]
 800040e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000412:	9202      	str	r2, [sp, #8]
 8000414:	8aba      	ldrh	r2, [r7, #20]
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	460a      	mov	r2, r1
 800041e:	21a0      	movs	r1, #160	; 0xa0
 8000420:	480f      	ldr	r0, [pc, #60]	; (8000460 <EEPROM_Write+0xc8>)
 8000422:	f002 f83f 	bl	80024a4 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000428:	3301      	adds	r3, #1
 800042a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800042c:	2300      	movs	r3, #0
 800042e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000430:	88fa      	ldrh	r2, [r7, #6]
 8000432:	8abb      	ldrh	r3, [r7, #20]
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000438:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800043a:	8abb      	ldrh	r3, [r7, #20]
 800043c:	4413      	add	r3, r2
 800043e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000440:	2005      	movs	r0, #5
 8000442:	f000 ff9d 	bl	8001380 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000446:	6a3b      	ldr	r3, [r7, #32]
 8000448:	3301      	adds	r3, #1
 800044a:	623b      	str	r3, [r7, #32]
 800044c:	8b3b      	ldrh	r3, [r7, #24]
 800044e:	6a3a      	ldr	r2, [r7, #32]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbc6      	blt.n	80003e2 <EEPROM_Write+0x4a>
	}
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3728      	adds	r7, #40	; 0x28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000055c 	.word	0x2000055c

08000464 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000472:	2300      	movs	r3, #0
 8000474:	73fb      	strb	r3, [r7, #15]
 8000476:	e00b      	b.n	8000490 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8000478:	7bfa      	ldrb	r2, [r7, #15]
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	6879      	ldr	r1, [r7, #4]
 800047e:	440b      	add	r3, r1
 8000480:	3210      	adds	r2, #16
 8000482:	443a      	add	r2, r7
 8000484:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000488:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	3301      	adds	r3, #1
 800048e:	73fb      	strb	r3, [r7, #15]
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9f0      	bls.n	8000478 <float2Bytes+0x14>
    }

}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
	...

080004a4 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	603a      	str	r2, [r7, #0]
 80004ae:	80fb      	strh	r3, [r7, #6]
 80004b0:	460b      	mov	r3, r1
 80004b2:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 80004b4:	6839      	ldr	r1, [r7, #0]
 80004b6:	4806      	ldr	r0, [pc, #24]	; (80004d0 <EEPROM_Write_NUM+0x2c>)
 80004b8:	f7ff ffd4 	bl	8000464 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 80004bc:	88b9      	ldrh	r1, [r7, #4]
 80004be:	88f8      	ldrh	r0, [r7, #6]
 80004c0:	2304      	movs	r3, #4
 80004c2:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <EEPROM_Write_NUM+0x2c>)
 80004c4:	f7ff ff68 	bl	8000398 <EEPROM_Write>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000338 	.word	0x20000338

080004d4 <peripherialsInit>:
uint8_t state_flag[3] = {0, 0, 0}; // variable that tells if the full cycle of measurement was finnished
//full cycle is considered as finnished when state_flag = {1, 1, 1} after cycle they will be reseted to 0
// {0,0,0} <==> {measurement, write to EEPROM, display}

void peripherialsInit()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  TM1637_SetBrightness(3);
 80004d8:	2003      	movs	r0, #3
 80004da:	f000 f9fd 	bl	80008d8 <TM1637_SetBrightness>
  VL53_init();
 80004de:	f000 fa89 	bl	80009f4 <VL53_init>
  HAL_TIM_Base_Start_IT(&htim1);
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <peripherialsInit+0x24>)
 80004e4:	f003 f954 	bl	8003790 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	4904      	ldr	r1, [pc, #16]	; (80004fc <peripherialsInit+0x28>)
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <peripherialsInit+0x2c>)
 80004ee:	f003 fd82 	bl	8003ff6 <HAL_UART_Receive_IT>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200005b4 	.word	0x200005b4
 80004fc:	20000342 	.word	0x20000342
 8000500:	200005fc 	.word	0x200005fc

08000504 <switchMode>:

void switchMode()
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	/* Function that switches mode from 0 = single to 1 = continuous*/
	if(mode == 0)
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <switchMode+0x2c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d103      	bne.n	8000518 <switchMode+0x14>
	{
		mode = 1;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <switchMode+0x2c>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
	}
	else if (mode == 1)
	{
		mode = 0;
	}
}
 8000516:	e006      	b.n	8000526 <switchMode+0x22>
	else if (mode == 1)
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <switchMode+0x2c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d102      	bne.n	8000526 <switchMode+0x22>
		mode = 0;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <switchMode+0x2c>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000033d 	.word	0x2000033d

08000534 <Compute>:

void Compute(uint8_t mode, uint8_t status)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	if (mode == 0)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d104      	bne.n	8000554 <Compute+0x20>
	{
		singleMode(status);
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f80d 	bl	800056c <singleMode>
//	  	}
//	  	else if (state_flag[i] == 1)
//	  	{
//	  		cycleEnd();
//	  	}
}
 8000552:	e006      	b.n	8000562 <Compute+0x2e>
	else if (mode == 1)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d103      	bne.n	8000562 <Compute+0x2e>
		continuousMode(status);
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f81f 	bl	80005a0 <continuousMode>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <singleMode>:

void singleMode(uint8_t status)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (status == 2)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d10b      	bne.n	8000594 <singleMode+0x28>
	{
		readMeasure();
 800057c:	f000 f832 	bl	80005e4 <readMeasure>
		Display(Measure);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <singleMode+0x30>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f851 	bl	800062c <Display>
		saveToMem(Measure);
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <singleMode+0x30>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f860 	bl	8000654 <saveToMem>
	}
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000340 	.word	0x20000340

080005a0 <continuousMode>:
void continuousMode(uint8_t status)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d102      	bne.n	80005b6 <continuousMode+0x16>
	{
		readMeasure();
 80005b0:	f000 f818 	bl	80005e4 <readMeasure>
	}
	else if (status == 3)
	{
		Display(Measure);
	}
}
 80005b4:	e010      	b.n	80005d8 <continuousMode+0x38>
	else if (status == 2)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d105      	bne.n	80005c8 <continuousMode+0x28>
		saveToMem(Measure);
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <continuousMode+0x40>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f847 	bl	8000654 <saveToMem>
}
 80005c6:	e007      	b.n	80005d8 <continuousMode+0x38>
	else if (status == 3)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d104      	bne.n	80005d8 <continuousMode+0x38>
		Display(Measure);
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <continuousMode+0x40>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f82a 	bl	800062c <Display>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000340 	.word	0x20000340

080005e4 <readMeasure>:
//		state_flag[i] = 0;
//	}
//}

void readMeasure()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	/*Function that reads distance from VL530L0X and returns as uint8_t */
	//measure if data is ready
	if(TofDataRead == 1)
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <readMeasure+0x3c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d108      	bne.n	8000602 <readMeasure+0x1e>
		{
			Measure = VL53_MEASURE();
 80005f0:	f000 fa58 	bl	8000aa4 <VL53_MEASURE>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <readMeasure+0x40>)
 80005fa:	801a      	strh	r2, [r3, #0]
			TofDataRead = 0;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <readMeasure+0x3c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
		}
		//data limit
	if (Measure > 1250)
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <readMeasure+0x40>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800060a:	4293      	cmp	r3, r2
 800060c:	d903      	bls.n	8000616 <readMeasure+0x32>
		{
			Measure = 1250;
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <readMeasure+0x40>)
 8000610:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000614:	801a      	strh	r2, [r3, #0]
		}
	state_flag[0] = 1; //Change temporary progress flag to 1 (1 = task done)
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <readMeasure+0x44>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000033e 	.word	0x2000033e
 8000624:	20000340 	.word	0x20000340
 8000628:	20000358 	.word	0x20000358

0800062c <Display>:

void Display(uint16_t measure)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	TM1637_DisplayDecimal(measure, 0);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f8de 	bl	80007fc <TM1637_DisplayDecimal>
	state_flag[2] = 1; //Change temporary progress flag to 1 (1 = task done)
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <Display+0x24>)
 8000642:	2201      	movs	r2, #1
 8000644:	709a      	strb	r2, [r3, #2]
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000358 	.word	0x20000358

08000654 <saveToMem>:

void saveToMem(uint16_t measure)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	EEPROM_Write_NUM(EEPROM_PAGE, EEPROM_OFFSET, measure);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe29 	bl	80002b8 <__aeabi_ui2f>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	2101      	movs	r1, #1
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff ff19 	bl	80004a4 <EEPROM_Write_NUM>
	state_flag[1] = 1; //Change temporary progress flag to 1 (1 = task done)
 8000672:	4b03      	ldr	r3, [pc, #12]	; (8000680 <saveToMem+0x2c>)
 8000674:	2201      	movs	r2, #1
 8000676:	705a      	strb	r2, [r3, #1]
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000358 	.word	0x20000358

08000684 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	//save button
	if (GPIO_Pin == B2_Pin)
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000694:	d106      	bne.n	80006a4 <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000696:	2120      	movs	r1, #32
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x54>)
 800069a:	f001 fa23 	bl	8001ae4 <HAL_GPIO_TogglePin>
		status = 2;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_GPIO_EXTI_Callback+0x58>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
	}
	//change state button
	if (GPIO_Pin == B1_Pin)
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006aa:	d105      	bne.n	80006b8 <HAL_GPIO_EXTI_Callback+0x34>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006ac:	2120      	movs	r1, #32
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x54>)
 80006b0:	f001 fa18 	bl	8001ae4 <HAL_GPIO_TogglePin>
		switchMode();
 80006b4:	f7ff ff26 	bl	8000504 <switchMode>
	}
	if(GPIO_Pin == TOF_INT_Pin)
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d107      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x4a>
	{
		VL53_CLEAR_INTERRUPT_DATA();
 80006be:	f000 f9ff 	bl	8000ac0 <VL53_CLEAR_INTERRUPT_DATA>
		TofDataRead = 1;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
		status = 1;
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <HAL_GPIO_EXTI_Callback+0x58>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
	}
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	2000033c 	.word	0x2000033c
 80006e0:	2000033e 	.word	0x2000033e

080006e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a06      	ldr	r2, [pc, #24]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006f6:	2120      	movs	r1, #32
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006fa:	f001 f9f3 	bl	8001ae4 <HAL_GPIO_TogglePin>
		status = 3;
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000700:	2203      	movs	r2, #3
 8000702:	701a      	strb	r2, [r3, #0]
	}
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40012c00 	.word	0x40012c00
 8000710:	40010800 	.word	0x40010800
 8000714:	2000033c 	.word	0x2000033c

08000718 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_UART_RxCpltCallback+0x68>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d126      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x60>
	{
		uint16_t dl_kom;
		if(znak == 'e')
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_UART_RxCpltCallback+0x6c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b65      	cmp	r3, #101	; 0x65
 8000730:	d106      	bne.n	8000740 <HAL_UART_RxCpltCallback+0x28>
		{
			dl_kom = sprintf((char *)komunikat, "First data\n");
 8000732:	4915      	ldr	r1, [pc, #84]	; (8000788 <HAL_UART_RxCpltCallback+0x70>)
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <HAL_UART_RxCpltCallback+0x74>)
 8000736:	f008 fed3 	bl	80094e0 <siprintf>
 800073a:	4603      	mov	r3, r0
 800073c:	81fb      	strh	r3, [r7, #14]
 800073e:	e010      	b.n	8000762 <HAL_UART_RxCpltCallback+0x4a>
		}
		else if(znak == 'd')
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_UART_RxCpltCallback+0x6c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b64      	cmp	r3, #100	; 0x64
 8000746:	d106      	bne.n	8000756 <HAL_UART_RxCpltCallback+0x3e>
		{
			dl_kom = sprintf((char *)komunikat, "Another data\n");
 8000748:	4911      	ldr	r1, [pc, #68]	; (8000790 <HAL_UART_RxCpltCallback+0x78>)
 800074a:	4810      	ldr	r0, [pc, #64]	; (800078c <HAL_UART_RxCpltCallback+0x74>)
 800074c:	f008 fec8 	bl	80094e0 <siprintf>
 8000750:	4603      	mov	r3, r0
 8000752:	81fb      	strh	r3, [r7, #14]
 8000754:	e005      	b.n	8000762 <HAL_UART_RxCpltCallback+0x4a>
		}
		else
		{
			dl_kom = sprintf((char *)komunikat, "Wrong char\n");
 8000756:	490f      	ldr	r1, [pc, #60]	; (8000794 <HAL_UART_RxCpltCallback+0x7c>)
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <HAL_UART_RxCpltCallback+0x74>)
 800075a:	f008 fec1 	bl	80094e0 <siprintf>
 800075e:	4603      	mov	r3, r0
 8000760:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_IT(&huart2, komunikat, dl_kom);
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	461a      	mov	r2, r3
 8000766:	4909      	ldr	r1, [pc, #36]	; (800078c <HAL_UART_RxCpltCallback+0x74>)
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_UART_RxCpltCallback+0x80>)
 800076a:	f003 fc0f 	bl	8003f8c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	4904      	ldr	r1, [pc, #16]	; (8000784 <HAL_UART_RxCpltCallback+0x6c>)
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <HAL_UART_RxCpltCallback+0x80>)
 8000774:	f003 fc3f 	bl	8003ff6 <HAL_UART_Receive_IT>
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40004400 	.word	0x40004400
 8000784:	20000342 	.word	0x20000342
 8000788:	08009e6c 	.word	0x08009e6c
 800078c:	20000344 	.word	0x20000344
 8000790:	08009e78 	.word	0x08009e78
 8000794:	08009e88 	.word	0x08009e88
 8000798:	200005fc 	.word	0x200005fc

0800079c <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <TM1637_ClkHigh+0x14>)
 80007a6:	f001 f985 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40011000 	.word	0x40011000

080007b4 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <TM1637_ClkLow+0x14>)
 80007be:	f001 f979 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40011000 	.word	0x40011000

080007cc <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2101      	movs	r1, #1
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <TM1637_DataHigh+0x14>)
 80007d6:	f001 f96d 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2101      	movs	r1, #1
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <TM1637_DataLow+0x14>)
 80007ee:	f001 f961 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010c00 	.word	0x40010c00

080007fc <TM1637_DisplayDecimal>:
		TM1637_DisplayDecimal(i++, 0);
	}
}

void TM1637_DisplayDecimal(int num, int displaySeparator)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e032      	b.n	8000872 <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[num % 10];
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <TM1637_DisplayDecimal+0xd4>)
 8000810:	fb83 2301 	smull	r2, r3, r3, r1
 8000814:	109a      	asrs	r2, r3, #2
 8000816:	17cb      	asrs	r3, r1, #31
 8000818:	1ad2      	subs	r2, r2, r3
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	1aca      	subs	r2, r1, r3
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <TM1637_DisplayDecimal+0xd8>)
 8000826:	5c99      	ldrb	r1, [r3, r2]
 8000828:	f107 020c 	add.w	r2, r7, #12
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d110      	bne.n	800085c <TM1637_DisplayDecimal+0x60>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00d      	beq.n	800085c <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8000840:	f107 020c 	add.w	r2, r7, #12
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800084e:	b2d9      	uxtb	r1, r3
 8000850:	f107 020c 	add.w	r2, r7, #12
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	4413      	add	r3, r2
 8000858:	460a      	mov	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
        }
        num /= 10;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <TM1637_DisplayDecimal+0xd4>)
 8000860:	fb82 1203 	smull	r1, r2, r2, r3
 8000864:	1092      	asrs	r2, r2, #2
 8000866:	17db      	asrs	r3, r3, #31
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3301      	adds	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2b03      	cmp	r3, #3
 8000876:	ddc9      	ble.n	800080c <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8000878:	f000 f843 	bl	8000902 <TM1637_Start>
    TM1637_WriteByte(0x40);
 800087c:	2040      	movs	r0, #64	; 0x40
 800087e:	f000 f872 	bl	8000966 <TM1637_WriteByte>
    TM1637_ReadResult();
 8000882:	f000 f860 	bl	8000946 <TM1637_ReadResult>
    TM1637_Stop();
 8000886:	f000 f849 	bl	800091c <TM1637_Stop>

    TM1637_Start();
 800088a:	f000 f83a 	bl	8000902 <TM1637_Start>
    TM1637_WriteByte(0xc0);
 800088e:	20c0      	movs	r0, #192	; 0xc0
 8000890:	f000 f869 	bl	8000966 <TM1637_WriteByte>
    TM1637_ReadResult();
 8000894:	f000 f857 	bl	8000946 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	e00e      	b.n	80008bc <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	f1c3 0303 	rsb	r3, r3, #3
 80008a4:	3318      	adds	r3, #24
 80008a6:	443b      	add	r3, r7
 80008a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f85a 	bl	8000966 <TM1637_WriteByte>
        TM1637_ReadResult();
 80008b2:	f000 f848 	bl	8000946 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	3301      	adds	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	dded      	ble.n	800089e <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 80008c2:	f000 f82b 	bl	800091c <TM1637_Stop>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	66666667 	.word	0x66666667
 80008d4:	08009e94 	.word	0x08009e94

080008d8 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 80008e2:	f000 f80e 	bl	8000902 <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	3b79      	subs	r3, #121	; 0x79
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f83a 	bl	8000966 <TM1637_WriteByte>
    TM1637_ReadResult();
 80008f2:	f000 f828 	bl	8000946 <TM1637_ReadResult>
    TM1637_Stop();
 80008f6:	f000 f811 	bl	800091c <TM1637_Stop>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <TM1637_Start>:

void TM1637_Start(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 8000906:	f7ff ff49 	bl	800079c <TM1637_ClkHigh>
    TM1637_DataHigh();
 800090a:	f7ff ff5f 	bl	80007cc <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 800090e:	2002      	movs	r0, #2
 8000910:	f000 f853 	bl	80009ba <TM1637_DelayUsec>
    TM1637_DataLow();
 8000914:	f7ff ff66 	bl	80007e4 <TM1637_DataLow>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <TM1637_Stop>:

void TM1637_Stop(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8000920:	f7ff ff48 	bl	80007b4 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 8000924:	2002      	movs	r0, #2
 8000926:	f000 f848 	bl	80009ba <TM1637_DelayUsec>
    TM1637_DataLow();
 800092a:	f7ff ff5b 	bl	80007e4 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 f843 	bl	80009ba <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8000934:	f7ff ff32 	bl	800079c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8000938:	2002      	movs	r0, #2
 800093a:	f000 f83e 	bl	80009ba <TM1637_DelayUsec>
    TM1637_DataHigh();
 800093e:	f7ff ff45 	bl	80007cc <TM1637_DataHigh>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}

08000946 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 800094a:	f7ff ff33 	bl	80007b4 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 800094e:	2005      	movs	r0, #5
 8000950:	f000 f833 	bl	80009ba <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8000954:	f7ff ff22 	bl	800079c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8000958:	2002      	movs	r0, #2
 800095a:	f000 f82e 	bl	80009ba <TM1637_DelayUsec>
    TM1637_ClkLow();
 800095e:	f7ff ff29 	bl	80007b4 <TM1637_ClkLow>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e019      	b.n	80009aa <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8000976:	f7ff ff1d 	bl	80007b4 <TM1637_ClkLow>
		if (b & 0x01) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8000984:	f7ff ff22 	bl	80007cc <TM1637_DataHigh>
 8000988:	e001      	b.n	800098e <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 800098a:	f7ff ff2b 	bl	80007e4 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f813 	bl	80009ba <TM1637_DelayUsec>
		b >>= 1;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 800099a:	f7ff feff 	bl	800079c <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 f80b 	bl	80009ba <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	dde2      	ble.n	8000976 <TM1637_WriteByte+0x10>
	}
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 80009c2:	e00d      	b.n	80009e0 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e003      	b.n	80009d2 <TM1637_DelayUsec+0x18>
					__NOP();
 80009ca:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009d8:	dbf7      	blt.n	80009ca <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3b01      	subs	r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1ee      	bne.n	80009c4 <TM1637_DelayUsec+0xa>
        }
    }
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <VL53_init>:
VL53L0X_RangingMeasurementData_t RangingData;
VL53L0X_Dev_t  vl53l0x_c; // center module
VL53L0X_DEV    Dev = &vl53l0x_c;

void VL53_init()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c2;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <VL53_init+0xa4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <VL53_init+0xa8>)
 8000a00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <VL53_init+0xa4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2252      	movs	r2, #82	; 0x52
 8000a0a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a14:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <VL53_init+0xac>)
 8000a16:	f001 f84d 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f000 fcb0 	bl	8001380 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <VL53_init+0xac>)
 8000a28:	f001 f844 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 fca7 	bl	8001380 <HAL_Delay>

	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f000 fded 	bl	8001612 <HAL_NVIC_DisableIRQ>

	VL53L0X_WaitDeviceBooted( Dev );
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <VL53_init+0xa4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fb0b 	bl	8005058 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <VL53_init+0xa4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 f820 	bl	8004a8c <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <VL53_init+0xa4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 f97f 	bl	8004d54 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <VL53_init+0xa4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1c7a      	adds	r2, r7, #1
 8000a5c:	1cb9      	adds	r1, r7, #2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fffc 	bl	8005a5c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <VL53_init+0xa4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1cfa      	adds	r2, r7, #3
 8000a6a:	1d39      	adds	r1, r7, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 fc81 	bl	8006374 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <VL53_init+0xa4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2101      	movs	r1, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fb8b 	bl	8005194 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(Dev);
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <VL53_init+0xa4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 f866 	bl	8005b54 <VL53L0X_StartMeasurement>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a88:	2007      	movs	r0, #7
 8000a8a:	f000 fdb4 	bl	80015f6 <HAL_NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000055c 	.word	0x2000055c
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <VL53_MEASURE>:

uint16_t VL53_MEASURE()
{	uint16_t Measure = RangingData.RangeMilliMeter;
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <VL53_MEASURE+0x18>)
 8000aac:	891b      	ldrh	r3, [r3, #8]
 8000aae:	80fb      	strh	r3, [r7, #6]
	return Measure;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	2000035c 	.word	0x2000035c

08000ac0 <VL53_CLEAR_INTERRUPT_DATA>:

void VL53_CLEAR_INTERRUPT_DATA()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4906      	ldr	r1, [pc, #24]	; (8000ae4 <VL53_CLEAR_INTERRUPT_DATA+0x24>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f005 f944 	bl	8005d58 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fbea 	bl	80062b0 <VL53L0X_ClearInterruptMask>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	2000035c 	.word	0x2000035c

08000ae8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4b52      	ldr	r3, [pc, #328]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a51      	ldr	r2, [pc, #324]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a4b      	ldr	r2, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b1a:	f043 0320 	orr.w	r3, r3, #32
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0320 	and.w	r3, r3, #32
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a45      	ldr	r2, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b43      	ldr	r3, [pc, #268]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a3f      	ldr	r2, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <MX_GPIO_Init+0x160>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f248 0120 	movw	r1, #32800	; 0x8020
 8000b62:	483a      	ldr	r0, [pc, #232]	; (8000c4c <MX_GPIO_Init+0x164>)
 8000b64:	f000 ffa6 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4838      	ldr	r0, [pc, #224]	; (8000c50 <MX_GPIO_Init+0x168>)
 8000b6e:	f000 ffa1 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	4837      	ldr	r0, [pc, #220]	; (8000c54 <MX_GPIO_Init+0x16c>)
 8000b78:	f000 ff9c 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <MX_GPIO_Init+0x170>)
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4830      	ldr	r0, [pc, #192]	; (8000c54 <MX_GPIO_Init+0x16c>)
 8000b92:	f000 fe0b 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT_Pin;
 8000b96:	f248 0320 	movw	r3, #32800	; 0x8020
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4827      	ldr	r0, [pc, #156]	; (8000c4c <MX_GPIO_Init+0x164>)
 8000bb0:	f000 fdfc 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4821      	ldr	r0, [pc, #132]	; (8000c50 <MX_GPIO_Init+0x168>)
 8000bcc:	f000 fdee 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_GPIO_Init+0x174>)
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	481b      	ldr	r0, [pc, #108]	; (8000c50 <MX_GPIO_Init+0x168>)
 8000be4:	f000 fde2 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_Pin;
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4815      	ldr	r0, [pc, #84]	; (8000c54 <MX_GPIO_Init+0x16c>)
 8000c00:	f000 fdd4 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_GPIO_Init+0x174>)
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_GPIO_Init+0x164>)
 8000c1a:	f000 fdc7 	bl	80017ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fccb 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c28:	2007      	movs	r0, #7
 8000c2a:	f000 fce4 	bl	80015f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f000 fcc3 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c38:	2028      	movs	r0, #40	; 0x28
 8000c3a:	f000 fcdc 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40010c00 	.word	0x40010c00
 8000c54:	40011000 	.word	0x40011000
 8000c58:	10110000 	.word	0x10110000
 8000c5c:	10210000 	.word	0x10210000

08000c60 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_I2C1_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_I2C1_Init+0x50>)
 8000c9e:	f000 ff53 	bl	8001b48 <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f000 f903 	bl	8000eb2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000508 	.word	0x20000508
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	000186a0 	.word	0x000186a0

08000cbc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_I2C2_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_I2C2_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cfa:	f000 ff25 	bl	8001b48 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 f8d5 	bl	8000eb2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000055c 	.word	0x2000055c
 8000d10:	40005800 	.word	0x40005800
 8000d14:	000186a0 	.word	0x000186a0

08000d18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_I2C_MspInit+0xc8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d124      	bne.n	8000d82 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d50:	23c0      	movs	r3, #192	; 0xc0
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4821      	ldr	r0, [pc, #132]	; (8000de8 <HAL_I2C_MspInit+0xd0>)
 8000d64:	f000 fd22 	bl	80017ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d72:	61d3      	str	r3, [r2, #28]
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d80:	e029      	b.n	8000dd6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_I2C_MspInit+0xd4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d124      	bne.n	8000dd6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000daa:	2312      	movs	r3, #18
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	4619      	mov	r1, r3
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_I2C_MspInit+0xd0>)
 8000dba:	f000 fcf7 	bl	80017ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_I2C_MspInit+0xcc>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40005800 	.word	0x40005800

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fa62 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f81a 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f7ff fe74 	bl	8000ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e00:	f000 f9c6 	bl	8001190 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e04:	f7ff ff2c 	bl	8000c60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e08:	f7ff ff58 	bl	8000cbc <MX_I2C2_Init>
  MX_TIM1_Init();
 8000e0c:	f000 f930 	bl	8001070 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  peripherialsInit();
 8000e10:	f7ff fb60 	bl	80004d4 <peripherialsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Compute(mode,status);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <main+0x38>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <main+0x3c>)
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fb88 	bl	8000534 <Compute>
 8000e24:	e7f6      	b.n	8000e14 <main+0x24>
 8000e26:	bf00      	nop
 8000e28:	2000033d 	.word	0x2000033d
 8000e2c:	2000033c 	.word	0x2000033c

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 fb6e 	bl	8009520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 f82d 	bl	8002ed0 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e7c:	f000 f819 	bl	8000eb2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fa9a 	bl	80033d4 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ea6:	f000 f804 	bl	8000eb2 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3740      	adds	r7, #64	; 0x40
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb6:	b672      	cpsid	i
}
 8000eb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eba:	e7fe      	b.n	8000eba <Error_Handler+0x8>

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6193      	str	r3, [r2, #24]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_MspInit+0x60>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_MspInit+0x60>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f9ef 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f000 fdd0 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM1_BRK_IRQHandler+0x10>)
 8000f82:	f002 fc57 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200005b4 	.word	0x200005b4

08000f90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_UP_IRQHandler+0x10>)
 8000f96:	f002 fc4d 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200005b4 	.word	0x200005b4

08000fa4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000faa:	f002 fc43 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200005b4 	.word	0x200005b4

08000fb8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM1_CC_IRQHandler+0x10>)
 8000fbe:	f002 fc39 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200005b4 	.word	0x200005b4

08000fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <USART2_IRQHandler+0x10>)
 8000fd2:	f003 f835 	bl	8004040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200005fc 	.word	0x200005fc

08000fe0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000fe4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fe8:	f000 fd96 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ff0:	f000 fd92 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f008 fa82 	bl	8009530 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20005000 	.word	0x20005000
 8001058:	00000400 	.word	0x00000400
 800105c:	200005b0 	.word	0x200005b0
 8001060:	200007d0 	.word	0x200007d0

08001064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_TIM1_Init+0x9c>)
 800108e:	4a20      	ldr	r2, [pc, #128]	; (8001110 <MX_TIM1_Init+0xa0>)
 8001090:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM1_Init+0x9c>)
 8001094:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001098:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_TIM1_Init+0x9c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM1_Init+0x9c>)
 80010a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM1_Init+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_TIM1_Init+0x9c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_TIM1_Init+0x9c>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_TIM1_Init+0x9c>)
 80010bc:	f002 fb18 	bl	80036f0 <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010c6:	f7ff fef4 	bl	8000eb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	4619      	mov	r1, r3
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_TIM1_Init+0x9c>)
 80010d8:	f002 fcb4 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010e2:	f7ff fee6 	bl	8000eb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_TIM1_Init+0x9c>)
 80010f4:	f002 fe8a 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80010fe:	f7ff fed8 	bl	8000eb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200005b4 	.word	0x200005b4
 8001110:	40012c00 	.word	0x40012c00

08001114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_TIM_Base_MspInit+0x74>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12b      	bne.n	800117e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_TIM_Base_MspInit+0x78>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_TIM_Base_MspInit+0x78>)
 800112c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_TIM_Base_MspInit+0x78>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2018      	movs	r0, #24
 8001144:	f000 fa3b 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001148:	2018      	movs	r0, #24
 800114a:	f000 fa54 	bl	80015f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2019      	movs	r0, #25
 8001154:	f000 fa33 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001158:	2019      	movs	r0, #25
 800115a:	f000 fa4c 	bl	80015f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201a      	movs	r0, #26
 8001164:	f000 fa2b 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001168:	201a      	movs	r0, #26
 800116a:	f000 fa44 	bl	80015f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	201b      	movs	r0, #27
 8001174:	f000 fa23 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001178:	201b      	movs	r0, #27
 800117a:	f000 fa3c 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40012c00 	.word	0x40012c00
 800118c:	40021000 	.word	0x40021000

08001190 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f002 fe90 	bl	8003eec <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f7ff fe6e 	bl	8000eb2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200005fc 	.word	0x200005fc
 80011e0:	40004400 	.word	0x40004400

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_UART_MspInit+0x80>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d12b      	bne.n	800125c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_UART_MspInit+0x84>)
 800120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_UART_MspInit+0x84>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_UART_MspInit+0x84>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001234:	230c      	movs	r3, #12
 8001236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2302      	movs	r3, #2
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_UART_MspInit+0x88>)
 8001248:	f000 fab0 	bl	80017ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2026      	movs	r0, #38	; 0x26
 8001252:	f000 f9b4 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001256:	2026      	movs	r0, #38	; 0x26
 8001258:	f000 f9cd 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40004400 	.word	0x40004400
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800

08001270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001270:	f7ff fef8 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001276:	490c      	ldr	r1, [pc, #48]	; (80012a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800128c:	4c09      	ldr	r4, [pc, #36]	; (80012b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f008 f94f 	bl	800953c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129e:	f7ff fda7 	bl	8000df0 <main>
  bx lr
 80012a2:	4770      	bx	lr
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 80012ac:	08009f10 	.word	0x08009f10
  ldr r2, =_sbss
 80012b0:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80012b4:	200007d0 	.word	0x200007d0

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x28>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x28>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f96b 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fdf0 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f991 	bl	800162e <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001324:	f000 f94b 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000004 	.word	0x20000004
 8001340:	2000000c 	.word	0x2000000c
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x1c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x20>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x20>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20000644 	.word	0x20000644

0800136c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_GetTick+0x10>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000644 	.word	0x20000644

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff fff0 	bl	800136c <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffe0 	bl	800136c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4906      	ldr	r1, [pc, #24]	; (8001460 <__NVIC_EnableIRQ+0x34>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db12      	blt.n	800149c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	490a      	ldr	r1, [pc, #40]	; (80014a8 <__NVIC_DisableIRQ+0x44>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	3320      	adds	r3, #32
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001490:	f3bf 8f4f 	dsb	sy
}
 8001494:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001496:	f3bf 8f6f 	isb	sy
}
 800149a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff09 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff1e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff11 	bl	800142c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff1f 	bl	8001464 <__NVIC_DisableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff94 	bl	8001564 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d008      	beq.n	8001670 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e020      	b.n	80016b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 020e 	bic.w	r2, r2, #14
 800167e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f202 	lsl.w	r2, r1, r2
 800169e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d005      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e051      	b.n	8001784 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 020e 	bic.w	r2, r2, #14
 80016ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_DMA_Abort_IT+0xd4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d029      	beq.n	800175e <HAL_DMA_Abort_IT+0xa2>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_DMA_Abort_IT+0xd8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <HAL_DMA_Abort_IT+0x9e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_DMA_Abort_IT+0xdc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01a      	beq.n	8001754 <HAL_DMA_Abort_IT+0x98>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_DMA_Abort_IT+0xe0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d012      	beq.n	800174e <HAL_DMA_Abort_IT+0x92>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_DMA_Abort_IT+0xe4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00a      	beq.n	8001748 <HAL_DMA_Abort_IT+0x8c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <HAL_DMA_Abort_IT+0xe8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d102      	bne.n	8001742 <HAL_DMA_Abort_IT+0x86>
 800173c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001740:	e00e      	b.n	8001760 <HAL_DMA_Abort_IT+0xa4>
 8001742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001746:	e00b      	b.n	8001760 <HAL_DMA_Abort_IT+0xa4>
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	e008      	b.n	8001760 <HAL_DMA_Abort_IT+0xa4>
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	e005      	b.n	8001760 <HAL_DMA_Abort_IT+0xa4>
 8001754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001758:	e002      	b.n	8001760 <HAL_DMA_Abort_IT+0xa4>
 800175a:	2310      	movs	r3, #16
 800175c:	e000      	b.n	8001760 <HAL_DMA_Abort_IT+0xa4>
 800175e:	2301      	movs	r3, #1
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_DMA_Abort_IT+0xec>)
 8001762:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
    } 
  }
  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020008 	.word	0x40020008
 8001794:	4002001c 	.word	0x4002001c
 8001798:	40020030 	.word	0x40020030
 800179c:	40020044 	.word	0x40020044
 80017a0:	40020058 	.word	0x40020058
 80017a4:	4002006c 	.word	0x4002006c
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e169      	b.n	8001a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8158 	bne.w	8001a8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a9a      	ldr	r2, [pc, #616]	; (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d05e      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017e8:	4a98      	ldr	r2, [pc, #608]	; (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d875      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017ee:	4a98      	ldr	r2, [pc, #608]	; (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d058      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017f4:	4a96      	ldr	r2, [pc, #600]	; (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d86f      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017fa:	4a96      	ldr	r2, [pc, #600]	; (8001a54 <HAL_GPIO_Init+0x2a8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d052      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001800:	4a94      	ldr	r2, [pc, #592]	; (8001a54 <HAL_GPIO_Init+0x2a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d869      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001806:	4a94      	ldr	r2, [pc, #592]	; (8001a58 <HAL_GPIO_Init+0x2ac>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04c      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800180c:	4a92      	ldr	r2, [pc, #584]	; (8001a58 <HAL_GPIO_Init+0x2ac>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d863      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001812:	4a92      	ldr	r2, [pc, #584]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d046      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001818:	4a90      	ldr	r2, [pc, #576]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d85d      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d82a      	bhi.n	8001878 <HAL_GPIO_Init+0xcc>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d859      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <HAL_GPIO_Init+0x80>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018a7 	.word	0x080018a7
 8001830:	08001881 	.word	0x08001881
 8001834:	08001893 	.word	0x08001893
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	08001889 	.word	0x08001889
 8001874:	0800189d 	.word	0x0800189d
 8001878:	4a79      	ldr	r2, [pc, #484]	; (8001a60 <HAL_GPIO_Init+0x2b4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187e:	e02c      	b.n	80018da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e029      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e024      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	3308      	adds	r3, #8
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e01f      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	330c      	adds	r3, #12
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e01a      	b.n	80018dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ae:	2304      	movs	r3, #4
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e013      	b.n	80018dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	611a      	str	r2, [r3, #16]
          break;
 80018c6:	e009      	b.n	80018dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	615a      	str	r2, [r3, #20]
          break;
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x130>
          break;
 80018da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	; 0xff
 80018e0:	d801      	bhi.n	80018e6 <HAL_GPIO_Init+0x13a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_Init+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d802      	bhi.n	80018f8 <HAL_GPIO_Init+0x14c>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x152>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	3b08      	subs	r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	210f      	movs	r1, #15
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80b1 	beq.w	8001a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001944:	4a48      	ldr	r2, [pc, #288]	; (8001a68 <HAL_GPIO_Init+0x2bc>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <HAL_GPIO_Init+0x2c0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_GPIO_Init+0x1ec>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <HAL_GPIO_Init+0x2c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1e8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3e      	ldr	r2, [pc, #248]	; (8001a74 <HAL_GPIO_Init+0x2c8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1e4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3d      	ldr	r2, [pc, #244]	; (8001a78 <HAL_GPIO_Init+0x2cc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1e0>
 8001988:	2303      	movs	r3, #3
 800198a:	e006      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 800198c:	2304      	movs	r3, #4
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001998:	2300      	movs	r3, #0
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	492f      	ldr	r1, [pc, #188]	; (8001a68 <HAL_GPIO_Init+0x2bc>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	492c      	ldr	r1, [pc, #176]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4928      	ldr	r1, [pc, #160]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4922      	ldr	r1, [pc, #136]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	491e      	ldr	r1, [pc, #120]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4918      	ldr	r1, [pc, #96]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4914      	ldr	r1, [pc, #80]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d021      	beq.n	8001a80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e021      	b.n	8001a8e <HAL_GPIO_Init+0x2e2>
 8001a4a:	bf00      	nop
 8001a4c:	10320000 	.word	0x10320000
 8001a50:	10310000 	.word	0x10310000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	10210000 	.word	0x10210000
 8001a5c:	10120000 	.word	0x10120000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40011400 	.word	0x40011400
 8001a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f47f ae8e 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	372c      	adds	r7, #44	; 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43d9      	mvns	r1, r3
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	400b      	ands	r3, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fda4 	bl	8000684 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e12b      	b.n	8001db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff f8d2 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bac:	f001 fd5a 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a81      	ldr	r2, [pc, #516]	; (8001dbc <HAL_I2C_Init+0x274>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d807      	bhi.n	8001bcc <HAL_I2C_Init+0x84>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a80      	ldr	r2, [pc, #512]	; (8001dc0 <HAL_I2C_Init+0x278>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e006      	b.n	8001bda <HAL_I2C_Init+0x92>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a7d      	ldr	r2, [pc, #500]	; (8001dc4 <HAL_I2C_Init+0x27c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0e7      	b.n	8001db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a78      	ldr	r2, [pc, #480]	; (8001dc8 <HAL_I2C_Init+0x280>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9b      	lsrs	r3, r3, #18
 8001bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a6a      	ldr	r2, [pc, #424]	; (8001dbc <HAL_I2C_Init+0x274>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_I2C_Init+0xd4>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	e009      	b.n	8001c30 <HAL_I2C_Init+0xe8>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4a69      	ldr	r2, [pc, #420]	; (8001dcc <HAL_I2C_Init+0x284>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	495c      	ldr	r1, [pc, #368]	; (8001dbc <HAL_I2C_Init+0x274>)
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d819      	bhi.n	8001c84 <HAL_I2C_Init+0x13c>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e59      	subs	r1, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c64:	400b      	ands	r3, r1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_I2C_Init+0x138>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e59      	subs	r1, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7e:	e051      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e04f      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <HAL_I2C_Init+0x168>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e012      	b.n	8001cd6 <HAL_I2C_Init+0x18e>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Init+0x196>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e022      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10e      	bne.n	8001d04 <HAL_I2C_Init+0x1bc>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1e58      	subs	r0, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	440b      	add	r3, r1
 8001cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d02:	e00f      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e58      	subs	r0, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	0099      	lsls	r1, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	6809      	ldr	r1, [r1, #0]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6911      	ldr	r1, [r2, #16]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68d2      	ldr	r2, [r2, #12]
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	000186a0 	.word	0x000186a0
 8001dc0:	001e847f 	.word	0x001e847f
 8001dc4:	003d08ff 	.word	0x003d08ff
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	10624dd3 	.word	0x10624dd3

08001dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	460b      	mov	r3, r1
 8001dde:	817b      	strh	r3, [r7, #10]
 8001de0:	4613      	mov	r3, r2
 8001de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff fac2 	bl	800136c <HAL_GetTick>
 8001de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	f040 80e0 	bne.w	8001fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2319      	movs	r3, #25
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4970      	ldr	r1, [pc, #448]	; (8001fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fe2e 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0d3      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2C_Master_Transmit+0x50>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e0cc      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d007      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2210      	movs	r2, #16
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	893a      	ldrh	r2, [r7, #8]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e88:	8979      	ldrh	r1, [r7, #10]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fc02 	bl	8002698 <I2C_MasterRequestWrite>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e08d      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001eb4:	e066      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	6a39      	ldr	r1, [r7, #32]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 feec 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d107      	bne.n	8001ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06b      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d11b      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x188>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	6a39      	ldr	r1, [r7, #32]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fee3 	bl	8002d28 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d107      	bne.n	8001f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01a      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d194      	bne.n	8001eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	00100002 	.word	0x00100002
 8001fc8:	ffff0000 	.word	0xffff0000

08001fcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	460b      	mov	r3, r1
 8001fda:	817b      	strh	r3, [r7, #10]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff f9c2 	bl	800136c <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 824b 	bne.w	800248e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2319      	movs	r3, #25
 8001ffe:	2201      	movs	r2, #1
 8002000:	497f      	ldr	r1, [pc, #508]	; (8002200 <HAL_I2C_Master_Receive+0x234>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fd2e 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	e23e      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2C_Master_Receive+0x54>
 800201c:	2302      	movs	r3, #2
 800201e:	e237      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d007      	beq.n	8002046 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2222      	movs	r2, #34	; 0x22
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2210      	movs	r2, #16
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	893a      	ldrh	r2, [r7, #8]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a5f      	ldr	r2, [pc, #380]	; (8002204 <HAL_I2C_Master_Receive+0x238>)
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fb84 	bl	800279c <I2C_MasterRequestRead>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1f8      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d113      	bne.n	80020ce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e1cc      	b.n	8002468 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d11e      	bne.n	8002114 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020e6:	b672      	cpsid	i
}
 80020e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002110:	b662      	cpsie	i
}
 8002112:	e035      	b.n	8002180 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b02      	cmp	r3, #2
 800211a:	d11e      	bne.n	800215a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002156:	b662      	cpsie	i
}
 8002158:	e012      	b.n	8002180 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002180:	e172      	b.n	8002468 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	2b03      	cmp	r3, #3
 8002188:	f200 811f 	bhi.w	80023ca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	2b01      	cmp	r3, #1
 8002192:	d123      	bne.n	80021dc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fe0d 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e173      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021da:	e145      	b.n	8002468 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d152      	bne.n	800228a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2200      	movs	r2, #0
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <HAL_I2C_Master_Receive+0x23c>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc38 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e148      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
 80021fe:	bf00      	nop
 8002200:	00100002 	.word	0x00100002
 8002204:	ffff0000 	.word	0xffff0000
 8002208:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
}
 800220e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002252:	b662      	cpsie	i
}
 8002254:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002288:	e0ee      	b.n	8002468 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	2200      	movs	r2, #0
 8002292:	4981      	ldr	r1, [pc, #516]	; (8002498 <HAL_I2C_Master_Receive+0x4cc>)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fbe5 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0f5      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022b4:	b672      	cpsid	i
}
 80022b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022ea:	4b6c      	ldr	r3, [pc, #432]	; (800249c <HAL_I2C_Master_Receive+0x4d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	4a6b      	ldr	r2, [pc, #428]	; (80024a0 <HAL_I2C_Master_Receive+0x4d4>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a1a      	lsrs	r2, r3, #8
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00da      	lsls	r2, r3, #3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	3b01      	subs	r3, #1
 8002308:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d118      	bne.n	8002342 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002332:	b662      	cpsie	i
}
 8002334:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0a6      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d1d9      	bne.n	8002304 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002392:	b662      	cpsie	i
}
 8002394:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c8:	e04e      	b.n	8002468 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fcf2 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e058      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d124      	bne.n	8002468 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002434:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f ae88 	bne.w	8002182 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	00010004 	.word	0x00010004
 800249c:	20000004 	.word	0x20000004
 80024a0:	14f8b589 	.word	0x14f8b589

080024a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7fe ff55 	bl	800136c <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	f040 80d9 	bne.w	8002684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2319      	movs	r3, #25
 80024d8:	2201      	movs	r2, #1
 80024da:	496d      	ldr	r1, [pc, #436]	; (8002690 <HAL_I2C_Mem_Write+0x1ec>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fac1 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0cc      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Mem_Write+0x56>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0c5      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d007      	beq.n	8002520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2221      	movs	r2, #33	; 0x21
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a4d      	ldr	r2, [pc, #308]	; (8002694 <HAL_I2C_Mem_Write+0x1f0>)
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002562:	88f8      	ldrh	r0, [r7, #6]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	8979      	ldrh	r1, [r7, #10]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4603      	mov	r3, r0
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f9e0 	bl	8002938 <I2C_RequestMemoryWrite>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d052      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e081      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fb86 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11b      	bne.n	8002624 <HAL_I2C_Mem_Write+0x180>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1aa      	bne.n	8002582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fb79 	bl	8002d28 <I2C_WaitOnBTFFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e016      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	00100002 	.word	0x00100002
 8002694:	ffff0000 	.word	0xffff0000

08002698 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	460b      	mov	r3, r1
 80026a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d006      	beq.n	80026c2 <I2C_MasterRequestWrite+0x2a>
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d003      	beq.n	80026c2 <I2C_MasterRequestWrite+0x2a>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026c0:	d108      	bne.n	80026d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e00b      	b.n	80026ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d107      	bne.n	80026ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f9b3 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002712:	d103      	bne.n	800271c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e035      	b.n	800278c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002728:	d108      	bne.n	800273c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002738:	611a      	str	r2, [r3, #16]
 800273a:	e01b      	b.n	8002774 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800273c:	897b      	ldrh	r3, [r7, #10]
 800273e:	11db      	asrs	r3, r3, #7
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0306 	and.w	r3, r3, #6
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f063 030f 	orn	r3, r3, #15
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <I2C_MasterRequestWrite+0xfc>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f9fc 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e010      	b.n	800278c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800276a:	897b      	ldrh	r3, [r7, #10]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <I2C_MasterRequestWrite+0x100>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f9ec 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	00010008 	.word	0x00010008
 8002798:	00010002 	.word	0x00010002

0800279c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	460b      	mov	r3, r1
 80027aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d006      	beq.n	80027d6 <I2C_MasterRequestRead+0x3a>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d003      	beq.n	80027d6 <I2C_MasterRequestRead+0x3a>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e00b      	b.n	8002800 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	d107      	bne.n	8002800 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f929 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002826:	d103      	bne.n	8002830 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e079      	b.n	8002928 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800283c:	d108      	bne.n	8002850 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	e05f      	b.n	8002910 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	11db      	asrs	r3, r3, #7
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0306 	and.w	r3, r3, #6
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f063 030f 	orn	r3, r3, #15
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4930      	ldr	r1, [pc, #192]	; (8002930 <I2C_MasterRequestRead+0x194>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f972 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e054      	b.n	8002928 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4929      	ldr	r1, [pc, #164]	; (8002934 <I2C_MasterRequestRead+0x198>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f962 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e044      	b.n	8002928 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f8c7 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00d      	beq.n	80028f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ea:	d103      	bne.n	80028f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e017      	b.n	8002928 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028f8:	897b      	ldrh	r3, [r7, #10]
 80028fa:	11db      	asrs	r3, r3, #7
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 0306 	and.w	r3, r3, #6
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f063 030e 	orn	r3, r3, #14
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <I2C_MasterRequestRead+0x198>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f91e 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	00010008 	.word	0x00010008
 8002934:	00010002 	.word	0x00010002

08002938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	460b      	mov	r3, r1
 800294c:	813b      	strh	r3, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2200      	movs	r2, #0
 800296a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f878 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002988:	d103      	bne.n	8002992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e05f      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002996:	897b      	ldrh	r3, [r7, #10]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	492d      	ldr	r1, [pc, #180]	; (8002a60 <I2C_RequestMemoryWrite+0x128>)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f8d3 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e04c      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f95e 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d107      	bne.n	80029fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e02b      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	e021      	b.n	8002a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a10:	893b      	ldrh	r3, [r7, #8]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f938 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d107      	bne.n	8002a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e005      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4a:	893b      	ldrh	r3, [r7, #8]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	00010002 	.word	0x00010002

08002a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a74:	e048      	b.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7c:	d044      	beq.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fc75 	bl	800136c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d139      	bne.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	e00c      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d116      	bne.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e023      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10d      	bne.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	e00c      	b.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d093      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b66:	e071      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d123      	bne.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e067      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc6:	d041      	beq.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc8:	f7fe fbd0 	bl	800136c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d302      	bcc.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d136      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10c      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e00b      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e021      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10c      	bne.n	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e00b      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f47f af6d 	bne.w	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8e3 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbc:	d028      	beq.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fe fb55 	bl	800136c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11d      	bne.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d016      	beq.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	d1c3      	bne.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d34:	e034      	b.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f89b 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e034      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4c:	d028      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe fb0d 	bl	800136c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11d      	bne.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d016      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d1c3      	bne.n	8002d36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dc4:	e049      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d119      	bne.n	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e030      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe fab0 	bl	800136c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d016      	beq.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d1ae      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d11b      	bne.n	8002ec2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e272      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8087 	beq.w	8002ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d00c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002efc:	4b8f      	ldr	r3, [pc, #572]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d112      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
 8002f08:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d06c      	beq.n	8002ffc <HAL_RCC_OscConfig+0x12c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d168      	bne.n	8002ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e24c      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x76>
 8002f38:	4b80      	ldr	r3, [pc, #512]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a7f      	ldr	r2, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e02e      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7a      	ldr	r2, [pc, #488]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b78      	ldr	r3, [pc, #480]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a77      	ldr	r2, [pc, #476]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e01d      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0xbc>
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a71      	ldr	r2, [pc, #452]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f8c:	4b6b      	ldr	r3, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a67      	ldr	r2, [pc, #412]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe f9de 	bl	800136c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f9da 	bl	800136c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e200      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xe4>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe f9ca 	bl	800136c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe f9c6 	bl	800136c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1ec      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x10c>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003016:	4b49      	ldr	r3, [pc, #292]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b08      	cmp	r3, #8
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x18c>
 8003022:	4b46      	ldr	r3, [pc, #280]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d116      	bne.n	800305c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x176>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1c0      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4939      	ldr	r1, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	e03a      	b.n	80030d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe f97f 	bl	800136c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fe f97b 	bl	800136c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1a1      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4927      	ldr	r1, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe f95e 	bl	800136c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe f95a 	bl	800136c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e180      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03a      	beq.n	8003154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fe f93e 	bl	800136c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fe f93a 	bl	800136c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e160      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f000 face 	bl	80036b4 <RCC_Delay>
 8003118:	e01c      	b.n	8003154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe f924 	bl	800136c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003126:	e00f      	b.n	8003148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7fe f920 	bl	800136c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d908      	bls.n	8003148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e146      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	42420000 	.word	0x42420000
 8003144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e9      	bne.n	8003128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a6 	beq.w	80032ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	61d3      	str	r3, [r2, #28]
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fe f8e1 	bl	800136c <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fe f8dd 	bl	800136c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b64      	cmp	r3, #100	; 0x64
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e103      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x312>
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a6e      	ldr	r2, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e02d      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x334>
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
 8003202:	e01c      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x356>
 800320c:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fe f891 	bl	800136c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe f88d 	bl	800136c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0b1      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ee      	beq.n	800324e <HAL_RCC_OscConfig+0x37e>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fe f87b 	bl	800136c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe f877 	bl	800136c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e09b      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8087 	beq.w	80033c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d061      	beq.n	8003388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d146      	bne.n	800335a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fe f84b 	bl	800136c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe f847 	bl	800136c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e06d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d108      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a19      	ldr	r1, [r3, #32]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	430b      	orrs	r3, r1
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe f81b 	bl	800136c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333a:	f7fe f817 	bl	800136c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e03d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x46a>
 8003358:	e035      	b.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe f804 	bl	800136c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe f800 	bl	800136c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e026      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x498>
 8003386:	e01e      	b.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e019      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
 8003394:	40021000 	.word	0x40021000
 8003398:	40007000 	.word	0x40007000
 800339c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x500>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d0      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4965      	ldr	r1, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d040      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e073      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06b      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4936      	ldr	r1, [pc, #216]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fd ff52 	bl	800136c <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fd ff4e 	bl	800136c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e053      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d210      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4922      	ldr	r1, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490a      	ldr	r1, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1cc>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd feb0 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
 800359c:	08009ea8 	.word	0x08009ea8
 80035a0:	20000004 	.word	0x20000004
 80035a4:	20000008 	.word	0x20000008

080035a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0x94>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d002      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x30>
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d003      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x36>
 80035d6:	e027      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 80035da:	613b      	str	r3, [r7, #16]
      break;
 80035dc:	e027      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0c9b      	lsrs	r3, r3, #18
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_GetSysClockFreq+0x94>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0c5b      	lsrs	r3, r3, #17
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e004      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <HAL_RCC_GetSysClockFreq+0xa4>)
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	613b      	str	r3, [r7, #16]
      break;
 8003626:	e002      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362e:	693b      	ldr	r3, [r7, #16]
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	007a1200 	.word	0x007a1200
 8003644:	08009ec0 	.word	0x08009ec0
 8003648:	08009ed0 	.word	0x08009ed0
 800364c:	003d0900 	.word	0x003d0900

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <HAL_RCC_GetHCLKFreq+0x10>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000004 	.word	0x20000004

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003668:	f7ff fff2 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08009eb8 	.word	0x08009eb8

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003690:	f7ff ffde 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0adb      	lsrs	r3, r3, #11
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08009eb8 	.word	0x08009eb8

080036b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <RCC_Delay+0x34>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <RCC_Delay+0x38>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d0:	bf00      	nop
  }
  while (Delay --);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f9      	bne.n	80036d0 <RCC_Delay+0x1c>
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	20000004 	.word	0x20000004
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e041      	b.n	8003786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fcfc 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 fa74 	bl	8003c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e03a      	b.n	800381e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIM_Base_Start_IT+0x98>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x58>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d009      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x58>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <HAL_TIM_Base_Start_IT+0x9c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x58>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_TIM_Base_Start_IT+0xa0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d111      	bne.n	800380c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d010      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	e007      	b.n	800381c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0202 	mvn.w	r2, #2
 8003860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9b4 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9a7 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9b6 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0204 	mvn.w	r2, #4
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f98a 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f97d 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f98c 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0208 	mvn.w	r2, #8
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2204      	movs	r2, #4
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f960 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f953 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f962 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b10      	cmp	r3, #16
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2208      	movs	r2, #8
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f936 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f929 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f938 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fc fe96 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa7b 	bl	8003eda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8fc 	bl	8003c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0220 	mvn.w	r2, #32
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa46 	bl	8003ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_ConfigClockSource+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0b4      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x186>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a98:	d03e      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0xd4>
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9e:	f200 8087 	bhi.w	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	f000 8086 	beq.w	8003bb6 <HAL_TIM_ConfigClockSource+0x172>
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aae:	d87f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d01a      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0xa6>
 8003ab4:	2b70      	cmp	r3, #112	; 0x70
 8003ab6:	d87b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d050      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x11a>
 8003abc:	2b60      	cmp	r3, #96	; 0x60
 8003abe:	d877      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d03c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ac4:	2b50      	cmp	r3, #80	; 0x50
 8003ac6:	d873      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d058      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x13a>
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d86f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d064      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d86b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d060      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d867      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d05a      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae8:	e062      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003afa:	f000 f968 	bl	8003dce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]
      break;
 8003b16:	e04f      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b28:	f000 f951 	bl	8003dce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3a:	609a      	str	r2, [r3, #8]
      break;
 8003b3c:	e03c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 f8c8 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2150      	movs	r1, #80	; 0x50
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f91f 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e02c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 f8e6 	bl	8003d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2160      	movs	r1, #96	; 0x60
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f90f 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e01c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 f8a8 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f8ff 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f000 f8f6 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <TIM_Base_SetConfig+0xb8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0x30>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0x30>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <TIM_Base_SetConfig+0xbc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0x30>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <TIM_Base_SetConfig+0xc0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <TIM_Base_SetConfig+0xb8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <TIM_Base_SetConfig+0xbc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <TIM_Base_SetConfig+0xc0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <TIM_Base_SetConfig+0xb8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d103      	bne.n	8003cc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	615a      	str	r2, [r3, #20]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	031b      	lsls	r3, r3, #12
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f043 0307 	orr.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	609a      	str	r2, [r3, #8]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e046      	b.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d009      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10c      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e042      	b.n	8003f84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd f966 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fd09 	bl	8004948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d121      	bne.n	8003fea <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_UART_Transmit_IT+0x26>
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e01a      	b.n	8003fec <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2221      	movs	r2, #33	; 0x21
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fe4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e000      	b.n	8003fec <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b20      	cmp	r3, #32
 800400e:	d112      	bne.n	8004036 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_UART_Receive_IT+0x26>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e00b      	b.n	8004038 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	461a      	mov	r2, r3
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fab6 	bl	800459e <UART_Start_Receive_IT>
 8004032:	4603      	mov	r3, r0
 8004034:	e000      	b.n	8004038 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b0ba      	sub	sp, #232	; 0xe8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800407e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10f      	bne.n	80040a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_UART_IRQHandler+0x66>
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fb93 	bl	80047ca <UART_Receive_IT>
      return;
 80040a4:	e25b      	b.n	800455e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80de 	beq.w	800426c <HAL_UART_IRQHandler+0x22c>
 80040b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80d1 	beq.w	800426c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0xae>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_UART_IRQHandler+0xd2>
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f043 0202 	orr.w	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_UART_IRQHandler+0xf6>
 800411e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d011      	beq.n	8004166 <HAL_UART_IRQHandler+0x126>
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800414e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0208 	orr.w	r2, r3, #8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 81f2 	beq.w	8004554 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_UART_IRQHandler+0x14e>
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb1e 	bl	80047ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <HAL_UART_IRQHandler+0x17a>
 80041b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d04f      	beq.n	800425a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa28 	bl	8004610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d041      	beq.n	8004252 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1d9      	bne.n	80041ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d013      	beq.n	800424a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	4a7e      	ldr	r2, [pc, #504]	; (8004420 <HAL_UART_IRQHandler+0x3e0>)
 8004228:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd fa44 	bl	80016bc <HAL_DMA_Abort_IT>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004244:	4610      	mov	r0, r2
 8004246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e00e      	b.n	8004268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f993 	bl	8004576 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e00a      	b.n	8004268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f98f 	bl	8004576 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e006      	b.n	8004268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f98b 	bl	8004576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004266:	e175      	b.n	8004554 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	bf00      	nop
    return;
 800426a:	e173      	b.n	8004554 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	2b01      	cmp	r3, #1
 8004272:	f040 814f 	bne.w	8004514 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8148 	beq.w	8004514 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8141 	beq.w	8004514 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80b6 	beq.w	8004424 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8145 	beq.w	8004558 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042d6:	429a      	cmp	r2, r3
 80042d8:	f080 813e 	bcs.w	8004558 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	f000 8088 	beq.w	8004400 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800430a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800430e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800431c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004328:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1d9      	bne.n	80042f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800434c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3314      	adds	r3, #20
 800435c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004360:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004364:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004368:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e1      	bne.n	800433c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3314      	adds	r3, #20
 800437e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800439c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800439e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e3      	bne.n	8004378 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d0:	f023 0310 	bic.w	r3, r3, #16
 80043d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80043e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e3      	bne.n	80043be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd f923 	bl	8001646 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800440e:	b29b      	uxth	r3, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8b6 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800441c:	e09c      	b.n	8004558 <HAL_UART_IRQHandler+0x518>
 800441e:	bf00      	nop
 8004420:	080046d5 	.word	0x080046d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800442c:	b29b      	uxth	r3, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 808e 	beq.w	800455c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8089 	beq.w	800455c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800446e:	647a      	str	r2, [r7, #68]	; 0x44
 8004470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e3      	bne.n	800444a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	623b      	str	r3, [r7, #32]
   return(result);
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044a6:	633a      	str	r2, [r7, #48]	; 0x30
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e3      	bne.n	8004482 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0310 	bic.w	r3, r3, #16
 80044de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044ec:	61fa      	str	r2, [r7, #28]
 80044ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	617b      	str	r3, [r7, #20]
   return(result);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e3      	bne.n	80044c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004506:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f83b 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004512:	e023      	b.n	800455c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <HAL_UART_IRQHandler+0x4f4>
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8e5 	bl	80046fc <UART_Transmit_IT>
    return;
 8004532:	e014      	b.n	800455e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00e      	beq.n	800455e <HAL_UART_IRQHandler+0x51e>
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f924 	bl	800479a <UART_EndTransmit_IT>
    return;
 8004552:	e004      	b.n	800455e <HAL_UART_IRQHandler+0x51e>
    return;
 8004554:	bf00      	nop
 8004556:	e002      	b.n	800455e <HAL_UART_IRQHandler+0x51e>
      return;
 8004558:	bf00      	nop
 800455a:	e000      	b.n	800455e <HAL_UART_IRQHandler+0x51e>
      return;
 800455c:	bf00      	nop
  }
}
 800455e:	37e8      	adds	r7, #232	; 0xe8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2222      	movs	r2, #34	; 0x22
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0220 	orr.w	r2, r2, #32
 8004602:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b095      	sub	sp, #84	; 0x54
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004638:	643a      	str	r2, [r7, #64]	; 0x40
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800463e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	61fb      	str	r3, [r7, #28]
   return(result);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	64bb      	str	r3, [r7, #72]	; 0x48
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	2b01      	cmp	r3, #1
 8004686:	d119      	bne.n	80046bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60bb      	str	r3, [r7, #8]
   return(result);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	647b      	str	r3, [r7, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a8:	61ba      	str	r2, [r7, #24]
 80046aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	613b      	str	r3, [r7, #16]
   return(result);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046ca:	bf00      	nop
 80046cc:	3754      	adds	r7, #84	; 0x54
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff ff41 	bl	8004576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b21      	cmp	r3, #33	; 0x21
 800470e:	d13e      	bne.n	800478e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d114      	bne.n	8004744 <UART_Transmit_IT+0x48>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d110      	bne.n	8004744 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004736:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]
 8004742:	e008      	b.n	8004756 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	1c59      	adds	r1, r3, #1
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6211      	str	r1, [r2, #32]
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29b      	uxth	r3, r3
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4619      	mov	r1, r3
 8004764:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004778:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004788:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff fed2 	bl	8004564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08c      	sub	sp, #48	; 0x30
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b22      	cmp	r3, #34	; 0x22
 80047dc:	f040 80ae 	bne.w	800493c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d117      	bne.n	800481a <UART_Receive_IT+0x50>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d113      	bne.n	800481a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	b29a      	uxth	r2, r3
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
 8004818:	e026      	b.n	8004868 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482c:	d007      	beq.n	800483e <UART_Receive_IT+0x74>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <UART_Receive_IT+0x82>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e008      	b.n	800485e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	b2da      	uxtb	r2, r3
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4619      	mov	r1, r3
 8004876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004878:	2b00      	cmp	r3, #0
 800487a:	d15d      	bne.n	8004938 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0220 	bic.w	r2, r2, #32
 800488a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800489a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d135      	bne.n	800492e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	613b      	str	r3, [r7, #16]
   return(result);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	623a      	str	r2, [r7, #32]
 80048ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	69f9      	ldr	r1, [r7, #28]
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b10      	cmp	r3, #16
 8004908:	d10a      	bne.n	8004920 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fe2e 	bl	8004588 <HAL_UARTEx_RxEventCallback>
 800492c:	e002      	b.n	8004934 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fb fef2 	bl	8000718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e002      	b.n	800493e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	; 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004982:	f023 030c 	bic.w	r3, r3, #12
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	430b      	orrs	r3, r1
 800498e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <UART_SetConfig+0x114>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d103      	bne.n	80049b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fe fe6c 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	e002      	b.n	80049be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe fe54 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80049bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009a      	lsls	r2, r3, #2
 80049c8:	441a      	add	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <UART_SetConfig+0x118>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	0119      	lsls	r1, r3, #4
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009a      	lsls	r2, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <UART_SetConfig+0x118>)
 80049f6:	fba3 0302 	umull	r0, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2064      	movs	r0, #100	; 0x64
 80049fe:	fb00 f303 	mul.w	r3, r0, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	3332      	adds	r3, #50	; 0x32
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <UART_SetConfig+0x118>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a14:	4419      	add	r1, r3
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009a      	lsls	r2, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <UART_SetConfig+0x118>)
 8004a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2064      	movs	r0, #100	; 0x64
 8004a36:	fb00 f303 	mul.w	r3, r0, r3
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	3332      	adds	r3, #50	; 0x32
 8004a40:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <UART_SetConfig+0x118>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	f003 020f 	and.w	r2, r3, #15
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	440a      	add	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40013800 	.word	0x40013800
 8004a60:	51eb851f 	.word	0x51eb851f

08004a64 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 fc92 	bl	800639e <VL53L0X_get_offset_calibration_data_micro_meter>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004a8c:	b5b0      	push	{r4, r5, r7, lr}
 8004a8e:	b096      	sub	sp, #88	; 0x58
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004a9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2188      	movs	r1, #136	; 0x88
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f004 fbea 	bl	8009280 <VL53L0X_WrByte>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ac0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004aca:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a9e      	ldr	r2, [pc, #632]	; (8004d4c <VL53L0X_DataInit+0x2c0>)
 8004ad2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a9d      	ldr	r2, [pc, #628]	; (8004d50 <VL53L0X_DataInit+0x2c4>)
 8004ada:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fac1 	bl	8005072 <VL53L0X_GetDeviceParameters>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004af6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d112      	bne.n	8004b24 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004afe:	2300      	movs	r3, #0
 8004b00:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004b02:	2300      	movs	r3, #0
 8004b04:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f103 0410 	add.w	r4, r3, #16
 8004b0c:	f107 0510 	add.w	r5, r7, #16
 8004b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2264      	movs	r2, #100	; 0x64
 8004b28:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004b32:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b3c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004b46:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b52:	2201      	movs	r2, #1
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f004 fb92 	bl	8009280 <VL53L0X_WrByte>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	21ff      	movs	r1, #255	; 0xff
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f004 fb86 	bl	8009280 <VL53L0X_WrByte>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f004 fb7a 	bl	8009280 <VL53L0X_WrByte>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004b9a:	f107 030f 	add.w	r3, r7, #15
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2191      	movs	r1, #145	; 0x91
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f004 fbee 	bl	8009384 <VL53L0X_RdByte>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f004 fb5c 	bl	8009280 <VL53L0X_WrByte>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	21ff      	movs	r1, #255	; 0xff
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f004 fb50 	bl	8009280 <VL53L0X_WrByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f004 fb44 	bl	8009280 <VL53L0X_WrByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c06:	2300      	movs	r3, #0
 8004c08:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0a:	e014      	b.n	8004c36 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004c0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d114      	bne.n	8004c3e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fd19 	bl	8005654 <VL53L0X_SetLimitCheckEnable>
 8004c22:	4603      	mov	r3, r0
 8004c24:	461a      	mov	r2, r3
 8004c26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c32:	3301      	adds	r3, #1
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
 8004c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	dde7      	ble.n	8004c0c <VL53L0X_DataInit+0x180>
 8004c3c:	e000      	b.n	8004c40 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004c3e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004c40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d107      	bne.n	8004c58 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fd01 	bl	8005654 <VL53L0X_SetLimitCheckEnable>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c60:	2200      	movs	r2, #0
 8004c62:	2103      	movs	r1, #3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fcf5 	bl	8005654 <VL53L0X_SetLimitCheckEnable>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2104      	movs	r1, #4
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fce9 	bl	8005654 <VL53L0X_SetLimitCheckEnable>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c90:	2200      	movs	r2, #0
 8004c92:	2105      	movs	r1, #5
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fcdd 	bl	8005654 <VL53L0X_SetLimitCheckEnable>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ca0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d108      	bne.n	8004cba <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004ca8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004cac:	2100      	movs	r1, #0
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fd7e 	bl	80057b0 <VL53L0X_SetLimitCheckValue>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004cba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fd71 	bl	80057b0 <VL53L0X_SetLimitCheckValue>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cdc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fd64 	bl	80057b0 <VL53L0X_SetLimitCheckValue>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fd58 	bl	80057b0 <VL53L0X_SetLimitCheckValue>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004d16:	22ff      	movs	r2, #255	; 0xff
 8004d18:	2101      	movs	r1, #1
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f004 fab0 	bl	8009280 <VL53L0X_WrByte>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004d3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3758      	adds	r7, #88	; 0x58
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bdb0      	pop	{r4, r5, r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	00016b85 	.word	0x00016b85
 8004d50:	000970a4 	.word	0x000970a4

08004d54 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b09e      	sub	sp, #120	; 0x78
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004d62:	f107 031c 	add.w	r3, r7, #28
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f004 fbd8 	bl	8009520 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004d90:	2101      	movs	r1, #1
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f002 fa43 	bl	800721e <VL53L0X_get_info_from_device>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004da4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004db0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d80d      	bhi.n	8004dd4 <VL53L0X_StaticInit+0x80>
 8004db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d102      	bne.n	8004dc6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d806      	bhi.n	8004dd4 <VL53L0X_StaticInit+0x80>
 8004dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10e      	bne.n	8004dec <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d90b      	bls.n	8004dec <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004dd4:	f107 0218 	add.w	r2, r7, #24
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fcd7 	bl	8006792 <VL53L0X_perform_ref_spad_management>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004dea:	e009      	b.n	8004e00 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004df0:	461a      	mov	r2, r3
 8004df2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 fed8 	bl	8006baa <VL53L0X_set_reference_spads>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004e00:	4b94      	ldr	r3, [pc, #592]	; (8005054 <VL53L0X_StaticInit+0x300>)
 8004e02:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004e04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004e12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004e16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e26:	e001      	b.n	8004e2c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004e28:	4b8a      	ldr	r3, [pc, #552]	; (8005054 <VL53L0X_StaticInit+0x300>)
 8004e2a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004e34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f003 fb0c 	bl	8008454 <VL53L0X_load_tuning_settings>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2304      	movs	r3, #4
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 f8d3 	bl	8006000 <VL53L0X_SetGpioConfig>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e60:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d121      	bne.n	8004eac <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e68:	2201      	movs	r2, #1
 8004e6a:	21ff      	movs	r1, #255	; 0xff
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f004 fa07 	bl	8009280 <VL53L0X_WrByte>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004e78:	f107 031a 	add.w	r3, r7, #26
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2184      	movs	r1, #132	; 0x84
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f004 faa9 	bl	80093d8 <VL53L0X_RdWord>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e94:	2200      	movs	r2, #0
 8004e96:	21ff      	movs	r1, #255	; 0xff
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f004 f9f1 	bl	8009280 <VL53L0X_WrByte>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004eb4:	8b7b      	ldrh	r3, [r7, #26]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004ec0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004ec8:	f107 031c 	add.w	r3, r7, #28
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8cf 	bl	8005072 <VL53L0X_GetDeviceParameters>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004eda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d110      	bne.n	8004f04 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004ee2:	f107 0319 	add.w	r3, r7, #25
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f991 	bl	8005210 <VL53L0X_GetFractionEnable>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004ef4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004efc:	7e7a      	ldrb	r2, [r7, #25]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004f04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10e      	bne.n	8004f2a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f103 0410 	add.w	r4, r3, #16
 8004f12:	f107 051c 	add.w	r5, r7, #28
 8004f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d111      	bne.n	8004f56 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004f32:	f107 0319 	add.w	r3, r7, #25
 8004f36:	461a      	mov	r2, r3
 8004f38:	2101      	movs	r1, #1
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f004 fa22 	bl	8009384 <VL53L0X_RdByte>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004f46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f4e:	7e7a      	ldrb	r2, [r7, #25]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004f56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d107      	bne.n	8004f6e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2100      	movs	r1, #0
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9b0 	bl	80052c8 <VL53L0X_SetSequenceStepEnable>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d107      	bne.n	8004f86 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f76:	2200      	movs	r2, #0
 8004f78:	2102      	movs	r1, #2
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f9a4 	bl	80052c8 <VL53L0X_SetSequenceStepEnable>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004f86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2203      	movs	r2, #3
 8004f92:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004f9e:	f107 0313 	add.w	r3, r7, #19
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f977 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fba:	7cfa      	ldrb	r2, [r7, #19]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004fca:	f107 0313 	add.w	r3, r7, #19
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f961 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fe6:	7cfa      	ldrb	r2, [r7, #19]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004ff6:	f107 030c 	add.w	r3, r7, #12
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2103      	movs	r1, #3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f002 fe8c 	bl	8007d1c <get_sequence_step_timeout>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800500a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800501a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	461a      	mov	r2, r3
 8005028:	2104      	movs	r1, #4
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f002 fe76 	bl	8007d1c <get_sequence_step_timeout>
 8005030:	4603      	mov	r3, r0
 8005032:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005036:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005046:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800504a:	4618      	mov	r0, r3
 800504c:	3770      	adds	r7, #112	; 0x70
 800504e:	46bd      	mov	sp, r7
 8005050:	bdb0      	pop	{r4, r5, r7, pc}
 8005052:	bf00      	nop
 8005054:	20000010 	.word	0x20000010

08005058 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005060:	239d      	movs	r3, #157	; 0x9d
 8005062:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8b1 	bl	80051ec <VL53L0X_GetDeviceMode>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800508e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fa5d 	bl	800555c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80050a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d107      	bne.n	80050cc <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	3310      	adds	r3, #16
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa92 	bl	80055ec <VL53L0X_GetXTalkCompensationRateMegaCps>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80050cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fcc2 	bl	8004a64 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80050e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d134      	bne.n	8005156 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80050ec:	2300      	movs	r3, #0
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	e02a      	b.n	8005148 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d12a      	bne.n	8005150 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	b299      	uxth	r1, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3308      	adds	r3, #8
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	4413      	add	r3, r2
 8005108:	3304      	adds	r3, #4
 800510a:	461a      	mov	r2, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fbb1 	bl	8005874 <VL53L0X_GetLimitCheckValue>
 8005112:	4603      	mov	r3, r0
 8005114:	461a      	mov	r2, r3
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	4313      	orrs	r3, r2
 800511a:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d117      	bne.n	8005154 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	b299      	uxth	r1, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3318      	adds	r3, #24
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	4413      	add	r3, r2
 8005130:	461a      	mov	r2, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fb1a 	bl	800576c <VL53L0X_GetLimitCheckEnable>
 8005138:	4603      	mov	r3, r0
 800513a:	461a      	mov	r2, r3
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	4313      	orrs	r3, r2
 8005140:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	3301      	adds	r3, #1
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b05      	cmp	r3, #5
 800514c:	ddd1      	ble.n	80050f2 <VL53L0X_GetDeviceParameters+0x80>
 800514e:	e002      	b.n	8005156 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005154:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	333c      	adds	r3, #60	; 0x3c
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fc13 	bl	8005990 <VL53L0X_GetWrapAroundCheckEnable>
 800516a:	4603      	mov	r3, r0
 800516c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800516e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d107      	bne.n	8005186 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f879 	bl	8005274 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005182:	4603      	mov	r3, r0
 8005184:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	2b15      	cmp	r3, #21
 80051a8:	bf8c      	ite	hi
 80051aa:	2201      	movhi	r2, #1
 80051ac:	2200      	movls	r2, #0
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d10f      	bne.n	80051d4 <VL53L0X_SetDeviceMode+0x40>
 80051b4:	4a0c      	ldr	r2, [pc, #48]	; (80051e8 <VL53L0X_SetDeviceMode+0x54>)
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	2300      	moveq	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	741a      	strb	r2, [r3, #16]
		break;
 80051d2:	e001      	b.n	80051d8 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80051d4:	23f8      	movs	r3, #248	; 0xf8
 80051d6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	0030000b 	.word	0x0030000b

080051ec <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	7c1a      	ldrb	r2, [r3, #16]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	2109      	movs	r1, #9
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f004 f8ae 	bl	8009384 <VL53L0X_RdByte>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	b2da      	uxtb	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f002 ff66 	bl	8008130 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f003 f833 	bl	80082f0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800528a:	4603      	mov	r3, r0
 800528c:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800528e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	460b      	mov	r3, r1
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80052ac:	7afb      	ldrb	r3, [r7, #11]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4619      	mov	r1, r3
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f002 ff05 	bl	80080c2 <VL53L0X_get_vcsel_pulse_period>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
 80052d4:	4613      	mov	r3, r2
 80052d6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80052e4:	f107 030f 	add.w	r3, r7, #15
 80052e8:	461a      	mov	r2, r3
 80052ea:	2101      	movs	r1, #1
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f004 f849 	bl	8009384 <VL53L0X_RdByte>
 80052f2:	4603      	mov	r3, r0
 80052f4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80052fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d159      	bne.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8005302:	78bb      	ldrb	r3, [r7, #2]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d12b      	bne.n	8005360 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d825      	bhi.n	800535a <VL53L0X_SetSequenceStepEnable+0x92>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005329 	.word	0x08005329
 8005318:	08005333 	.word	0x08005333
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005347 	.word	0x08005347
 8005324:	08005351 	.word	0x08005351
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005328:	7dbb      	ldrb	r3, [r7, #22]
 800532a:	f043 0310 	orr.w	r3, r3, #16
 800532e:	75bb      	strb	r3, [r7, #22]
				break;
 8005330:	e041      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005332:	7dbb      	ldrb	r3, [r7, #22]
 8005334:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005338:	75bb      	strb	r3, [r7, #22]
				break;
 800533a:	e03c      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800533c:	7dbb      	ldrb	r3, [r7, #22]
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	75bb      	strb	r3, [r7, #22]
				break;
 8005344:	e037      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005346:	7dbb      	ldrb	r3, [r7, #22]
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	75bb      	strb	r3, [r7, #22]
				break;
 800534e:	e032      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005350:	7dbb      	ldrb	r3, [r7, #22]
 8005352:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005356:	75bb      	strb	r3, [r7, #22]
				break;
 8005358:	e02d      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800535a:	23fc      	movs	r3, #252	; 0xfc
 800535c:	75fb      	strb	r3, [r7, #23]
 800535e:	e02a      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d825      	bhi.n	80053b2 <VL53L0X_SetSequenceStepEnable+0xea>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	08005381 	.word	0x08005381
 8005370:	0800538b 	.word	0x0800538b
 8005374:	08005395 	.word	0x08005395
 8005378:	0800539f 	.word	0x0800539f
 800537c:	080053a9 	.word	0x080053a9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005380:	7dbb      	ldrb	r3, [r7, #22]
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	75bb      	strb	r3, [r7, #22]
				break;
 8005388:	e015      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800538a:	7dbb      	ldrb	r3, [r7, #22]
 800538c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005390:	75bb      	strb	r3, [r7, #22]
				break;
 8005392:	e010      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005394:	7dbb      	ldrb	r3, [r7, #22]
 8005396:	f023 0304 	bic.w	r3, r3, #4
 800539a:	75bb      	strb	r3, [r7, #22]
				break;
 800539c:	e00b      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800539e:	7dbb      	ldrb	r3, [r7, #22]
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	75bb      	strb	r3, [r7, #22]
				break;
 80053a6:	e006      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80053a8:	7dbb      	ldrb	r3, [r7, #22]
 80053aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ae:	75bb      	strb	r3, [r7, #22]
				break;
 80053b0:	e001      	b.n	80053b6 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053b2:	23fc      	movs	r3, #252	; 0xfc
 80053b4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	7dba      	ldrb	r2, [r7, #22]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d01e      	beq.n	80053fc <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80053be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	461a      	mov	r2, r3
 80053ca:	2101      	movs	r1, #1
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f003 ff57 	bl	8009280 <VL53L0X_WrByte>
 80053d2:	4603      	mov	r3, r0
 80053d4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80053d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	7dba      	ldrb	r2, [r7, #22]
 80053e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80053e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80053f4:	6939      	ldr	r1, [r7, #16]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff29 	bl	800524e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80053fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	72fb      	strb	r3, [r7, #11]
 8005416:	4613      	mov	r3, r2
 8005418:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d836      	bhi.n	8005498 <sequence_step_enabled+0x90>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <sequence_step_enabled+0x28>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005445 	.word	0x08005445
 8005434:	08005457 	.word	0x08005457
 8005438:	08005469 	.word	0x08005469
 800543c:	0800547b 	.word	0x0800547b
 8005440:	0800548d 	.word	0x0800548d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005444:	7abb      	ldrb	r3, [r7, #10]
 8005446:	111b      	asrs	r3, r3, #4
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	701a      	strb	r2, [r3, #0]
		break;
 8005454:	e022      	b.n	800549c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005456:	7abb      	ldrb	r3, [r7, #10]
 8005458:	10db      	asrs	r3, r3, #3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	b2da      	uxtb	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	701a      	strb	r2, [r3, #0]
		break;
 8005466:	e019      	b.n	800549c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005468:	7abb      	ldrb	r3, [r7, #10]
 800546a:	109b      	asrs	r3, r3, #2
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	701a      	strb	r2, [r3, #0]
		break;
 8005478:	e010      	b.n	800549c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800547a:	7abb      	ldrb	r3, [r7, #10]
 800547c:	119b      	asrs	r3, r3, #6
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	701a      	strb	r2, [r3, #0]
		break;
 800548a:	e007      	b.n	800549c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800548c:	7abb      	ldrb	r3, [r7, #10]
 800548e:	09db      	lsrs	r3, r3, #7
 8005490:	b2da      	uxtb	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	701a      	strb	r2, [r3, #0]
		break;
 8005496:	e001      	b.n	800549c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005498:	23fc      	movs	r3, #252	; 0xfc
 800549a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800549c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop

080054ac <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80054be:	f107 030e 	add.w	r3, r7, #14
 80054c2:	461a      	mov	r2, r3
 80054c4:	2101      	movs	r1, #1
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f003 ff5c 	bl	8009384 <VL53L0X_RdByte>
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80054d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80054d8:	7bba      	ldrb	r2, [r7, #14]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2100      	movs	r1, #0
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff92 	bl	8005408 <sequence_step_enabled>
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d108      	bne.n	8005502 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80054f0:	7bba      	ldrb	r2, [r7, #14]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	3302      	adds	r3, #2
 80054f6:	2101      	movs	r1, #1
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff85 	bl	8005408 <sequence_step_enabled>
 80054fe:	4603      	mov	r3, r0
 8005500:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800550a:	7bba      	ldrb	r2, [r7, #14]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	2102      	movs	r1, #2
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ff78 	bl	8005408 <sequence_step_enabled>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800551c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005524:	7bba      	ldrb	r2, [r7, #14]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	3303      	adds	r3, #3
 800552a:	2103      	movs	r1, #3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff6b 	bl	8005408 <sequence_step_enabled>
 8005532:	4603      	mov	r3, r0
 8005534:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800553e:	7bba      	ldrb	r2, [r7, #14]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3304      	adds	r3, #4
 8005544:	2104      	movs	r1, #4
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ff5e 	bl	8005408 <sequence_step_enabled>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005550:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800556a:	f107 030c 	add.w	r3, r7, #12
 800556e:	461a      	mov	r2, r3
 8005570:	21f8      	movs	r1, #248	; 0xf8
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f003 ff30 	bl	80093d8 <VL53L0X_RdWord>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800557c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	461a      	mov	r2, r3
 800558a:	2104      	movs	r1, #4
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f003 ff5b 	bl	8009448 <VL53L0X_RdDWord>
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10c      	bne.n	80055b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800559e:	89bb      	ldrh	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	89ba      	ldrh	r2, [r7, #12]
 80055a8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	7f1b      	ldrb	r3, [r3, #28]
 80055d6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	7bba      	ldrb	r2, [r7, #14]
 80055dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80055de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80055fa:	f107 030e 	add.w	r3, r7, #14
 80055fe:	461a      	mov	r2, r3
 8005600:	2120      	movs	r1, #32
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f003 fee8 	bl	80093d8 <VL53L0X_RdWord>
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800560c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d118      	bne.n	8005646 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
 800562c:	e00b      	b.n	8005646 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	807b      	strh	r3, [r7, #2]
 8005660:	4613      	mov	r3, r2
 8005662:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005664:	2300      	movs	r3, #0
 8005666:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005674:	887b      	ldrh	r3, [r7, #2]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d902      	bls.n	8005680 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800567a:	23fc      	movs	r3, #252	; 0xfc
 800567c:	75fb      	strb	r3, [r7, #23]
 800567e:	e05b      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005680:	787b      	ldrb	r3, [r7, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	73bb      	strb	r3, [r7, #14]
 8005692:	e00a      	b.n	80056aa <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	330c      	adds	r3, #12
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80056aa:	887b      	ldrh	r3, [r7, #2]
 80056ac:	2b05      	cmp	r3, #5
 80056ae:	d841      	bhi.n	8005734 <VL53L0X_SetLimitCheckEnable+0xe0>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056db 	.word	0x080056db
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	08005705 	.word	0x08005705
 80056cc:	0800571d 	.word	0x0800571d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80056d8:	e02e      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	2144      	movs	r1, #68	; 0x44
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f003 fdef 	bl	80092c8 <VL53L0X_WrWord>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]

			break;
 80056ee:	e023      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80056f8:	e01e      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7bfa      	ldrb	r2, [r7, #15]
 80056fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005702:	e019      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800570a:	7b7b      	ldrb	r3, [r7, #13]
 800570c:	22fe      	movs	r2, #254	; 0xfe
 800570e:	2160      	movs	r1, #96	; 0x60
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f003 fe03 	bl	800931c <VL53L0X_UpdateByte>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800571a:	e00d      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005722:	7b7b      	ldrb	r3, [r7, #13]
 8005724:	22ef      	movs	r2, #239	; 0xef
 8005726:	2160      	movs	r1, #96	; 0x60
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f003 fdf7 	bl	800931c <VL53L0X_UpdateByte>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005732:	e001      	b.n	8005738 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005734:	23fc      	movs	r3, #252	; 0xfc
 8005736:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10f      	bne.n	8005760 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005740:	787b      	ldrb	r3, [r7, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005746:	887b      	ldrh	r3, [r7, #2]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005752:	e005      	b.n	8005760 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005760:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	460b      	mov	r3, r1
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800577e:	897b      	ldrh	r3, [r7, #10]
 8005780:	2b05      	cmp	r3, #5
 8005782:	d905      	bls.n	8005790 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005784:	23fc      	movs	r3, #252	; 0xfc
 8005786:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e008      	b.n	80057a2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005790:	897b      	ldrh	r3, [r7, #10]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7dba      	ldrb	r2, [r7, #22]
 80057a0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	460b      	mov	r3, r1
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057cc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80057ce:	7dbb      	ldrb	r3, [r7, #22]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d107      	bne.n	80057e4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057d4:	897b      	ldrh	r3, [r7, #10]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	330c      	adds	r3, #12
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e040      	b.n	8005866 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80057e4:	897b      	ldrh	r3, [r7, #10]
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d830      	bhi.n	800584c <VL53L0X_SetLimitCheckValue+0x9c>
 80057ea:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <VL53L0X_SetLimitCheckValue+0x40>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005811 	.word	0x08005811
 80057f8:	08005827 	.word	0x08005827
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	08005837 	.word	0x08005837
 8005804:	08005837 	.word	0x08005837

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800580e:	e01f      	b.n	8005850 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	2144      	movs	r1, #68	; 0x44
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f003 fd54 	bl	80092c8 <VL53L0X_WrWord>
 8005820:	4603      	mov	r3, r0
 8005822:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005824:	e014      	b.n	8005850 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800582c:	e010      	b.n	8005850 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005834:	e00c      	b.n	8005850 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	2164      	movs	r1, #100	; 0x64
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f003 fd41 	bl	80092c8 <VL53L0X_WrWord>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800584a:	e001      	b.n	8005850 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800584c:	23fc      	movs	r3, #252	; 0xfc
 800584e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d106      	bne.n	8005866 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005858:	897b      	ldrh	r3, [r7, #10]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	330c      	adds	r3, #12
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop

08005874 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	460b      	mov	r3, r1
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005882:	2300      	movs	r3, #0
 8005884:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800588a:	897b      	ldrh	r3, [r7, #10]
 800588c:	2b05      	cmp	r3, #5
 800588e:	d847      	bhi.n	8005920 <VL53L0X_GetLimitCheckValue+0xac>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <VL53L0X_GetLimitCheckValue+0x24>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058b1 	.word	0x080058b1
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	080058e3 	.word	0x080058e3
 80058a4:	080058ef 	.word	0x080058ef
 80058a8:	080058fb 	.word	0x080058fb
 80058ac:	080058fb 	.word	0x080058fb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	77bb      	strb	r3, [r7, #30]
		break;
 80058ba:	e033      	b.n	8005924 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80058bc:	f107 0316 	add.w	r3, r7, #22
 80058c0:	461a      	mov	r2, r3
 80058c2:	2144      	movs	r1, #68	; 0x44
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f003 fd87 	bl	80093d8 <VL53L0X_RdWord>
 80058ca:	4603      	mov	r3, r0
 80058cc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80058ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80058d6:	8afb      	ldrh	r3, [r7, #22]
 80058d8:	025b      	lsls	r3, r3, #9
 80058da:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80058dc:	2301      	movs	r3, #1
 80058de:	77bb      	strb	r3, [r7, #30]
		break;
 80058e0:	e020      	b.n	8005924 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	77bb      	strb	r3, [r7, #30]
		break;
 80058ec:	e01a      	b.n	8005924 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	77bb      	strb	r3, [r7, #30]
		break;
 80058f8:	e014      	b.n	8005924 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80058fa:	f107 0316 	add.w	r3, r7, #22
 80058fe:	461a      	mov	r2, r3
 8005900:	2164      	movs	r1, #100	; 0x64
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f003 fd68 	bl	80093d8 <VL53L0X_RdWord>
 8005908:	4603      	mov	r3, r0
 800590a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800590c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005914:	8afb      	ldrh	r3, [r7, #22]
 8005916:	025b      	lsls	r3, r3, #9
 8005918:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	77bb      	strb	r3, [r7, #30]
		break;
 800591e:	e001      	b.n	8005924 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005920:	23fc      	movs	r3, #252	; 0xfc
 8005922:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005924:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d12a      	bne.n	8005982 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800592c:	7fbb      	ldrb	r3, [r7, #30]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d124      	bne.n	800597c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d110      	bne.n	800595a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005938:	897b      	ldrh	r3, [r7, #10]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	330c      	adds	r3, #12
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800594c:	897b      	ldrh	r3, [r7, #10]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005958:	e013      	b.n	8005982 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005960:	897b      	ldrh	r3, [r7, #10]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	330c      	adds	r3, #12
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800597a:	e002      	b.n	8005982 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005982:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop

08005990 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800599e:	f107 030e 	add.w	r3, r7, #14
 80059a2:	461a      	mov	r2, r3
 80059a4:	2101      	movs	r1, #1
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 fcec 	bl	8009384 <VL53L0X_RdByte>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80059b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10e      	bne.n	80059d6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80059b8:	7bba      	ldrb	r2, [r7, #14]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	b25b      	sxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da03      	bge.n	80059d0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80059d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a00:	f107 030e 	add.w	r3, r7, #14
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fbf0 	bl	80051ec <VL53L0X_GetDeviceMode>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d107      	bne.n	8005a28 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f898 	bl	8005b54 <VL53L0X_StartMeasurement>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fb3c 	bl	80070ae <VL53L0X_measurement_poll_for_completion>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f001 fade 	bl	8007034 <VL53L0X_perform_ref_calibration>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005a9e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005aa0:	7dbb      	ldrb	r3, [r7, #22]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d005      	beq.n	8005ab2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005aa6:	7dbb      	ldrb	r3, [r7, #22]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d002      	beq.n	8005ab2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d147      	bne.n	8005b42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005ab2:	f107 030c 	add.w	r3, r7, #12
 8005ab6:	f107 0210 	add.w	r2, r7, #16
 8005aba:	2101      	movs	r1, #1
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fbc1 	bl	8006244 <VL53L0X_GetInterruptThresholds>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005acc:	d803      	bhi.n	8005ad6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005ace:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005ad0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005ad4:	d935      	bls.n	8005b42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d131      	bne.n	8005b42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d006      	beq.n	8005af2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005ae4:	491a      	ldr	r1, [pc, #104]	; (8005b50 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 fcb4 	bl	8008454 <VL53L0X_load_tuning_settings>
 8005aec:	4603      	mov	r3, r0
 8005aee:	75fb      	strb	r3, [r7, #23]
 8005af0:	e027      	b.n	8005b42 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005af2:	2204      	movs	r2, #4
 8005af4:	21ff      	movs	r1, #255	; 0xff
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f003 fbc2 	bl	8009280 <VL53L0X_WrByte>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b06:	2200      	movs	r2, #0
 8005b08:	2170      	movs	r1, #112	; 0x70
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f003 fbb8 	bl	8009280 <VL53L0X_WrByte>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	21ff      	movs	r1, #255	; 0xff
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f003 fbae 	bl	8009280 <VL53L0X_WrByte>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f003 fba4 	bl	8009280 <VL53L0X_WrByte>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005b42:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000104 	.word	0x20000104

08005b54 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005b64:	f107 030e 	add.w	r3, r7, #14
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fb3e 	bl	80051ec <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005b70:	2201      	movs	r2, #1
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f003 fb83 	bl	8009280 <VL53L0X_WrByte>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b7e:	2201      	movs	r2, #1
 8005b80:	21ff      	movs	r1, #255	; 0xff
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f003 fb7c 	bl	8009280 <VL53L0X_WrByte>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2100      	movs	r1, #0
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f003 fb75 	bl	8009280 <VL53L0X_WrByte>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2191      	movs	r1, #145	; 0x91
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f003 fb6b 	bl	8009280 <VL53L0X_WrByte>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f003 fb64 	bl	8009280 <VL53L0X_WrByte>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	21ff      	movs	r1, #255	; 0xff
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f003 fb5d 	bl	8009280 <VL53L0X_WrByte>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f003 fb56 	bl	8009280 <VL53L0X_WrByte>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d054      	beq.n	8005c88 <VL53L0X_StartMeasurement+0x134>
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	dc6c      	bgt.n	8005cbc <VL53L0X_StartMeasurement+0x168>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <VL53L0X_StartMeasurement+0x98>
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d034      	beq.n	8005c54 <VL53L0X_StartMeasurement+0x100>
 8005bea:	e067      	b.n	8005cbc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005bec:	2201      	movs	r2, #1
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f003 fb45 	bl	8009280 <VL53L0X_WrByte>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d15d      	bne.n	8005cc2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005c10:	f107 030d 	add.w	r3, r7, #13
 8005c14:	461a      	mov	r2, r3
 8005c16:	2100      	movs	r1, #0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f003 fbb3 	bl	8009384 <VL53L0X_RdByte>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005c28:	7b7a      	ldrb	r2, [r7, #13]
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c30:	7bfa      	ldrb	r2, [r7, #15]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d107      	bne.n	8005c46 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c44:	d3e1      	bcc.n	8005c0a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c4c:	d339      	bcc.n	8005cc2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005c4e:	23f9      	movs	r3, #249	; 0xf9
 8005c50:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005c52:	e036      	b.n	8005cc2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff ff12 	bl	8005a88 <VL53L0X_CheckAndLoadInterruptSettings>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005c68:	2202      	movs	r2, #2
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f003 fb07 	bl	8009280 <VL53L0X_WrByte>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d123      	bne.n	8005cc6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005c86:	e01e      	b.n	8005cc6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c90:	2101      	movs	r1, #1
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fef8 	bl	8005a88 <VL53L0X_CheckAndLoadInterruptSettings>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f003 faed 	bl	8009280 <VL53L0X_WrByte>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cba:	e006      	b.n	8005cca <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005cbc:	23f8      	movs	r3, #248	; 0xf8
 8005cbe:	75fb      	strb	r3, [r7, #23]
 8005cc0:	e004      	b.n	8005ccc <VL53L0X_StartMeasurement+0x178>
		break;
 8005cc2:	bf00      	nop
 8005cc4:	e002      	b.n	8005ccc <VL53L0X_StartMeasurement+0x178>
		break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <VL53L0X_StartMeasurement+0x178>
		break;
 8005cca:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005cec:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d112      	bne.n	8005d1a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb18 	bl	8006330 <VL53L0X_GetInterruptMaskStatus>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d103      	bne.n	8005d12 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e01c      	b.n	8005d4c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e018      	b.n	8005d4c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005d1a:	f107 030d 	add.w	r3, r7, #13
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2114      	movs	r1, #20
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f003 fb2e 	bl	8009384 <VL53L0X_RdByte>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005d34:	7b7b      	ldrb	r3, [r7, #13]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	e002      	b.n	8005d4c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005d58:	b5b0      	push	{r4, r5, r7, lr}
 8005d5a:	b096      	sub	sp, #88	; 0x58
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005d68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	2114      	movs	r1, #20
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f003 fa59 	bl	8009228 <VL53L0X_ReadMulti>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005d7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 80d1 	bne.w	8005f28 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005d92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005dae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	025b      	lsls	r3, r3, #9
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dca:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005dcc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005de2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005de6:	025b      	lsls	r3, r3, #9
 8005de8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005dee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e0a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005e1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e2c:	d046      	beq.n	8005ebc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e30:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005e34:	fb02 f303 	mul.w	r3, r2, r3
 8005e38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e3c:	4a57      	ldr	r2, [pc, #348]	; (8005f9c <VL53L0X_GetRangingMeasurementData+0x244>)
 8005e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8005e42:	1192      	asrs	r2, r2, #6
 8005e44:	17db      	asrs	r3, r3, #31
 8005e46:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005e48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7f1b      	ldrb	r3, [r3, #28]
 8005e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d02c      	beq.n	8005ebc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005e62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e64:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e68:	fb02 f303 	mul.w	r3, r2, r3
 8005e6c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d10d      	bne.n	8005e90 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005e74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005e7c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005e80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e84:	e016      	b.n	8005eb4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005e86:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005e8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e8e:	e011      	b.n	8005eb4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005e90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e96:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e9c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005ea4:	121b      	asrs	r3, r3, #8
 8005ea6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eaa:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005eb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005eb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005ec4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005ed0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	019b      	lsls	r3, r3, #6
 8005ed8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	75da      	strb	r2, [r3, #23]
 8005ede:	e006      	b.n	8005eee <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005ee6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005eee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005ef2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005ef6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 ff43 	bl	8008d90 <VL53L0X_get_pal_range_status>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f18:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f20:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d12f      	bne.n	8005f90 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f107 040c 	add.w	r4, r7, #12
 8005f36:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005f4a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005f58:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005f5e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005f64:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005f6a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005f70:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005f76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005f80:	f107 050c 	add.w	r5, r7, #12
 8005f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f90:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3750      	adds	r7, #80	; 0x50
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f9c:	10624dd3 	.word	0x10624dd3

08005fa0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff f8ef 	bl	8005194 <VL53L0X_SetDeviceMode>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fd16 	bl	80059f4 <VL53L0X_PerformSingleMeasurement>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff febe 	bl	8005d58 <VL53L0X_GetRangingMeasurementData>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f960 	bl	80062b0 <VL53L0X_ClearInterruptMask>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	4603      	mov	r3, r0
 8006010:	70fb      	strb	r3, [r7, #3]
 8006012:	460b      	mov	r3, r1
 8006014:	70bb      	strb	r3, [r7, #2]
 8006016:	4613      	mov	r3, r2
 8006018:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006024:	23f6      	movs	r3, #246	; 0xf6
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	e105      	b.n	8006236 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800602a:	78bb      	ldrb	r3, [r7, #2]
 800602c:	2b14      	cmp	r3, #20
 800602e:	d110      	bne.n	8006052 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006030:	7e3b      	ldrb	r3, [r7, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006036:	2310      	movs	r3, #16
 8006038:	73bb      	strb	r3, [r7, #14]
 800603a:	e001      	b.n	8006040 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800603c:	2301      	movs	r3, #1
 800603e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	461a      	mov	r2, r3
 8006044:	2184      	movs	r1, #132	; 0x84
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f003 f91a 	bl	8009280 <VL53L0X_WrByte>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	e0f1      	b.n	8006236 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006052:	78bb      	ldrb	r3, [r7, #2]
 8006054:	2b15      	cmp	r3, #21
 8006056:	f040 8097 	bne.w	8006188 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800605a:	2201      	movs	r2, #1
 800605c:	21ff      	movs	r1, #255	; 0xff
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f003 f90e 	bl	8009280 <VL53L0X_WrByte>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	4313      	orrs	r3, r2
 800606c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800606e:	2200      	movs	r2, #0
 8006070:	2100      	movs	r1, #0
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f003 f904 	bl	8009280 <VL53L0X_WrByte>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	4313      	orrs	r3, r2
 8006080:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006082:	2200      	movs	r2, #0
 8006084:	21ff      	movs	r1, #255	; 0xff
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f003 f8fa 	bl	8009280 <VL53L0X_WrByte>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	4313      	orrs	r3, r2
 8006094:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006096:	2201      	movs	r2, #1
 8006098:	2180      	movs	r1, #128	; 0x80
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f003 f8f0 	bl	8009280 <VL53L0X_WrByte>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80060aa:	2202      	movs	r2, #2
 80060ac:	2185      	movs	r1, #133	; 0x85
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f003 f8e6 	bl	8009280 <VL53L0X_WrByte>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80060be:	2204      	movs	r2, #4
 80060c0:	21ff      	movs	r1, #255	; 0xff
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f003 f8dc 	bl	8009280 <VL53L0X_WrByte>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80060d2:	2200      	movs	r2, #0
 80060d4:	21cd      	movs	r1, #205	; 0xcd
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f003 f8d2 	bl	8009280 <VL53L0X_WrByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80060e6:	2211      	movs	r2, #17
 80060e8:	21cc      	movs	r1, #204	; 0xcc
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f003 f8c8 	bl	8009280 <VL53L0X_WrByte>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80060fa:	2207      	movs	r2, #7
 80060fc:	21ff      	movs	r1, #255	; 0xff
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f003 f8be 	bl	8009280 <VL53L0X_WrByte>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	4313      	orrs	r3, r2
 800610c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800610e:	2200      	movs	r2, #0
 8006110:	21be      	movs	r1, #190	; 0xbe
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f003 f8b4 	bl	8009280 <VL53L0X_WrByte>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4313      	orrs	r3, r2
 8006120:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006122:	2206      	movs	r2, #6
 8006124:	21ff      	movs	r1, #255	; 0xff
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f003 f8aa 	bl	8009280 <VL53L0X_WrByte>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4313      	orrs	r3, r2
 8006134:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006136:	2209      	movs	r2, #9
 8006138:	21cc      	movs	r1, #204	; 0xcc
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f003 f8a0 	bl	8009280 <VL53L0X_WrByte>
 8006140:	4603      	mov	r3, r0
 8006142:	461a      	mov	r2, r3
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	4313      	orrs	r3, r2
 8006148:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800614a:	2200      	movs	r2, #0
 800614c:	21ff      	movs	r1, #255	; 0xff
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f003 f896 	bl	8009280 <VL53L0X_WrByte>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	4313      	orrs	r3, r2
 800615c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800615e:	2201      	movs	r2, #1
 8006160:	21ff      	movs	r1, #255	; 0xff
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f003 f88c 	bl	8009280 <VL53L0X_WrByte>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	4313      	orrs	r3, r2
 8006170:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f003 f882 	bl	8009280 <VL53L0X_WrByte>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4313      	orrs	r3, r2
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e056      	b.n	8006236 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d120      	bne.n	80061d2 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8006190:	787b      	ldrb	r3, [r7, #1]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d81b      	bhi.n	80061ce <VL53L0X_SetGpioConfig+0x1ce>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <VL53L0X_SetGpioConfig+0x19c>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061b7 	.word	0x080061b7
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061c3 	.word	0x080061c3
 80061ac:	080061c9 	.word	0x080061c9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73bb      	strb	r3, [r7, #14]
				break;
 80061b4:	e00d      	b.n	80061d2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73bb      	strb	r3, [r7, #14]
				break;
 80061ba:	e00a      	b.n	80061d2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80061bc:	2302      	movs	r3, #2
 80061be:	73bb      	strb	r3, [r7, #14]
				break;
 80061c0:	e007      	b.n	80061d2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73bb      	strb	r3, [r7, #14]
				break;
 80061c6:	e004      	b.n	80061d2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80061c8:	2304      	movs	r3, #4
 80061ca:	73bb      	strb	r3, [r7, #14]
				break;
 80061cc:	e001      	b.n	80061d2 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 80061ce:	23f5      	movs	r3, #245	; 0xf5
 80061d0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	461a      	mov	r2, r3
 80061de:	210a      	movs	r1, #10
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f003 f84d 	bl	8009280 <VL53L0X_WrByte>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80061ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80061f2:	7e3b      	ldrb	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73bb      	strb	r3, [r7, #14]
 80061fc:	e001      	b.n	8006202 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 80061fe:	2310      	movs	r3, #16
 8006200:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	22ef      	movs	r2, #239	; 0xef
 8006206:	2184      	movs	r1, #132	; 0x84
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f003 f887 	bl	800931c <VL53L0X_UpdateByte>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	787a      	ldrb	r2, [r7, #1]
 800621e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800622a:	2100      	movs	r1, #0
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f83f 	bl	80062b0 <VL53L0X_ClearInterruptMask>
 8006232:	4603      	mov	r3, r0
 8006234:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop

08006244 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	460b      	mov	r3, r1
 8006252:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	461a      	mov	r2, r3
 800625e:	210e      	movs	r1, #14
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f003 f8b9 	bl	80093d8 <VL53L0X_RdWord>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800626a:	8abb      	ldrh	r3, [r7, #20]
 800626c:	045b      	lsls	r3, r3, #17
 800626e:	461a      	mov	r2, r3
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <VL53L0X_GetInterruptThresholds+0x68>)
 8006272:	4013      	ands	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10f      	bne.n	80062a0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	461a      	mov	r2, r3
 8006286:	210c      	movs	r1, #12
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f003 f8a5 	bl	80093d8 <VL53L0X_RdWord>
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006292:	8abb      	ldrh	r3, [r7, #20]
 8006294:	045b      	lsls	r3, r3, #17
 8006296:	461a      	mov	r2, r3
 8006298:	4b04      	ldr	r3, [pc, #16]	; (80062ac <VL53L0X_GetInterruptThresholds+0x68>)
 800629a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	1ffe0000 	.word	0x1ffe0000

080062b0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80062c2:	2201      	movs	r2, #1
 80062c4:	210b      	movs	r1, #11
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f002 ffda 	bl	8009280 <VL53L0X_WrByte>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80062d0:	2200      	movs	r2, #0
 80062d2:	210b      	movs	r1, #11
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f002 ffd3 	bl	8009280 <VL53L0X_WrByte>
 80062da:	4603      	mov	r3, r0
 80062dc:	461a      	mov	r2, r3
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80062e4:	f107 030d 	add.w	r3, r7, #13
 80062e8:	461a      	mov	r2, r3
 80062ea:	2113      	movs	r1, #19
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f003 f849 	bl	8009384 <VL53L0X_RdByte>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	3301      	adds	r3, #1
 8006300:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006302:	7b7b      	ldrb	r3, [r7, #13]
 8006304:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d803      	bhi.n	800631a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0d3      	beq.n	80062c2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006320:	23f4      	movs	r3, #244	; 0xf4
 8006322:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006324:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800633e:	f107 030e 	add.w	r3, r7, #14
 8006342:	461a      	mov	r2, r3
 8006344:	2113      	movs	r1, #19
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f003 f81c 	bl	8009384 <VL53L0X_RdByte>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	f003 0207 	and.w	r2, r3, #7
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	f003 0318 	and.w	r3, r3, #24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006364:	23fa      	movs	r3, #250	; 0xfa
 8006366:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006380:	2300      	movs	r3, #0
 8006382:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fa02 	bl	8006792 <VL53L0X_perform_ref_spad_management>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80063ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80063b0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80063b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063b6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80063b8:	f107 0308 	add.w	r3, r7, #8
 80063bc:	461a      	mov	r2, r3
 80063be:	2128      	movs	r1, #40	; 0x28
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f003 f809 	bl	80093d8 <VL53L0X_RdWord>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80063ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d11e      	bne.n	8006410 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80063d2:	893b      	ldrh	r3, [r7, #8]
 80063d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d8:	b29b      	uxth	r3, r3
 80063da:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80063dc:	893b      	ldrh	r3, [r7, #8]
 80063de:	461a      	mov	r2, r3
 80063e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	dd0b      	ble.n	8006400 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80063e8:	893a      	ldrh	r2, [r7, #8]
 80063ea:	897b      	ldrh	r3, [r7, #10]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	b21b      	sxth	r3, r3
 80063f2:	461a      	mov	r2, r3
					* 250;
 80063f4:	23fa      	movs	r3, #250	; 0xfa
 80063f6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e007      	b.n	8006410 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	b21b      	sxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	23fa      	movs	r3, #250	; 0xfa
 8006408:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800641c:	b480      	push	{r7}
 800641e:	b08b      	sub	sp, #44	; 0x2c
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800642a:	2308      	movs	r3, #8
 800642c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006438:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006442:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	fbb3 f2f2 	udiv	r2, r3, r2
 800644c:	69b9      	ldr	r1, [r7, #24]
 800644e:	fb01 f202 	mul.w	r2, r1, r2
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
 800645a:	e030      	b.n	80064be <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	4413      	add	r3, r2
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d11e      	bne.n	80064b0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006472:	7ffa      	ldrb	r2, [r7, #31]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	fa42 f303 	asr.w	r3, r2, r3
 800647a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006480:	e016      	b.n	80064b0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006482:	7ffb      	ldrb	r3, [r7, #31]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <get_next_good_spad+0x88>
				success = 1;
 800648c:	2301      	movs	r3, #1
 800648e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	fb03 f202 	mul.w	r2, r3, r2
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	4413      	add	r3, r2
 800649c:	461a      	mov	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	601a      	str	r2, [r3, #0]
				break;
 80064a2:	e009      	b.n	80064b8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80064a4:	7ffb      	ldrb	r3, [r7, #31]
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	3301      	adds	r3, #1
 80064ae:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d3e4      	bcc.n	8006482 <get_next_good_spad+0x66>
				coarseIndex++) {
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	3301      	adds	r3, #1
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d202      	bcs.n	80064cc <get_next_good_spad+0xb0>
 80064c6:	7fbb      	ldrb	r3, [r7, #30]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0c7      	beq.n	800645c <get_next_good_spad+0x40>
		}
	}
}
 80064cc:	bf00      	nop
 80064ce:	372c      	adds	r7, #44	; 0x2c
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
	...

080064d8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80064ea:	4a07      	ldr	r2, [pc, #28]	; (8006508 <is_aperture+0x30>)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <is_aperture+0x22>
		isAperture = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	200002bc 	.word	0x200002bc

0800650c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006518:	2300      	movs	r3, #0
 800651a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800651c:	2308      	movs	r3, #8
 800651e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006532:	69b9      	ldr	r1, [r7, #24]
 8006534:	fb01 f202 	mul.w	r2, r1, r2
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	d302      	bcc.n	800654a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006544:	23ce      	movs	r3, #206	; 0xce
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e010      	b.n	800656c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4413      	add	r3, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b25a      	sxtb	r2, r3
 8006554:	2101      	movs	r1, #1
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	b25b      	sxtb	r3, r3
 800655e:	4313      	orrs	r3, r2
 8006560:	b259      	sxtb	r1, r3
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	b2ca      	uxtb	r2, r1
 800656a:	701a      	strb	r2, [r3, #0]

	return status;
 800656c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3724      	adds	r7, #36	; 0x24
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006584:	2306      	movs	r3, #6
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	21b0      	movs	r1, #176	; 0xb0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fe1c 	bl	80091c8 <VL53L0X_WriteMulti>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80065aa:	2306      	movs	r3, #6
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	21b0      	movs	r1, #176	; 0xb0
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f002 fe39 	bl	8009228 <VL53L0X_ReadMulti>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80065ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b08c      	sub	sp, #48	; 0x30
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	460b      	mov	r3, r1
 80065d4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80065e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e2:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80065e4:	2300      	movs	r3, #0
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e8:	e02b      	b.n	8006642 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80065ea:	f107 031c 	add.w	r3, r7, #28
 80065ee:	6a3a      	ldr	r2, [r7, #32]
 80065f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff ff12 	bl	800641c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fe:	d103      	bne.n	8006608 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006600:	23ce      	movs	r3, #206	; 0xce
 8006602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006606:	e020      	b.n	800664a <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	461a      	mov	r2, r3
 800660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660e:	4413      	add	r3, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff ff61 	bl	80064d8 <is_aperture>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006620:	23ce      	movs	r3, #206	; 0xce
 8006622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006626:	e010      	b.n	800664a <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006630:	6838      	ldr	r0, [r7, #0]
 8006632:	f7ff ff6b 	bl	800650c <enable_spad_bit>
		currentSpad++;
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	3301      	adds	r3, #1
 800663a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	3301      	adds	r3, #1
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
 8006642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006646:	429a      	cmp	r2, r3
 8006648:	d3cf      	bcc.n	80065ea <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800664a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006650:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff ff8d 	bl	800657a <set_ref_spad_map>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006666:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800666a:	2b00      	cmp	r3, #0
 800666c:	d121      	bne.n	80066b2 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800666e:	f107 0314 	add.w	r3, r7, #20
 8006672:	4619      	mov	r1, r3
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff ff93 	bl	80065a0 <get_ref_spad_map>
 800667a:	4603      	mov	r3, r0
 800667c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006684:	e011      	b.n	80066aa <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	4413      	add	r3, r2
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	f107 0114 	add.w	r1, r7, #20
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	440b      	add	r3, r1
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d003      	beq.n	80066a4 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800669c:	23ce      	movs	r3, #206	; 0xce
 800669e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80066a2:	e006      	b.n	80066b2 <enable_ref_spads+0xec>
			}
			i++;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	3301      	adds	r3, #1
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80066aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3e9      	bcc.n	8006686 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80066b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	; 0x28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80066da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80066de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d107      	bne.n	80066f6 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80066e6:	22c0      	movs	r2, #192	; 0xc0
 80066e8:	2101      	movs	r1, #1
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 fdc8 	bl	8009280 <VL53L0X_WrByte>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80066f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d108      	bne.n	8006710 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff fc4b 	bl	8005fa0 <VL53L0X_PerformSingleRangingMeasurement>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006714:	2b00      	cmp	r3, #0
 8006716:	d107      	bne.n	8006728 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006718:	2201      	movs	r2, #1
 800671a:	21ff      	movs	r1, #255	; 0xff
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f002 fdaf 	bl	8009280 <VL53L0X_WrByte>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800672c:	2b00      	cmp	r3, #0
 800672e:	d107      	bne.n	8006740 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	21b6      	movs	r1, #182	; 0xb6
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f002 fe4f 	bl	80093d8 <VL53L0X_RdWord>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006748:	2200      	movs	r2, #0
 800674a:	21ff      	movs	r1, #255	; 0xff
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f002 fd97 	bl	8009280 <VL53L0X_WrByte>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800675c:	2b00      	cmp	r3, #0
 800675e:	d112      	bne.n	8006786 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006764:	461a      	mov	r2, r3
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fd89 	bl	8009280 <VL53L0X_WrByte>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006782:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800678a:	4618      	mov	r0, r3
 800678c:	3728      	adds	r7, #40	; 0x28
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006792:	b590      	push	{r4, r7, lr}
 8006794:	b09d      	sub	sp, #116	; 0x74
 8006796:	af06      	add	r7, sp, #24
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80067a4:	23b4      	movs	r3, #180	; 0xb4
 80067a6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80067aa:	2303      	movs	r3, #3
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80067ae:	232c      	movs	r3, #44	; 0x2c
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80067be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80067c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80067cc:	2306      	movs	r3, #6
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80067f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80067fc:	e009      	b.n	8006812 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006802:	4413      	add	r3, r2
 8006804:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680e:	3301      	adds	r3, #1
 8006810:	64bb      	str	r3, [r7, #72]	; 0x48
 8006812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	429a      	cmp	r2, r3
 8006818:	d3f1      	bcc.n	80067fe <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800681a:	2201      	movs	r2, #1
 800681c:	21ff      	movs	r1, #255	; 0xff
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f002 fd2e 	bl	8009280 <VL53L0X_WrByte>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800682a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800682e:	2b00      	cmp	r3, #0
 8006830:	d107      	bne.n	8006842 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006832:	2200      	movs	r2, #0
 8006834:	214f      	movs	r1, #79	; 0x4f
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f002 fd22 	bl	8009280 <VL53L0X_WrByte>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006842:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800684a:	222c      	movs	r2, #44	; 0x2c
 800684c:	214e      	movs	r1, #78	; 0x4e
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f002 fd16 	bl	8009280 <VL53L0X_WrByte>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800685a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006862:	2200      	movs	r2, #0
 8006864:	21ff      	movs	r1, #255	; 0xff
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f002 fd0a 	bl	8009280 <VL53L0X_WrByte>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006872:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800687a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800687e:	461a      	mov	r2, r3
 8006880:	21b6      	movs	r1, #182	; 0xb6
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f002 fcfc 	bl	8009280 <VL53L0X_WrByte>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800688e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006896:	2200      	movs	r2, #0
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f002 fcf0 	bl	8009280 <VL53L0X_WrByte>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80068a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80068ae:	f107 0210 	add.w	r2, r7, #16
 80068b2:	f107 0111 	add.w	r1, r7, #17
 80068b6:	2300      	movs	r3, #0
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 fbbb 	bl	8007034 <VL53L0X_perform_ref_calibration>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80068c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d121      	bne.n	8006910 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80068d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068da:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80068e8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068ec:	f107 0218 	add.w	r2, r7, #24
 80068f0:	9204      	str	r2, [sp, #16]
 80068f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f4:	9203      	str	r2, [sp, #12]
 80068f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068f8:	9202      	str	r2, [sp, #8]
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4623      	mov	r3, r4
 8006902:	4602      	mov	r2, r0
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fe5e 	bl	80065c6 <enable_ref_spads>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006914:	2b00      	cmp	r3, #0
 8006916:	d174      	bne.n	8006a02 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800691c:	f107 0312 	add.w	r3, r7, #18
 8006920:	4619      	mov	r1, r3
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff fecb 	bl	80066be <perform_ref_signal_measurement>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800692e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006932:	2b00      	cmp	r3, #0
 8006934:	d161      	bne.n	80069fa <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006936:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006938:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800693a:	429a      	cmp	r2, r3
 800693c:	d25d      	bcs.n	80069fa <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800693e:	2300      	movs	r3, #0
 8006940:	64bb      	str	r3, [r7, #72]	; 0x48
 8006942:	e009      	b.n	8006958 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006948:	4413      	add	r3, r2
 800694a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006954:	3301      	adds	r3, #1
 8006956:	64bb      	str	r3, [r7, #72]	; 0x48
 8006958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	429a      	cmp	r2, r3
 800695e:	d3f1      	bcc.n	8006944 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006960:	e002      	b.n	8006968 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006964:	3301      	adds	r3, #1
 8006966:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006968:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800696c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696e:	4413      	add	r3, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fdb1 	bl	80064d8 <is_aperture>
 8006976:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <VL53L0X_perform_ref_spad_management+0x1f2>
 800697c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	429a      	cmp	r2, r3
 8006982:	d3ee      	bcc.n	8006962 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006984:	2301      	movs	r3, #1
 8006986:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006998:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800699c:	f107 0218 	add.w	r2, r7, #24
 80069a0:	9204      	str	r2, [sp, #16]
 80069a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a4:	9203      	str	r2, [sp, #12]
 80069a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	4623      	mov	r3, r4
 80069b2:	4602      	mov	r2, r0
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fe06 	bl	80065c6 <enable_ref_spads>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80069c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11b      	bne.n	8006a00 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80069cc:	f107 0312 	add.w	r3, r7, #18
 80069d0:	4619      	mov	r1, r3
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff fe73 	bl	80066be <perform_ref_signal_measurement>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80069de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10c      	bne.n	8006a00 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80069e6:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80069e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d208      	bcs.n	8006a00 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80069f8:	e002      	b.n	8006a00 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fe:	e000      	b.n	8006a02 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a00:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 80af 	bne.w	8006b6a <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006a0c:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a10:	429a      	cmp	r2, r3
 8006a12:	f240 80aa 	bls.w	8006b6a <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a18:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006a26:	f107 031c 	add.w	r3, r7, #28
 8006a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 fdab 	bl	8009588 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006a32:	8a7b      	ldrh	r3, [r7, #18]
 8006a34:	461a      	mov	r2, r3
 8006a36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfb8      	it	lt
 8006a3e:	425b      	neglt	r3, r3
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006a48:	e086      	b.n	8006b58 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a58:	f7ff fce0 	bl	800641c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a62:	d103      	bne.n	8006a6c <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a64:	23ce      	movs	r3, #206	; 0xce
 8006a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006a6a:	e07e      	b.n	8006b6a <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006a6c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4413      	add	r3, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fd2f 	bl	80064d8 <is_aperture>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006a8a:	e06e      	b.n	8006b6a <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8e:	3301      	adds	r3, #1
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fd33 	bl	800650c <enable_spad_bit>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006aac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10c      	bne.n	8006ace <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fd59 	bl	800657a <set_ref_spad_map>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006ace:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d146      	bne.n	8006b64 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006ad6:	f107 0312 	add.w	r3, r7, #18
 8006ada:	4619      	mov	r1, r3
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fdee 	bl	80066be <perform_ref_signal_measurement>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006ae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d13b      	bne.n	8006b68 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006af0:	8a7b      	ldrh	r3, [r7, #18]
 8006af2:	461a      	mov	r2, r3
 8006af4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bfb8      	it	lt
 8006afc:	425b      	neglt	r3, r3
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006b00:	8a7b      	ldrh	r3, [r7, #18]
 8006b02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d21c      	bcs.n	8006b42 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d914      	bls.n	8006b3a <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006b10:	f107 031c 	add.w	r3, r7, #28
 8006b14:	4619      	mov	r1, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fd2f 	bl	800657a <set_ref_spad_map>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006b28:	f107 011c 	add.w	r1, r7, #28
 8006b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 fd2a 	bl	8009588 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	3b01      	subs	r3, #1
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b40:	e00a      	b.n	8006b58 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006b4c:	f107 031c 	add.w	r3, r7, #28
 8006b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b52:	4618      	mov	r0, r3
 8006b54:	f002 fd18 	bl	8009588 <memcpy>
		while (!complete) {
 8006b58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f43f af74 	beq.w	8006a4a <VL53L0X_perform_ref_spad_management+0x2b8>
 8006b62:	e002      	b.n	8006b6a <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b68:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d115      	bne.n	8006b9e <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b76:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006b7e:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006b9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	375c      	adds	r7, #92	; 0x5c
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd90      	pop	{r4, r7, pc}

08006baa <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006baa:	b590      	push	{r4, r7, lr}
 8006bac:	b093      	sub	sp, #76	; 0x4c
 8006bae:	af06      	add	r7, sp, #24
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006bc2:	23b4      	movs	r3, #180	; 0xb4
 8006bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006bc8:	2306      	movs	r3, #6
 8006bca:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006bcc:	232c      	movs	r3, #44	; 0x2c
 8006bce:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	21ff      	movs	r1, #255	; 0xff
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f002 fb53 	bl	8009280 <VL53L0X_WrByte>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006be0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006be8:	2200      	movs	r2, #0
 8006bea:	214f      	movs	r1, #79	; 0x4f
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f002 fb47 	bl	8009280 <VL53L0X_WrByte>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006bf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d107      	bne.n	8006c10 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006c00:	222c      	movs	r2, #44	; 0x2c
 8006c02:	214e      	movs	r1, #78	; 0x4e
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f002 fb3b 	bl	8009280 <VL53L0X_WrByte>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c18:	2200      	movs	r2, #0
 8006c1a:	21ff      	movs	r1, #255	; 0xff
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f002 fb2f 	bl	8009280 <VL53L0X_WrByte>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c34:	461a      	mov	r2, r3
 8006c36:	21b6      	movs	r1, #182	; 0xb6
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f002 fb21 	bl	8009280 <VL53L0X_WrByte>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006c44:	2300      	movs	r3, #0
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
 8006c48:	e009      	b.n	8006c5e <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d3f1      	bcc.n	8006c4a <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d011      	beq.n	8006c90 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006c6c:	e002      	b.n	8006c74 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	3301      	adds	r3, #1
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006c74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	4413      	add	r3, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff fc2b 	bl	80064d8 <is_aperture>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <VL53L0X_set_reference_spads+0xe6>
 8006c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d3ee      	bcc.n	8006c6e <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ca0:	79f9      	ldrb	r1, [r7, #7]
 8006ca2:	f107 0214 	add.w	r2, r7, #20
 8006ca6:	9204      	str	r2, [sp, #16]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	9203      	str	r2, [sp, #12]
 8006cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cae:	9202      	str	r2, [sp, #8]
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	4602      	mov	r2, r0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fc83 	bl	80065c6 <enable_ref_spads>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006cc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10c      	bne.n	8006ce8 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	79fa      	ldrb	r2, [r7, #7]
 8006ce4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006ce8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3734      	adds	r7, #52	; 0x34
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd90      	pop	{r4, r7, pc}

08006cf4 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f002 fab1 	bl	8009280 <VL53L0X_WrByte>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9bf 	bl	80070ae <VL53L0X_measurement_poll_for_completion>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fab6 	bl	80062b0 <VL53L0X_ClearInterruptMask>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d106      	bne.n	8006d5e <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006d50:	2200      	movs	r2, #0
 8006d52:	2100      	movs	r1, #0
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f002 fa93 	bl	8009280 <VL53L0X_WrByte>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	461a      	mov	r2, r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	70fb      	strb	r3, [r7, #3]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70bb      	strb	r3, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	21ff      	movs	r1, #255	; 0xff
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f002 fa75 	bl	8009280 <VL53L0X_WrByte>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006da0:	2200      	movs	r2, #0
 8006da2:	2100      	movs	r1, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f002 fa6b 	bl	8009280 <VL53L0X_WrByte>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006db4:	2200      	movs	r2, #0
 8006db6:	21ff      	movs	r1, #255	; 0xff
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f002 fa61 	bl	8009280 <VL53L0X_WrByte>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01e      	beq.n	8006e0c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006dce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	21cb      	movs	r1, #203	; 0xcb
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 fad2 	bl	8009384 <VL53L0X_RdByte>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006dea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d02a      	beq.n	8006e48 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006df2:	f107 030e 	add.w	r3, r7, #14
 8006df6:	461a      	mov	r2, r3
 8006df8:	21ee      	movs	r1, #238	; 0xee
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 fac2 	bl	8009384 <VL53L0X_RdByte>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	e01d      	b.n	8006e48 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006e0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006e14:	78bb      	ldrb	r3, [r7, #2]
 8006e16:	461a      	mov	r2, r3
 8006e18:	21cb      	movs	r1, #203	; 0xcb
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f002 fa30 	bl	8009280 <VL53L0X_WrByte>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006e32:	787b      	ldrb	r3, [r7, #1]
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	21ee      	movs	r1, #238	; 0xee
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 fa6f 	bl	800931c <VL53L0X_UpdateByte>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e48:	2201      	movs	r2, #1
 8006e4a:	21ff      	movs	r1, #255	; 0xff
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f002 fa17 	bl	8009280 <VL53L0X_WrByte>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 fa0d 	bl	8009280 <VL53L0X_WrByte>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e70:	2200      	movs	r2, #0
 8006e72:	21ff      	movs	r1, #255	; 0xff
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f002 fa03 	bl	8009280 <VL53L0X_WrByte>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	f023 0310 	bic.w	r3, r3, #16
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	701a      	strb	r2, [r3, #0]

	return Status;
 8006e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	; 0x28
 8006ea0:	af04      	add	r7, sp, #16
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	460b      	mov	r3, r1
 8006eac:	71fb      	strb	r3, [r7, #7]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006ec6:	79bb      	ldrb	r3, [r7, #6]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006ed2:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f002 f9d1 	bl	8009280 <VL53L0X_WrByte>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006eea:	2140      	movs	r1, #64	; 0x40
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff01 	bl	8006cf4 <VL53L0X_perform_single_ref_calibration>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d115      	bne.n	8006f2a <VL53L0X_perform_vhv_calibration+0x8e>
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d112      	bne.n	8006f2a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006f04:	7d39      	ldrb	r1, [r7, #20]
 8006f06:	7d7a      	ldrb	r2, [r7, #21]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	9302      	str	r3, [sp, #8]
 8006f10:	f107 0313 	add.w	r3, r7, #19
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff ff23 	bl	8006d6a <VL53L0X_ref_calibration_io>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e002      	b.n	8006f30 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d112      	bne.n	8006f5e <VL53L0X_perform_vhv_calibration+0xc2>
 8006f38:	79bb      	ldrb	r3, [r7, #6]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f3e:	7dbb      	ldrb	r3, [r7, #22]
 8006f40:	461a      	mov	r2, r3
 8006f42:	2101      	movs	r1, #1
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f002 f99b 	bl	8009280 <VL53L0X_WrByte>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	7dba      	ldrb	r2, [r7, #22]
 8006f5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b08a      	sub	sp, #40	; 0x28
 8006f6e:	af04      	add	r7, sp, #16
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	4611      	mov	r1, r2
 8006f76:	461a      	mov	r2, r3
 8006f78:	460b      	mov	r3, r1
 8006f7a:	71fb      	strb	r3, [r7, #7]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006f90:	79bb      	ldrb	r3, [r7, #6]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006f9c:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f002 f96c 	bl	8009280 <VL53L0X_WrByte>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff fe9c 	bl	8006cf4 <VL53L0X_perform_single_ref_calibration>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d115      	bne.n	8006ff4 <VL53L0X_perform_phase_calibration+0x8a>
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d112      	bne.n	8006ff4 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006fce:	7d39      	ldrb	r1, [r7, #20]
 8006fd0:	7d7a      	ldrb	r2, [r7, #21]
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	f107 0313 	add.w	r3, r7, #19
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff febe 	bl	8006d6a <VL53L0X_ref_calibration_io>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]
 8006ff2:	e002      	b.n	8006ffa <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d112      	bne.n	8007028 <VL53L0X_perform_phase_calibration+0xbe>
 8007002:	79bb      	ldrb	r3, [r7, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00f      	beq.n	8007028 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007008:	7dbb      	ldrb	r3, [r7, #22]
 800700a:	461a      	mov	r2, r3
 800700c:	2101      	movs	r1, #1
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f002 f936 	bl	8009280 <VL53L0X_WrByte>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	7dba      	ldrb	r2, [r7, #22]
 8007024:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007028:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007050:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	2300      	movs	r3, #0
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7ff ff1f 	bl	8006e9c <VL53L0X_perform_vhv_calibration>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d107      	bne.n	800707a <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	2300      	movs	r3, #0
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff ff7a 	bl	8006f6a <VL53L0X_perform_phase_calibration>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800707a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10f      	bne.n	80070a2 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007082:	7dbb      	ldrb	r3, [r7, #22]
 8007084:	461a      	mov	r2, r3
 8007086:	2101      	movs	r1, #1
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f002 f8f9 	bl	8009280 <VL53L0X_WrByte>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007092:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	7dba      	ldrb	r2, [r7, #22]
 800709e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80070a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80070c2:	f107 030f 	add.w	r3, r7, #15
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fe fe05 	bl	8005cd8 <VL53L0X_GetMeasurementDataReady>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80070d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d110      	bne.n	80070fc <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d00f      	beq.n	8007100 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3301      	adds	r3, #1
 80070e4:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80070ec:	d302      	bcc.n	80070f4 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80070ee:	23f9      	movs	r3, #249	; 0xf9
 80070f0:	75fb      	strb	r3, [r7, #23]
			break;
 80070f2:	e006      	b.n	8007102 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f002 f9e3 	bl	80094c0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80070fa:	e7e2      	b.n	80070c2 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007100:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	4603      	mov	r3, r0
 8007116:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	3301      	adds	r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800713e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007142:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007144:	e002      	b.n	800714c <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	089b      	lsrs	r3, r3, #2
 800714a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d8f8      	bhi.n	8007146 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007154:	e017      	b.n	8007186 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4413      	add	r3, r2
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d30b      	bcc.n	800717a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4413      	add	r3, r2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	4413      	add	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e002      	b.n	8007180 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	089b      	lsrs	r3, r3, #2
 8007184:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e4      	bne.n	8007156 <VL53L0X_isqrt+0x24>
	}

	return res;
 800718c:	68fb      	ldr	r3, [r7, #12]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80071a4:	2200      	movs	r2, #0
 80071a6:	2183      	movs	r1, #131	; 0x83
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 f869 	bl	8009280 <VL53L0X_WrByte>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80071b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d11e      	bne.n	80071fe <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80071c4:	f107 030f 	add.w	r3, r7, #15
 80071c8:	461a      	mov	r2, r3
 80071ca:	2183      	movs	r1, #131	; 0x83
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f002 f8d9 	bl	8009384 <VL53L0X_RdByte>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <VL53L0X_device_read_strobe+0x5a>
 80071dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3301      	adds	r3, #1
 80071e8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071f0:	d3e8      	bcc.n	80071c4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071f8:	d301      	bcc.n	80071fe <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80071fa:	23f9      	movs	r3, #249	; 0xf9
 80071fc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80071fe:	2201      	movs	r2, #1
 8007200:	2183      	movs	r1, #131	; 0x83
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 f83c 	bl	8009280 <VL53L0X_WrByte>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	4313      	orrs	r3, r2
 8007210:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007212:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b098      	sub	sp, #96	; 0x60
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800724e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007252:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007266:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800726a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800726e:	2b07      	cmp	r3, #7
 8007270:	f000 8408 	beq.w	8007a84 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007274:	2201      	movs	r2, #1
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f002 f801 	bl	8009280 <VL53L0X_WrByte>
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007286:	4313      	orrs	r3, r2
 8007288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800728c:	2201      	movs	r2, #1
 800728e:	21ff      	movs	r1, #255	; 0xff
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fff5 	bl	8009280 <VL53L0X_WrByte>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800729e:	4313      	orrs	r3, r2
 80072a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 ffe9 	bl	8009280 <VL53L0X_WrByte>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80072bc:	2206      	movs	r2, #6
 80072be:	21ff      	movs	r1, #255	; 0xff
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 ffdd 	bl	8009280 <VL53L0X_WrByte>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80072d4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80072d8:	461a      	mov	r2, r3
 80072da:	2183      	movs	r1, #131	; 0x83
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 f851 	bl	8009384 <VL53L0X_RdByte>
 80072e2:	4603      	mov	r3, r0
 80072e4:	461a      	mov	r2, r3
 80072e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80072f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072f4:	f043 0304 	orr.w	r3, r3, #4
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	2183      	movs	r1, #131	; 0x83
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 ffbe 	bl	8009280 <VL53L0X_WrByte>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800730c:	4313      	orrs	r3, r2
 800730e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007312:	2207      	movs	r2, #7
 8007314:	21ff      	movs	r1, #255	; 0xff
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 ffb2 	bl	8009280 <VL53L0X_WrByte>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007324:	4313      	orrs	r3, r2
 8007326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800732a:	2201      	movs	r2, #1
 800732c:	2181      	movs	r1, #129	; 0x81
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 ffa6 	bl	8009280 <VL53L0X_WrByte>
 8007334:	4603      	mov	r3, r0
 8007336:	461a      	mov	r2, r3
 8007338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733c:	4313      	orrs	r3, r2
 800733e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f002 f8bc 	bl	80094c0 <VL53L0X_PollingDelay>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007350:	4313      	orrs	r3, r2
 8007352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007356:	2201      	movs	r2, #1
 8007358:	2180      	movs	r1, #128	; 0x80
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 ff90 	bl	8009280 <VL53L0X_WrByte>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007368:	4313      	orrs	r3, r2
 800736a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8098 	beq.w	80074aa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800737a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800737e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8091 	bne.w	80074aa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007388:	226b      	movs	r2, #107	; 0x6b
 800738a:	2194      	movs	r1, #148	; 0x94
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 ff77 	bl	8009280 <VL53L0X_WrByte>
 8007392:	4603      	mov	r3, r0
 8007394:	461a      	mov	r2, r3
 8007396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800739a:	4313      	orrs	r3, r2
 800739c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fef9 	bl	8007198 <VL53L0X_device_read_strobe>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80073b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073b8:	461a      	mov	r2, r3
 80073ba:	2190      	movs	r1, #144	; 0x90
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f002 f843 	bl	8009448 <VL53L0X_RdDWord>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	0bdb      	lsrs	r3, r3, #15
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80073ec:	2224      	movs	r2, #36	; 0x24
 80073ee:	2194      	movs	r1, #148	; 0x94
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 ff45 	bl	8009280 <VL53L0X_WrByte>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073fe:	4313      	orrs	r3, r2
 8007400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fec7 	bl	8007198 <VL53L0X_device_read_strobe>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007412:	4313      	orrs	r3, r2
 8007414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800741c:	461a      	mov	r2, r3
 800741e:	2190      	movs	r1, #144	; 0x90
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 f811 	bl	8009448 <VL53L0X_RdDWord>
 8007426:	4603      	mov	r3, r0
 8007428:	461a      	mov	r2, r3
 800742a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800742e:	4313      	orrs	r3, r2
 8007430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	b2db      	uxtb	r3, r3
 800743a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	b2db      	uxtb	r3, r3
 8007442:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	b2db      	uxtb	r3, r3
 800744a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	b2db      	uxtb	r3, r3
 8007450:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007452:	2225      	movs	r2, #37	; 0x25
 8007454:	2194      	movs	r1, #148	; 0x94
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 ff12 	bl	8009280 <VL53L0X_WrByte>
 800745c:	4603      	mov	r3, r0
 800745e:	461a      	mov	r2, r3
 8007460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007464:	4313      	orrs	r3, r2
 8007466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fe94 	bl	8007198 <VL53L0X_device_read_strobe>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007478:	4313      	orrs	r3, r2
 800747a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800747e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007482:	461a      	mov	r2, r3
 8007484:	2190      	movs	r1, #144	; 0x90
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 ffde 	bl	8009448 <VL53L0X_RdDWord>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007494:	4313      	orrs	r3, r2
 8007496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	0e1b      	lsrs	r3, r3, #24
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8189 	beq.w	80077c8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80074b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074ba:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f040 8182 	bne.w	80077c8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80074c4:	2202      	movs	r2, #2
 80074c6:	2194      	movs	r1, #148	; 0x94
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fed9 	bl	8009280 <VL53L0X_WrByte>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff fe5b 	bl	8007198 <VL53L0X_device_read_strobe>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80074f0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80074f4:	461a      	mov	r2, r3
 80074f6:	2190      	movs	r1, #144	; 0x90
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 ff43 	bl	8009384 <VL53L0X_RdByte>
 80074fe:	4603      	mov	r3, r0
 8007500:	461a      	mov	r2, r3
 8007502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007506:	4313      	orrs	r3, r2
 8007508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800750c:	227b      	movs	r2, #123	; 0x7b
 800750e:	2194      	movs	r1, #148	; 0x94
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 feb5 	bl	8009280 <VL53L0X_WrByte>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800751e:	4313      	orrs	r3, r2
 8007520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fe37 	bl	8007198 <VL53L0X_device_read_strobe>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007532:	4313      	orrs	r3, r2
 8007534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007538:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800753c:	461a      	mov	r2, r3
 800753e:	2190      	movs	r1, #144	; 0x90
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 ff1f 	bl	8009384 <VL53L0X_RdByte>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800754e:	4313      	orrs	r3, r2
 8007550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007554:	2277      	movs	r2, #119	; 0x77
 8007556:	2194      	movs	r1, #148	; 0x94
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fe91 	bl	8009280 <VL53L0X_WrByte>
 800755e:	4603      	mov	r3, r0
 8007560:	461a      	mov	r2, r3
 8007562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007566:	4313      	orrs	r3, r2
 8007568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff fe13 	bl	8007198 <VL53L0X_device_read_strobe>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800757a:	4313      	orrs	r3, r2
 800757c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007584:	461a      	mov	r2, r3
 8007586:	2190      	movs	r1, #144	; 0x90
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 ff5d 	bl	8009448 <VL53L0X_RdDWord>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007596:	4313      	orrs	r3, r2
 8007598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	0e5b      	lsrs	r3, r3, #25
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	0c9b      	lsrs	r3, r3, #18
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	0adb      	lsrs	r3, r3, #11
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80075e6:	2278      	movs	r2, #120	; 0x78
 80075e8:	2194      	movs	r1, #148	; 0x94
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fe48 	bl	8009280 <VL53L0X_WrByte>
 80075f0:	4603      	mov	r3, r0
 80075f2:	461a      	mov	r2, r3
 80075f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fdca 	bl	8007198 <VL53L0X_device_read_strobe>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800760c:	4313      	orrs	r3, r2
 800760e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007616:	461a      	mov	r2, r3
 8007618:	2190      	movs	r1, #144	; 0x90
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 ff14 	bl	8009448 <VL53L0X_RdDWord>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007628:	4313      	orrs	r3, r2
 800762a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	0f5b      	lsrs	r3, r3, #29
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007638:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800763a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800763e:	4413      	add	r3, r2
 8007640:	b2db      	uxtb	r3, r3
 8007642:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	0d9b      	lsrs	r3, r3, #22
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764e:	b2db      	uxtb	r3, r3
 8007650:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	0bdb      	lsrs	r3, r3, #15
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765c:	b2db      	uxtb	r3, r3
 800765e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	0a1b      	lsrs	r3, r3, #8
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766a:	b2db      	uxtb	r3, r3
 800766c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007678:	b2db      	uxtb	r3, r3
 800767a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	b2db      	uxtb	r3, r3
 8007680:	019b      	lsls	r3, r3, #6
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	b2db      	uxtb	r3, r3
 800768a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800768e:	2279      	movs	r2, #121	; 0x79
 8007690:	2194      	movs	r1, #148	; 0x94
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fdf4 	bl	8009280 <VL53L0X_WrByte>
 8007698:	4603      	mov	r3, r0
 800769a:	461a      	mov	r2, r3
 800769c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fd76 	bl	8007198 <VL53L0X_device_read_strobe>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076be:	461a      	mov	r2, r3
 80076c0:	2190      	movs	r1, #144	; 0x90
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fec0 	bl	8009448 <VL53L0X_RdDWord>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	0e9b      	lsrs	r3, r3, #26
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80076e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076e6:	4413      	add	r3, r2
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	0cdb      	lsrs	r3, r3, #19
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	0b1b      	lsrs	r3, r3, #12
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007704:	b2db      	uxtb	r3, r3
 8007706:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007712:	b2db      	uxtb	r3, r3
 8007714:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	b2db      	uxtb	r3, r3
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007728:	227a      	movs	r2, #122	; 0x7a
 800772a:	2194      	movs	r1, #148	; 0x94
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fda7 	bl	8009280 <VL53L0X_WrByte>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800773a:	4313      	orrs	r3, r2
 800773c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fd29 	bl	8007198 <VL53L0X_device_read_strobe>
 8007746:	4603      	mov	r3, r0
 8007748:	461a      	mov	r2, r3
 800774a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800774e:	4313      	orrs	r3, r2
 8007750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007758:	461a      	mov	r2, r3
 800775a:	2190      	movs	r1, #144	; 0x90
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fe73 	bl	8009448 <VL53L0X_RdDWord>
 8007762:	4603      	mov	r3, r0
 8007764:	461a      	mov	r2, r3
 8007766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800776a:	4313      	orrs	r3, r2
 800776c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	0f9b      	lsrs	r3, r3, #30
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800777c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007780:	4413      	add	r3, r2
 8007782:	b2db      	uxtb	r3, r3
 8007784:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	0ddb      	lsrs	r3, r3, #23
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	b2db      	uxtb	r3, r3
 8007792:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	0a5b      	lsrs	r3, r3, #9
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80f1 	beq.w	80079b6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80077d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077d8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 80ea 	bne.w	80079b6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80077e2:	227b      	movs	r2, #123	; 0x7b
 80077e4:	2194      	movs	r1, #148	; 0x94
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fd4a 	bl	8009280 <VL53L0X_WrByte>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fccc 	bl	8007198 <VL53L0X_device_read_strobe>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007808:	4313      	orrs	r3, r2
 800780a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800780e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007812:	461a      	mov	r2, r3
 8007814:	2190      	movs	r1, #144	; 0x90
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fe16 	bl	8009448 <VL53L0X_RdDWord>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007824:	4313      	orrs	r3, r2
 8007826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800782a:	227c      	movs	r2, #124	; 0x7c
 800782c:	2194      	movs	r1, #148	; 0x94
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fd26 	bl	8009280 <VL53L0X_WrByte>
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800783c:	4313      	orrs	r3, r2
 800783e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fca8 	bl	8007198 <VL53L0X_device_read_strobe>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007850:	4313      	orrs	r3, r2
 8007852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785a:	461a      	mov	r2, r3
 800785c:	2190      	movs	r1, #144	; 0x90
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fdf2 	bl	8009448 <VL53L0X_RdDWord>
 8007864:	4603      	mov	r3, r0
 8007866:	461a      	mov	r2, r3
 8007868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800786c:	4313      	orrs	r3, r2
 800786e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007872:	2273      	movs	r2, #115	; 0x73
 8007874:	2194      	movs	r1, #148	; 0x94
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 fd02 	bl	8009280 <VL53L0X_WrByte>
 800787c:	4603      	mov	r3, r0
 800787e:	461a      	mov	r2, r3
 8007880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007884:	4313      	orrs	r3, r2
 8007886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fc84 	bl	8007198 <VL53L0X_device_read_strobe>
 8007890:	4603      	mov	r3, r0
 8007892:	461a      	mov	r2, r3
 8007894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007898:	4313      	orrs	r3, r2
 800789a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800789e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078a2:	461a      	mov	r2, r3
 80078a4:	2190      	movs	r1, #144	; 0x90
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fdce 	bl	8009448 <VL53L0X_RdDWord>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80078be:	b29b      	uxth	r3, r3
 80078c0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80078c2:	2274      	movs	r2, #116	; 0x74
 80078c4:	2194      	movs	r1, #148	; 0x94
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fcda 	bl	8009280 <VL53L0X_WrByte>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fc5c 	bl	8007198 <VL53L0X_device_read_strobe>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80078ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078f2:	461a      	mov	r2, r3
 80078f4:	2190      	movs	r1, #144	; 0x90
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fda6 	bl	8009448 <VL53L0X_RdDWord>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007904:	4313      	orrs	r3, r2
 8007906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800790e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007910:	4313      	orrs	r3, r2
 8007912:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007914:	2275      	movs	r2, #117	; 0x75
 8007916:	2194      	movs	r1, #148	; 0x94
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 fcb1 	bl	8009280 <VL53L0X_WrByte>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007926:	4313      	orrs	r3, r2
 8007928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff fc33 	bl	8007198 <VL53L0X_device_read_strobe>
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800793a:	4313      	orrs	r3, r2
 800793c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007944:	461a      	mov	r2, r3
 8007946:	2190      	movs	r1, #144	; 0x90
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fd7d 	bl	8009448 <VL53L0X_RdDWord>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007956:	4313      	orrs	r3, r2
 8007958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007960:	b29b      	uxth	r3, r3
 8007962:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007964:	2276      	movs	r2, #118	; 0x76
 8007966:	2194      	movs	r1, #148	; 0x94
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fc89 	bl	8009280 <VL53L0X_WrByte>
 800796e:	4603      	mov	r3, r0
 8007970:	461a      	mov	r2, r3
 8007972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007976:	4313      	orrs	r3, r2
 8007978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fc0b 	bl	8007198 <VL53L0X_device_read_strobe>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800798a:	4313      	orrs	r3, r2
 800798c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007994:	461a      	mov	r2, r3
 8007996:	2190      	movs	r1, #144	; 0x90
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fd55 	bl	8009448 <VL53L0X_RdDWord>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80079b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079b2:	4313      	orrs	r3, r2
 80079b4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80079b6:	2200      	movs	r2, #0
 80079b8:	2181      	movs	r1, #129	; 0x81
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fc60 	bl	8009280 <VL53L0X_WrByte>
 80079c0:	4603      	mov	r3, r0
 80079c2:	461a      	mov	r2, r3
 80079c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079c8:	4313      	orrs	r3, r2
 80079ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80079ce:	2206      	movs	r2, #6
 80079d0:	21ff      	movs	r1, #255	; 0xff
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fc54 	bl	8009280 <VL53L0X_WrByte>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079e0:	4313      	orrs	r3, r2
 80079e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80079e6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80079ea:	461a      	mov	r2, r3
 80079ec:	2183      	movs	r1, #131	; 0x83
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fcc8 	bl	8009384 <VL53L0X_RdByte>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a06:	f023 0304 	bic.w	r3, r3, #4
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2183      	movs	r1, #131	; 0x83
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fc35 	bl	8009280 <VL53L0X_WrByte>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a24:	2201      	movs	r2, #1
 8007a26:	21ff      	movs	r1, #255	; 0xff
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 fc29 	bl	8009280 <VL53L0X_WrByte>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fc1d 	bl	8009280 <VL53L0X_WrByte>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a54:	2200      	movs	r2, #0
 8007a56:	21ff      	movs	r1, #255	; 0xff
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fc11 	bl	8009280 <VL53L0X_WrByte>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fc05 	bl	8009280 <VL53L0X_WrByte>
 8007a76:	4603      	mov	r3, r0
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007a84:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 808f 	bne.w	8007bac <VL53L0X_get_info_from_device+0x98e>
 8007a8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a92:	2b07      	cmp	r3, #7
 8007a94:	f000 808a 	beq.w	8007bac <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d024      	beq.n	8007aec <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007aa6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d11e      	bne.n	8007aec <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007ab4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007abe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac6:	e00e      	b.n	8007ae6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007ac8:	f107 0208 	add.w	r2, r7, #8
 8007acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ace:	4413      	add	r3, r2
 8007ad0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007adc:	460a      	mov	r2, r1
 8007ade:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	dded      	ble.n	8007ac8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d018      	beq.n	8007b28 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007afa:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d112      	bne.n	8007b28 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b0c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	33f3      	adds	r3, #243	; 0xf3
 8007b1a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	4619      	mov	r1, r3
 8007b22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b24:	f001 fd3e 	bl	80095a4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d030      	beq.n	8007b94 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007b32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b36:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d12a      	bne.n	8007b94 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b50:	025b      	lsls	r3, r3, #9
 8007b52:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d011      	beq.n	8007b8c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b76:	fb02 f303 	mul.w	r3, r2, r3
 8007b7a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007b7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007b80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007b84:	425b      	negs	r3, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007b8c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007b94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007ba2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3760      	adds	r7, #96	; 0x60
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007bc4:	f240 6277 	movw	r2, #1655	; 0x677
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007bd0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007bd4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007be6:	68bb      	ldr	r3, [r7, #8]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b087      	sub	sp, #28
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d017      	beq.n	8007c3c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c12:	e005      	b.n	8007c20 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007c1a:	89fb      	ldrh	r3, [r7, #14]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f4      	bne.n	8007c14 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007c38:	4413      	add	r3, r2
 8007c3a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007c3c:	8afb      	ldrh	r3, [r7, #22]

}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bc80      	pop	{r7}
 8007c46:	4770      	bx	lr

08007c48 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	0a12      	lsrs	r2, r2, #8
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr
	...

08007c74 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff ff94 	bl	8007bb8 <VL53L0X_calc_macro_period_ps>
 8007c90:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c98:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <VL53L0X_calc_timeout_mclks+0x50>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	099b      	lsrs	r3, r3, #6
 8007ca0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ca8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	441a      	add	r2, r3
	timeout_period_mclks =
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	10624dd3 	.word	0x10624dd3

08007cc8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007cdc:	787b      	ldrb	r3, [r7, #1]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff ff69 	bl	8007bb8 <VL53L0X_calc_macro_period_ps>
 8007ce6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cee:	4a0a      	ldr	r2, [pc, #40]	; (8007d18 <VL53L0X_calc_timeout_us+0x50>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	099b      	lsrs	r3, r3, #6
 8007cf6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007d04:	4a04      	ldr	r2, [pc, #16]	; (8007d18 <VL53L0X_calc_timeout_us+0x50>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	099b      	lsrs	r3, r3, #6
 8007d0c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007d0e:	697b      	ldr	r3, [r7, #20]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	10624dd3 	.word	0x10624dd3

08007d1c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08c      	sub	sp, #48	; 0x30
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	460b      	mov	r3, r1
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <get_sequence_step_timeout+0x38>
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d002      	beq.n	8007d54 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d128      	bne.n	8007da6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d54:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7fd fa9c 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007d68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007d70:	f107 0320 	add.w	r3, r7, #32
 8007d74:	461a      	mov	r2, r3
 8007d76:	2146      	movs	r1, #70	; 0x46
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 fb03 	bl	8009384 <VL53L0X_RdByte>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007d84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff ff5c 	bl	8007c48 <VL53L0X_decode_timeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007d94:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007d98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff ff93 	bl	8007cc8 <VL53L0X_calc_timeout_us>
 8007da2:	62b8      	str	r0, [r7, #40]	; 0x28
 8007da4:	e092      	b.n	8007ecc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d135      	bne.n	8007e18 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007dac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007db0:	461a      	mov	r2, r3
 8007db2:	2100      	movs	r1, #0
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7fd fa70 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007dc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 8081 	bne.w	8007ecc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007dca:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7fd fa61 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007de6:	f107 031e 	add.w	r3, r7, #30
 8007dea:	461a      	mov	r2, r3
 8007dec:	2151      	movs	r1, #81	; 0x51
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 faf2 	bl	80093d8 <VL53L0X_RdWord>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007dfa:	8bfb      	ldrh	r3, [r7, #30]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff ff23 	bl	8007c48 <VL53L0X_decode_timeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e06:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff ff5a 	bl	8007cc8 <VL53L0X_calc_timeout_us>
 8007e14:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e16:	e059      	b.n	8007ecc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d156      	bne.n	8007ecc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e1e:	f107 0314 	add.w	r3, r7, #20
 8007e22:	4619      	mov	r1, r3
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7fd fb41 	bl	80054ac <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01d      	beq.n	8007e70 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e38:	461a      	mov	r2, r3
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7fd fa2c 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007e48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10f      	bne.n	8007e70 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007e50:	f107 031e 	add.w	r3, r7, #30
 8007e54:	461a      	mov	r2, r3
 8007e56:	2151      	movs	r1, #81	; 0x51
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fabd 	bl	80093d8 <VL53L0X_RdWord>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e64:	8bfb      	ldrh	r3, [r7, #30]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff feee 	bl	8007c48 <VL53L0X_decode_timeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007e70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	2101      	movs	r1, #1
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7fd fa0a 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10f      	bne.n	8007eb4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007e94:	f107 031c 	add.w	r3, r7, #28
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2171      	movs	r1, #113	; 0x71
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 fa9b 	bl	80093d8 <VL53L0X_RdWord>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007ea8:	8bbb      	ldrh	r3, [r7, #28]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff fecc 	bl	8007c48 <VL53L0X_decode_timeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007eb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007eb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007ebc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff feff 	bl	8007cc8 <VL53L0X_calc_timeout_us>
 8007eca:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed0:	601a      	str	r2, [r3, #0]

	return Status;
 8007ed2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3730      	adds	r7, #48	; 0x30
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b08a      	sub	sp, #40	; 0x28
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <set_sequence_step_timeout+0x26>
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d002      	beq.n	8007f04 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d138      	bne.n	8007f76 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f04:	f107 031b 	add.w	r3, r7, #27
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7fd f9c4 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d11a      	bne.n	8007f56 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007f20:	7efb      	ldrb	r3, [r7, #27]
 8007f22:	461a      	mov	r2, r3
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fea4 	bl	8007c74 <VL53L0X_calc_timeout_mclks>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007f30:	8bbb      	ldrh	r3, [r7, #28]
 8007f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f36:	d903      	bls.n	8007f40 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007f38:	23ff      	movs	r3, #255	; 0xff
 8007f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f3e:	e004      	b.n	8007f4a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007f40:	8bbb      	ldrh	r3, [r7, #28]
 8007f42:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007f44:	3b01      	subs	r3, #1
 8007f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f040 80ab 	bne.w	80080b6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f64:	461a      	mov	r2, r3
 8007f66:	2146      	movs	r1, #70	; 0x46
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f001 f989 	bl	8009280 <VL53L0X_WrByte>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007f74:	e09f      	b.n	80080b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d135      	bne.n	8007fe8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d11b      	bne.n	8007fbc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f84:	f107 031b 	add.w	r3, r7, #27
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7fd f984 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007f98:	7efb      	ldrb	r3, [r7, #27]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fe68 	bl	8007c74 <VL53L0X_calc_timeout_mclks>
 8007fa4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff fe21 	bl	8007bf2 <VL53L0X_encode_timeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fb4:	8b3a      	ldrh	r2, [r7, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d108      	bne.n	8007fd6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007fc4:	8b3b      	ldrh	r3, [r7, #24]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2151      	movs	r1, #81	; 0x51
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 f97c 	bl	80092c8 <VL53L0X_WrWord>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007fd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d16b      	bne.n	80080b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007fe6:	e066      	b.n	80080b6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d160      	bne.n	80080b0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007fee:	f107 0310 	add.w	r3, r7, #16
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7fd fa59 	bl	80054ac <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007ffe:	7cfb      	ldrb	r3, [r7, #19]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01d      	beq.n	8008040 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008004:	f107 031b 	add.w	r3, r7, #27
 8008008:	461a      	mov	r2, r3
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7fd f944 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8008012:	4603      	mov	r3, r0
 8008014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10f      	bne.n	8008040 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008020:	f107 0318 	add.w	r3, r7, #24
 8008024:	461a      	mov	r2, r3
 8008026:	2151      	movs	r1, #81	; 0x51
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f001 f9d5 	bl	80093d8 <VL53L0X_RdWord>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008034:	8b3b      	ldrh	r3, [r7, #24]
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fe06 	bl	8007c48 <VL53L0X_decode_timeout>
 800803c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800803e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008040:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008048:	f107 031b 	add.w	r3, r7, #27
 800804c:	461a      	mov	r2, r3
 800804e:	2101      	movs	r1, #1
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7fd f922 	bl	800529a <VL53L0X_GetVcselPulsePeriod>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800805c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008060:	2b00      	cmp	r3, #0
 8008062:	d128      	bne.n	80080b6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008064:	7efb      	ldrb	r3, [r7, #27]
 8008066:	461a      	mov	r2, r3
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7ff fe02 	bl	8007c74 <VL53L0X_calc_timeout_mclks>
 8008070:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008074:	6a3a      	ldr	r2, [r7, #32]
 8008076:	4413      	add	r3, r2
 8008078:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800807a:	6a38      	ldr	r0, [r7, #32]
 800807c:	f7ff fdb9 	bl	8007bf2 <VL53L0X_encode_timeout>
 8008080:	4603      	mov	r3, r0
 8008082:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008088:	2b00      	cmp	r3, #0
 800808a:	d108      	bne.n	800809e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800808c:	8bfb      	ldrh	r3, [r7, #30]
 800808e:	461a      	mov	r2, r3
 8008090:	2171      	movs	r1, #113	; 0x71
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f001 f918 	bl	80092c8 <VL53L0X_WrWord>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800809e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d107      	bne.n	80080b6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80080ae:	e002      	b.n	80080b6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080b0:	23fc      	movs	r3, #252	; 0xfc
 80080b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80080b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3728      	adds	r7, #40	; 0x28
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	460b      	mov	r3, r1
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080d0:	2300      	movs	r3, #0
 80080d2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d00a      	beq.n	80080f4 <VL53L0X_get_vcsel_pulse_period+0x32>
 80080de:	e013      	b.n	8008108 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80080e0:	f107 0316 	add.w	r3, r7, #22
 80080e4:	461a      	mov	r2, r3
 80080e6:	2150      	movs	r1, #80	; 0x50
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 f94b 	bl	8009384 <VL53L0X_RdByte>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80080f2:	e00b      	b.n	800810c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80080f4:	f107 0316 	add.w	r3, r7, #22
 80080f8:	461a      	mov	r2, r3
 80080fa:	2170      	movs	r1, #112	; 0x70
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f001 f941 	bl	8009384 <VL53L0X_RdByte>
 8008102:	4603      	mov	r3, r0
 8008104:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008106:	e001      	b.n	800810c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008108:	23fc      	movs	r3, #252	; 0xfc
 800810a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800810c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d107      	bne.n	8008124 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008114:	7dbb      	ldrb	r3, [r7, #22]
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fff9 	bl	800710e <VL53L0X_decode_vcsel_period>
 800811c:	4603      	mov	r3, r0
 800811e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	701a      	strb	r2, [r3, #0]

	return Status;
 8008124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b092      	sub	sp, #72	; 0x48
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800813a:	2300      	movs	r3, #0
 800813c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008140:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008144:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008146:	f240 7376 	movw	r3, #1910	; 0x776
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800814c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008150:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008152:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008158:	f240 234e 	movw	r3, #590	; 0x24e
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800815e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008164:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008168:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800816a:	f240 2326 	movw	r3, #550	; 0x226
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008174:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008178:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	429a      	cmp	r2, r3
 8008184:	d205      	bcs.n	8008192 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008186:	23fc      	movs	r3, #252	; 0xfc
 8008188:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800818c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008190:	e0aa      	b.n	80082e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7fd f981 	bl	80054ac <VL53L0X_GetSequenceStepEnables>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80081b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d15b      	bne.n	8008270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80081b8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d105      	bne.n	80081ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80081be:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80081c4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d052      	beq.n	8008270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80081ca:	f107 0310 	add.w	r3, r7, #16
 80081ce:	461a      	mov	r2, r3
 80081d0:	2102      	movs	r1, #2
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fda2 	bl	8007d1c <get_sequence_step_timeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80081de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80081e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081ea:	e07d      	b.n	80082e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80081ec:	7d3b      	ldrb	r3, [r7, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00f      	beq.n	8008212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80081f2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80081f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f6:	4413      	add	r3, r2
 80081f8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	429a      	cmp	r2, r3
 8008200:	d204      	bcs.n	800820c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	643b      	str	r3, [r7, #64]	; 0x40
 800820a:	e002      	b.n	8008212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800820c:	23fc      	movs	r3, #252	; 0xfc
 800820e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008212:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800821a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800821e:	e063      	b.n	80082e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008220:	7dbb      	ldrb	r3, [r7, #22]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d011      	beq.n	800824a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	4413      	add	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008234:	429a      	cmp	r2, r3
 8008236:	d204      	bcs.n	8008242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	643b      	str	r3, [r7, #64]	; 0x40
 8008240:	e016      	b.n	8008270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008242:	23fc      	movs	r3, #252	; 0xfc
 8008244:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008248:	e012      	b.n	8008270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800824a:	7d7b      	ldrb	r3, [r7, #21]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00f      	beq.n	8008270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008254:	4413      	add	r3, r2
 8008256:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825c:	429a      	cmp	r2, r3
 800825e:	d204      	bcs.n	800826a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
 8008268:	e002      	b.n	8008270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800826a:	23fc      	movs	r3, #252	; 0xfc
 800826c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008270:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008278:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800827c:	e034      	b.n	80082e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d019      	beq.n	80082b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008284:	f107 030c 	add.w	r3, r7, #12
 8008288:	461a      	mov	r2, r3
 800828a:	2103      	movs	r1, #3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff fd45 	bl	8007d1c <get_sequence_step_timeout>
 8008292:	4603      	mov	r3, r0
 8008294:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800829c:	4413      	add	r3, r2
 800829e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d204      	bcs.n	80082b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80082a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	643b      	str	r3, [r7, #64]	; 0x40
 80082b0:	e002      	b.n	80082b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082b2:	23fc      	movs	r3, #252	; 0xfc
 80082b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80082b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d111      	bne.n	80082e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80082c0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80082c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80082ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082d0:	2104      	movs	r1, #4
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fe03 	bl	8007ede <set_sequence_step_timeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80082e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3748      	adds	r7, #72	; 0x48
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b090      	sub	sp, #64	; 0x40
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008300:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008304:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008306:	f240 7376 	movw	r3, #1910	; 0x776
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800830c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008312:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008316:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008318:	f240 234e 	movw	r3, #590	; 0x24e
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800831e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008324:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800832a:	f240 2326 	movw	r3, #550	; 0x226
 800832e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	441a      	add	r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800833e:	f107 0318 	add.w	r3, r7, #24
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fd f8b1 	bl	80054ac <VL53L0X_GetSequenceStepEnables>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008350:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008358:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800835c:	e075      	b.n	800844a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800835e:	7e3b      	ldrb	r3, [r7, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d105      	bne.n	8008370 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008364:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800836a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800836c:	2b00      	cmp	r3, #0
 800836e:	d030      	beq.n	80083d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	461a      	mov	r2, r3
 8008376:	2102      	movs	r1, #2
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff fccf 	bl	8007d1c <get_sequence_step_timeout>
 800837e:	4603      	mov	r3, r0
 8008380:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008384:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008388:	2b00      	cmp	r3, #0
 800838a:	d122      	bne.n	80083d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800838c:	7e3b      	ldrb	r3, [r7, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008396:	6939      	ldr	r1, [r7, #16]
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800839c:	441a      	add	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80083a2:	7ebb      	ldrb	r3, [r7, #26]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d009      	beq.n	80083bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80083ac:	6939      	ldr	r1, [r7, #16]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	440b      	add	r3, r1
 80083b2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083b4:	441a      	add	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	e00a      	b.n	80083d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80083bc:	7e7b      	ldrb	r3, [r7, #25]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80083c6:	6939      	ldr	r1, [r7, #16]
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083cc:	441a      	add	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d114      	bne.n	8008404 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80083da:	7efb      	ldrb	r3, [r7, #27]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d011      	beq.n	8008404 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	461a      	mov	r2, r3
 80083e6:	2103      	movs	r1, #3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff fc97 	bl	8007d1c <get_sequence_step_timeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80083f8:	68f9      	ldr	r1, [r7, #12]
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80083fe:	441a      	add	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008404:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008408:	2b00      	cmp	r3, #0
 800840a:	d114      	bne.n	8008436 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800840c:	7f3b      	ldrb	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d011      	beq.n	8008436 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008412:	f107 0314 	add.w	r3, r7, #20
 8008416:	461a      	mov	r2, r3
 8008418:	2104      	movs	r1, #4
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff fc7e 	bl	8007d1c <get_sequence_step_timeout>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800842a:	6979      	ldr	r1, [r7, #20]
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008430:	441a      	add	r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008436:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008446:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800844a:	4618      	mov	r0, r3
 800844c:	3740      	adds	r7, #64	; 0x40
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800845e:	2300      	movs	r3, #0
 8008460:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008466:	e0c6      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4413      	add	r3, r2
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	3301      	adds	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008478:	7cfb      	ldrb	r3, [r7, #19]
 800847a:	2bff      	cmp	r3, #255	; 0xff
 800847c:	f040 808d 	bne.w	800859a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	4413      	add	r3, r2
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	747b      	strb	r3, [r7, #17]
			Index++;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	3301      	adds	r3, #1
 800848e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008490:	7c7b      	ldrb	r3, [r7, #17]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d87e      	bhi.n	8008594 <VL53L0X_load_tuning_settings+0x140>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <VL53L0X_load_tuning_settings+0x48>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084e7 	.word	0x080084e7
 80084a4:	08008521 	.word	0x08008521
 80084a8:	0800855b 	.word	0x0800855b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4413      	add	r3, r2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	743b      	strb	r3, [r7, #16]
				Index++;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	3301      	adds	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	4413      	add	r3, r2
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	3301      	adds	r3, #1
 80084ca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80084cc:	7c3b      	ldrb	r3, [r7, #16]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4413      	add	r3, r2
 80084da:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	89ba      	ldrh	r2, [r7, #12]
 80084e0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80084e4:	e087      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	4413      	add	r3, r2
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	743b      	strb	r3, [r7, #16]
				Index++;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	3301      	adds	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	4413      	add	r3, r2
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3301      	adds	r3, #1
 8008504:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008506:	7c3b      	ldrb	r3, [r7, #16]
 8008508:	b29b      	uxth	r3, r3
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	b29a      	uxth	r2, r3
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	b29b      	uxth	r3, r3
 8008512:	4413      	add	r3, r2
 8008514:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	89ba      	ldrh	r2, [r7, #12]
 800851a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800851e:	e06a      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4413      	add	r3, r2
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	743b      	strb	r3, [r7, #16]
				Index++;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	3301      	adds	r3, #1
 800852e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	73fb      	strb	r3, [r7, #15]
				Index++;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	3301      	adds	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008540:	7c3b      	ldrb	r3, [r7, #16]
 8008542:	b29b      	uxth	r3, r3
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b29a      	uxth	r2, r3
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	b29b      	uxth	r3, r3
 800854c:	4413      	add	r3, r2
 800854e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	89ba      	ldrh	r2, [r7, #12]
 8008554:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008558:	e04d      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	4413      	add	r3, r2
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	743b      	strb	r3, [r7, #16]
				Index++;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	3301      	adds	r3, #1
 8008568:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	4413      	add	r3, r2
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	3301      	adds	r3, #1
 8008578:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800857a:	7c3b      	ldrb	r3, [r7, #16]
 800857c:	b29b      	uxth	r3, r3
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	b29a      	uxth	r2, r3
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	b29b      	uxth	r3, r3
 8008586:	4413      	add	r3, r2
 8008588:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	89ba      	ldrh	r2, [r7, #12]
 800858e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008592:	e030      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008594:	23fc      	movs	r3, #252	; 0xfc
 8008596:	77fb      	strb	r3, [r7, #31]
 8008598:	e02d      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800859a:	7cfb      	ldrb	r3, [r7, #19]
 800859c:	2b04      	cmp	r3, #4
 800859e:	d828      	bhi.n	80085f2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	3301      	adds	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80085b0:	2300      	movs	r3, #0
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	e00f      	b.n	80085d6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	4413      	add	r3, r2
 80085bc:	7819      	ldrb	r1, [r3, #0]
 80085be:	f107 0208 	add.w	r2, r7, #8
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	4413      	add	r3, r2
 80085c6:	460a      	mov	r2, r1
 80085c8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	3301      	adds	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	7cfb      	ldrb	r3, [r7, #19]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	429a      	cmp	r2, r3
 80085dc:	dbeb      	blt.n	80085b6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	f107 0208 	add.w	r2, r7, #8
 80085e4:	7cb9      	ldrb	r1, [r7, #18]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fdee 	bl	80091c8 <VL53L0X_WriteMulti>
 80085ec:	4603      	mov	r3, r0
 80085ee:	77fb      	strb	r3, [r7, #31]
 80085f0:	e001      	b.n	80085f6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085f2:	23fc      	movs	r3, #252	; 0xfc
 80085f4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	4413      	add	r3, r2
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <VL53L0X_load_tuning_settings+0x1b8>
 8008602:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f43f af2e 	beq.w	8008468 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800860c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008624:	2300      	movs	r3, #0
 8008626:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800862e:	f107 0313 	add.w	r3, r7, #19
 8008632:	4619      	mov	r1, r3
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7fc ffc5 	bl	80055c4 <VL53L0X_GetXTalkCompensationEnable>
 800863a:	4603      	mov	r3, r0
 800863c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800863e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d111      	bne.n	800866a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008646:	7cfb      	ldrb	r3, [r7, #19]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00e      	beq.n	800866a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	8a9b      	ldrh	r3, [r3, #20]
 8008656:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	3380      	adds	r3, #128	; 0x80
 8008664:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800866a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800868e:	f107 0310 	add.w	r3, r7, #16
 8008692:	461a      	mov	r2, r3
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff ffbe 	bl	8008618 <VL53L0X_get_total_xtalk_rate>
 800869c:	4603      	mov	r3, r0
 800869e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80086a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d105      	bne.n	80086b4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	441a      	add	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]

	return Status;
 80086b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b09a      	sub	sp, #104	; 0x68
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80086ce:	2312      	movs	r3, #18
 80086d0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80086d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086d6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80086d8:	2342      	movs	r3, #66	; 0x42
 80086da:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80086dc:	2306      	movs	r3, #6
 80086de:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80086e0:	2307      	movs	r3, #7
 80086e2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	3380      	adds	r3, #128	; 0x80
 8008708:	0a1b      	lsrs	r3, r3, #8
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008710:	fb02 f303 	mul.w	r3, r2, r3
 8008714:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01a      	beq.n	8008756 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	029b      	lsls	r3, r3, #10
 8008724:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800872a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872c:	4413      	add	r3, r2
 800872e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	fbb2 f3f3 	udiv	r3, r2, r3
 8008738:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800873a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800873c:	4613      	mov	r3, r2
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	4413      	add	r3, r2
 8008742:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008746:	fb03 f303 	mul.w	r3, r3, r3
 800874a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800874c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800874e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008766:	0c1b      	lsrs	r3, r3, #16
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	fb03 f303 	mul.w	r3, r3, r3
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008774:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008778:	0c1b      	lsrs	r3, r3, #16
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800877c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877e:	085a      	lsrs	r2, r3, #1
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	441a      	add	r2, r3
 8008784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008786:	fbb2 f3f3 	udiv	r3, r2, r3
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008790:	fb02 f303 	mul.w	r3, r2, r3
 8008794:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879c:	d302      	bcc.n	80087a4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800879e:	4b54      	ldr	r3, [pc, #336]	; (80088f0 <VL53L0X_calc_dmax+0x230>)
 80087a0:	663b      	str	r3, [r7, #96]	; 0x60
 80087a2:	e015      	b.n	80087d0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80087a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a6:	085a      	lsrs	r2, r3, #1
 80087a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087aa:	441a      	add	r2, r3
 80087ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80087b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087b8:	fb02 f303 	mul.w	r3, r2, r3
 80087bc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80087be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80087c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ca:	fb03 f303 	mul.w	r3, r3, r3
 80087ce:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80087d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d2:	039b      	lsls	r3, r3, #14
 80087d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80087d8:	4a46      	ldr	r2, [pc, #280]	; (80088f4 <VL53L0X_calc_dmax+0x234>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	099b      	lsrs	r3, r3, #6
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	fb03 f303 	mul.w	r3, r3, r3
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80087ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ec:	fb03 f303 	mul.w	r3, r3, r3
 80087f0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	3308      	adds	r3, #8
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80087fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008814:	0b9b      	lsrs	r3, r3, #14
 8008816:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800881a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881c:	4413      	add	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4413      	add	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800882e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008832:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	039b      	lsls	r3, r3, #14
 8008838:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	085b      	lsrs	r3, r3, #1
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	4413      	add	r3, r2
 8008842:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	fbb2 f3f3 	udiv	r3, r2, r3
 800884c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008852:	fb02 f303 	mul.w	r3, r2, r3
 8008856:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800885e:	4a25      	ldr	r2, [pc, #148]	; (80088f4 <VL53L0X_calc_dmax+0x234>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	099b      	lsrs	r3, r3, #6
 8008866:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <VL53L0X_calc_dmax+0x234>)
 8008876:	fba2 2303 	umull	r2, r3, r2, r3
 800887a:	099b      	lsrs	r3, r3, #6
 800887c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800887e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008880:	3380      	adds	r3, #128	; 0x80
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	085a      	lsrs	r2, r3, #1
 8008890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008892:	441a      	add	r2, r3
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	65bb      	str	r3, [r7, #88]	; 0x58
 800889c:	e001      	b.n	80088a2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80088a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088a4:	f7fe fc45 	bl	8007132 <VL53L0X_isqrt>
 80088a8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d008      	beq.n	80088c2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	085a      	lsrs	r2, r3, #1
 80088b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b6:	441a      	add	r2, r3
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80088be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c0:	e001      	b.n	80088c6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80088c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80088c8:	f7fe fc33 	bl	8007132 <VL53L0X_isqrt>
 80088cc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80088ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d8:	429a      	cmp	r2, r3
 80088da:	d902      	bls.n	80088e2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80088dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088e0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80088e2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3768      	adds	r7, #104	; 0x68
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	fff00000 	.word	0xfff00000
 80088f4:	10624dd3 	.word	0x10624dd3

080088f8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b0b4      	sub	sp, #208	; 0xd0
 80088fc:	af04      	add	r7, sp, #16
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008906:	f44f 7348 	mov.w	r3, #800	; 0x320
 800890a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800890e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008916:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800891a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800891e:	f241 235c 	movw	r3, #4700	; 0x125c
 8008922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008926:	4b9e      	ldr	r3, [pc, #632]	; (8008ba0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008928:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800892c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008930:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008932:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008940:	4b98      	ldr	r3, [pc, #608]	; (8008ba4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008942:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008948:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800894a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800894e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008950:	f240 6377 	movw	r3, #1655	; 0x677
 8008954:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008956:	2300      	movs	r3, #0
 8008958:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800896a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800896e:	0c1b      	lsrs	r3, r3, #16
 8008970:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008978:	f107 0310 	add.w	r3, r7, #16
 800897c:	461a      	mov	r2, r3
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff fe78 	bl	8008676 <VL53L0X_get_total_signal_rate>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	461a      	mov	r2, r3
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff fe3f 	bl	8008618 <VL53L0X_get_total_xtalk_rate>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089a6:	fb02 f303 	mul.w	r3, r2, r3
 80089aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80089ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089bc:	fb02 f303 	mul.w	r3, r2, r3
 80089c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80089c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80089c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d902      	bls.n	80089d4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80089ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80089d4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d168      	bne.n	8008aae <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80089e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80089ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80089f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80089f4:	461a      	mov	r2, r3
 80089f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff f93a 	bl	8007c74 <VL53L0X_calc_timeout_mclks>
 8008a00:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008a12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a16:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff f927 	bl	8007c74 <VL53L0X_calc_timeout_mclks>
 8008a26:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008a2e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d102      	bne.n	8008a3c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008a36:	2302      	movs	r3, #2
 8008a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a40:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008a42:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	02db      	lsls	r3, r3, #11
 8008a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a58:	4a53      	ldr	r2, [pc, #332]	; (8008ba8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5e:	099b      	lsrs	r3, r3, #6
 8008a60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a6a:	fb02 f303 	mul.w	r3, r2, r3
 8008a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a7a:	4a4b      	ldr	r2, [pc, #300]	; (8008ba8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a80:	099b      	lsrs	r3, r3, #6
 8008a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	3380      	adds	r3, #128	; 0x80
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008aa0:	3380      	adds	r3, #128	; 0x80
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008aae:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008ab6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008aba:	e15e      	b.n	8008d7a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8008abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10c      	bne.n	8008adc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ac8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ad0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e14c      	b.n	8008d76 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008adc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008aee:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af2:	041a      	lsls	r2, r3, #16
 8008af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d902      	bls.n	8008b0e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b12:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b16:	fb02 f303 	mul.w	r3, r2, r3
 8008b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008b1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b22:	4613      	mov	r3, r2
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe fb01 	bl	8007132 <VL53L0X_isqrt>
 8008b30:	4603      	mov	r3, r0
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	891b      	ldrh	r3, [r3, #8]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b3e:	fb02 f303 	mul.w	r3, r2, r3
 8008b42:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b46:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b4c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b4e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008b50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b54:	4a14      	ldr	r2, [pc, #80]	; (8008ba8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	099b      	lsrs	r3, r3, #6
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b60:	041b      	lsls	r3, r3, #16
 8008b62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008b66:	4a10      	ldr	r2, [pc, #64]	; (8008ba8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008b68:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6c:	099b      	lsrs	r3, r3, #6
 8008b6e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfb8      	it	lt
 8008b82:	425b      	neglt	r3, r3
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	7e1b      	ldrb	r3, [r3, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b9c:	e033      	b.n	8008c06 <VL53L0X_calc_sigma_estimate+0x30e>
 8008b9e:	bf00      	nop
 8008ba0:	028f87ae 	.word	0x028f87ae
 8008ba4:	0006999a 	.word	0x0006999a
 8008ba8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
 8008bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008bcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd2:	4413      	add	r3, r2
 8008bd4:	0c1b      	lsrs	r3, r3, #16
 8008bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bde:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bf4:	fb03 f303 	mul.w	r3, r3, r3
 8008bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c00:	0b9b      	lsrs	r3, r3, #14
 8008c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c0c:	fb02 f303 	mul.w	r3, r2, r3
 8008c10:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c18:	0c1b      	lsrs	r3, r3, #16
 8008c1a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	fb03 f303 	mul.w	r3, r3, r3
 8008c22:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c30:	0c1b      	lsrs	r3, r3, #16
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	fb03 f303 	mul.w	r3, r3, r3
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	4413      	add	r3, r2
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c46:	f7fe fa74 	bl	8007132 <VL53L0X_isqrt>
 8008c4a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	3332      	adds	r3, #50	; 0x32
 8008c56:	4a4b      	ldr	r2, [pc, #300]	; (8008d84 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008c58:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5c:	095a      	lsrs	r2, r3, #5
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c6c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008c70:	fb02 f303 	mul.w	r3, r2, r3
 8008c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c7c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008c80:	3308      	adds	r3, #8
 8008c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c8a:	4a3f      	ldr	r2, [pc, #252]	; (8008d88 <VL53L0X_calc_sigma_estimate+0x490>)
 8008c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c90:	0b5b      	lsrs	r3, r3, #13
 8008c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d902      	bls.n	8008ca6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008ca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008cb4:	4a35      	ldr	r2, [pc, #212]	; (8008d8c <VL53L0X_calc_sigma_estimate+0x494>)
 8008cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cba:	099b      	lsrs	r3, r3, #6
 8008cbc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc6:	441a      	add	r2, r3
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fa2f 	bl	8007132 <VL53L0X_isqrt>
 8008cd4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ce2:	4a2a      	ldr	r2, [pc, #168]	; (8008d8c <VL53L0X_calc_sigma_estimate+0x494>)
 8008ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce8:	099b      	lsrs	r3, r3, #6
 8008cea:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cf0:	fb03 f303 	mul.w	r3, r3, r3
 8008cf4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	fb03 f303 	mul.w	r3, r3, r3
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	4413      	add	r3, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fa14 	bl	8007132 <VL53L0X_isqrt>
 8008d0a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d12:	fb02 f303 	mul.w	r3, r2, r3
 8008d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <VL53L0X_calc_sigma_estimate+0x43c>
 8008d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <VL53L0X_calc_sigma_estimate+0x43c>
 8008d28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d903      	bls.n	8008d3c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d42:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008d4e:	6939      	ldr	r1, [r7, #16]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	9303      	str	r3, [sp, #12]
 8008d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff fca8 	bl	80086c0 <VL53L0X_calc_dmax>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d76:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	37c0      	adds	r7, #192	; 0xc0
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	51eb851f 	.word	0x51eb851f
 8008d88:	d1b71759 	.word	0xd1b71759
 8008d8c:	10624dd3 	.word	0x10624dd3

08008d90 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b090      	sub	sp, #64	; 0x40
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	72fb      	strb	r3, [r7, #11]
 8008da0:	4613      	mov	r3, r2
 8008da2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	10db      	asrs	r3, r3, #3
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 030f 	and.w	r3, r3, #15
 8008dec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008df0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <VL53L0X_get_pal_range_status+0x98>
 8008df8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008dfc:	2b05      	cmp	r3, #5
 8008dfe:	d013      	beq.n	8008e28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008e00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e04:	2b07      	cmp	r3, #7
 8008e06:	d00f      	beq.n	8008e28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008e08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e0c:	2b0c      	cmp	r3, #12
 8008e0e:	d00b      	beq.n	8008e28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008e10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e14:	2b0d      	cmp	r3, #13
 8008e16:	d007      	beq.n	8008e28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008e18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e1c:	2b0e      	cmp	r3, #14
 8008e1e:	d003      	beq.n	8008e28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008e20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e24:	2b0f      	cmp	r3, #15
 8008e26:	d103      	bne.n	8008e30 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008e2e:	e002      	b.n	8008e36 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e3e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008e42:	461a      	mov	r2, r3
 8008e44:	2100      	movs	r1, #0
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7fc fc90 	bl	800576c <VL53L0X_GetLimitCheckEnable>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d02e      	beq.n	8008eb8 <VL53L0X_get_pal_range_status+0x128>
 8008e5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d12a      	bne.n	8008eb8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008e62:	f107 0310 	add.w	r3, r7, #16
 8008e66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff fd43 	bl	80088f8 <VL53L0X_calc_sigma_estimate>
 8008e72:	4603      	mov	r3, r0
 8008e74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008e78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d103      	bne.n	8008e88 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e86:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008e88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d113      	bne.n	8008eb8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008e90:	f107 0320 	add.w	r3, r7, #32
 8008e94:	461a      	mov	r2, r3
 8008e96:	2100      	movs	r1, #0
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7fc fceb 	bl	8005874 <VL53L0X_GetLimitCheckValue>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d006      	beq.n	8008eb8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8008eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eac:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d902      	bls.n	8008eb8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008eb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008ec0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	2102      	movs	r1, #2
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7fc fc4f 	bl	800576c <VL53L0X_GetLimitCheckEnable>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008ed4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d044      	beq.n	8008f66 <VL53L0X_get_pal_range_status+0x1d6>
 8008edc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d140      	bne.n	8008f66 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008ee4:	f107 031c 	add.w	r3, r7, #28
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2102      	movs	r1, #2
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7fc fcc1 	bl	8005874 <VL53L0X_GetLimitCheckValue>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008ef8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d107      	bne.n	8008f10 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f00:	2201      	movs	r2, #1
 8008f02:	21ff      	movs	r1, #255	; 0xff
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 f9bb 	bl	8009280 <VL53L0X_WrByte>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008f10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d109      	bne.n	8008f2c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008f18:	f107 0316 	add.w	r3, r7, #22
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	21b6      	movs	r1, #182	; 0xb6
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fa59 	bl	80093d8 <VL53L0X_RdWord>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d107      	bne.n	8008f44 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f34:	2200      	movs	r2, #0
 8008f36:	21ff      	movs	r1, #255	; 0xff
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f9a1 	bl	8009280 <VL53L0X_WrByte>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008f44:	8afb      	ldrh	r3, [r7, #22]
 8008f46:	025b      	lsls	r3, r3, #9
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008f58:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d902      	bls.n	8008f66 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008f66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f72:	461a      	mov	r2, r3
 8008f74:	2103      	movs	r1, #3
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7fc fbf8 	bl	800576c <VL53L0X_GetLimitCheckEnable>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d023      	beq.n	8008fd2 <VL53L0X_get_pal_range_status+0x242>
 8008f8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d11f      	bne.n	8008fd2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008f92:	893b      	ldrh	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9c:	e005      	b.n	8008faa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	021a      	lsls	r2, r3, #8
 8008fa2:	893b      	ldrh	r3, [r7, #8]
 8008fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008faa:	f107 0318 	add.w	r3, r7, #24
 8008fae:	461a      	mov	r2, r3
 8008fb0:	2103      	movs	r1, #3
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7fc fc5e 	bl	8005874 <VL53L0X_GetLimitCheckValue>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008fc4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d202      	bcs.n	8008fd2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d14a      	bne.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008fda:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d103      	bne.n	8008fea <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e042      	b.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008fea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d007      	beq.n	8009002 <VL53L0X_get_pal_range_status+0x272>
 8008ff2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d003      	beq.n	8009002 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008ffa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d103      	bne.n	800900a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009004:	2205      	movs	r2, #5
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	e032      	b.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800900a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800900e:	2b06      	cmp	r3, #6
 8009010:	d003      	beq.n	800901a <VL53L0X_get_pal_range_status+0x28a>
 8009012:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009016:	2b09      	cmp	r3, #9
 8009018:	d103      	bne.n	8009022 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800901a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901c:	2204      	movs	r2, #4
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	e026      	b.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009022:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009026:	2b08      	cmp	r3, #8
 8009028:	d007      	beq.n	800903a <VL53L0X_get_pal_range_status+0x2aa>
 800902a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800902e:	2b0a      	cmp	r3, #10
 8009030:	d003      	beq.n	800903a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009032:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d103      	bne.n	8009042 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800903a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903c:	2203      	movs	r2, #3
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	e016      	b.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009042:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009046:	2b04      	cmp	r3, #4
 8009048:	d003      	beq.n	8009052 <VL53L0X_get_pal_range_status+0x2c2>
 800904a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800904e:	2b01      	cmp	r3, #1
 8009050:	d103      	bne.n	800905a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009054:	2202      	movs	r2, #2
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e00a      	b.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800905a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800905e:	2b01      	cmp	r3, #1
 8009060:	d103      	bne.n	800906a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009064:	2201      	movs	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	e002      	b.n	8009070 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d102      	bne.n	800907e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907a:	2200      	movs	r2, #0
 800907c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800907e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009082:	461a      	mov	r2, r3
 8009084:	2101      	movs	r1, #1
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7fc fb70 	bl	800576c <VL53L0X_GetLimitCheckEnable>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009092:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009096:	2b00      	cmp	r3, #0
 8009098:	d14f      	bne.n	800913a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800909a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <VL53L0X_get_pal_range_status+0x31a>
 80090a2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d103      	bne.n	80090b2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80090aa:	2301      	movs	r3, #1
 80090ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b0:	e002      	b.n	80090b8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80090be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80090c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d003      	beq.n	80090d2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80090ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80090d2:	2301      	movs	r3, #1
 80090d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d8:	e002      	b.n	80090e0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80090e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80090ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <VL53L0X_get_pal_range_status+0x36a>
 80090f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d103      	bne.n	8009102 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009100:	e002      	b.n	8009108 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800910e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009112:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <VL53L0X_get_pal_range_status+0x392>
 800911a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800911e:	2b01      	cmp	r3, #1
 8009120:	d103      	bne.n	800912a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009128:	e002      	b.n	8009130 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009136:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800913a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800913e:	4618      	mov	r0, r3
 8009140:	3740      	adds	r7, #64	; 0x40
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009146:	b580      	push	{r7, lr}
 8009148:	b088      	sub	sp, #32
 800914a:	af02      	add	r7, sp, #8
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	330a      	adds	r3, #10
 8009156:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009164:	b299      	uxth	r1, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	b29a      	uxth	r2, r3
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	4613      	mov	r3, r2
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	f7f8 fe2d 	bl	8001dd0 <HAL_I2C_Master_Transmit>
 8009176:	4603      	mov	r3, r0
 8009178:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800917a:	693b      	ldr	r3, [r7, #16]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	330a      	adds	r3, #10
 8009194:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	b299      	uxth	r1, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	4613      	mov	r3, r2
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	f7f8 ff09 	bl	8001fcc <HAL_I2C_Master_Receive>
 80091ba:	4603      	mov	r3, r0
 80091bc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80091be:	693b      	ldr	r3, [r7, #16]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	607a      	str	r2, [r7, #4]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	460b      	mov	r3, r1
 80091d6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091d8:	2300      	movs	r3, #0
 80091da:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b3f      	cmp	r3, #63	; 0x3f
 80091e0:	d902      	bls.n	80091e8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80091e2:	f06f 0303 	mvn.w	r3, #3
 80091e6:	e016      	b.n	8009216 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80091e8:	4a0d      	ldr	r2, [pc, #52]	; (8009220 <VL53L0X_WriteMulti+0x58>)
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	480c      	ldr	r0, [pc, #48]	; (8009224 <VL53L0X_WriteMulti+0x5c>)
 80091f4:	f000 f9c8 	bl	8009588 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	461a      	mov	r2, r3
 80091fe:	4908      	ldr	r1, [pc, #32]	; (8009220 <VL53L0X_WriteMulti+0x58>)
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff ffa0 	bl	8009146 <_I2CWrite>
 8009206:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800920e:	23ec      	movs	r3, #236	; 0xec
 8009210:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000648 	.word	0x20000648
 8009224:	20000649 	.word	0x20000649

08009228 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	607a      	str	r2, [r7, #4]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	460b      	mov	r3, r1
 8009236:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009238:	2300      	movs	r3, #0
 800923a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800923c:	f107 030b 	add.w	r3, r7, #11
 8009240:	2201      	movs	r2, #1
 8009242:	4619      	mov	r1, r3
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff ff7e 	bl	8009146 <_I2CWrite>
 800924a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009252:	23ec      	movs	r3, #236	; 0xec
 8009254:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009256:	e00c      	b.n	8009272 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff ff91 	bl	8009184 <_I2CRead>
 8009262:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800926a:	23ec      	movs	r3, #236	; 0xec
 800926c:	75fb      	strb	r3, [r7, #23]
 800926e:	e000      	b.n	8009272 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009270:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
 800928c:	4613      	mov	r3, r2
 800928e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <VL53L0X_WrByte+0x44>)
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800929a:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <VL53L0X_WrByte+0x44>)
 800929c:	78bb      	ldrb	r3, [r7, #2]
 800929e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80092a0:	2202      	movs	r2, #2
 80092a2:	4908      	ldr	r1, [pc, #32]	; (80092c4 <VL53L0X_WrByte+0x44>)
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff ff4e 	bl	8009146 <_I2CWrite>
 80092aa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80092b2:	23ec      	movs	r3, #236	; 0xec
 80092b4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80092b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000648 	.word	0x20000648

080092c8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
 80092d4:	4613      	mov	r3, r2
 80092d6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80092dc:	4a0e      	ldr	r2, [pc, #56]	; (8009318 <VL53L0X_WrWord+0x50>)
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80092e2:	883b      	ldrh	r3, [r7, #0]
 80092e4:	0a1b      	lsrs	r3, r3, #8
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <VL53L0X_WrWord+0x50>)
 80092ec:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80092ee:	883b      	ldrh	r3, [r7, #0]
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <VL53L0X_WrWord+0x50>)
 80092f4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80092f6:	2203      	movs	r2, #3
 80092f8:	4907      	ldr	r1, [pc, #28]	; (8009318 <VL53L0X_WrWord+0x50>)
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff ff23 	bl	8009146 <_I2CWrite>
 8009300:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009308:	23ec      	movs	r3, #236	; 0xec
 800930a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800930c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000648 	.word	0x20000648

0800931c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	461a      	mov	r2, r3
 800932a:	4603      	mov	r3, r0
 800932c:	70fb      	strb	r3, [r7, #3]
 800932e:	460b      	mov	r3, r1
 8009330:	70bb      	strb	r3, [r7, #2]
 8009332:	4613      	mov	r3, r2
 8009334:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800933a:	f107 020e 	add.w	r2, r7, #14
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f81e 	bl	8009384 <VL53L0X_RdByte>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800934c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d110      	bne.n	8009376 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009354:	7bba      	ldrb	r2, [r7, #14]
 8009356:	78bb      	ldrb	r3, [r7, #2]
 8009358:	4013      	ands	r3, r2
 800935a:	b2da      	uxtb	r2, r3
 800935c:	787b      	ldrb	r3, [r7, #1]
 800935e:	4313      	orrs	r3, r2
 8009360:	b2db      	uxtb	r3, r3
 8009362:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009364:	7bba      	ldrb	r2, [r7, #14]
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff ff88 	bl	8009280 <VL53L0X_WrByte>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
 8009374:	e000      	b.n	8009378 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009376:	bf00      	nop
done:
    return Status;
 8009378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	460b      	mov	r3, r1
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009396:	f107 030b 	add.w	r3, r7, #11
 800939a:	2201      	movs	r2, #1
 800939c:	4619      	mov	r1, r3
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f7ff fed1 	bl	8009146 <_I2CWrite>
 80093a4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80093ac:	23ec      	movs	r3, #236	; 0xec
 80093ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 80093b0:	e00c      	b.n	80093cc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80093b2:	2201      	movs	r2, #1
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff fee4 	bl	8009184 <_I2CRead>
 80093bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80093c4:	23ec      	movs	r3, #236	; 0xec
 80093c6:	75fb      	strb	r3, [r7, #23]
 80093c8:	e000      	b.n	80093cc <VL53L0X_RdByte+0x48>
    }
done:
 80093ca:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80093cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	460b      	mov	r3, r1
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80093ea:	f107 030b 	add.w	r3, r7, #11
 80093ee:	2201      	movs	r2, #1
 80093f0:	4619      	mov	r1, r3
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fea7 	bl	8009146 <_I2CWrite>
 80093f8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009400:	23ec      	movs	r3, #236	; 0xec
 8009402:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009404:	e017      	b.n	8009436 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009406:	2202      	movs	r2, #2
 8009408:	490e      	ldr	r1, [pc, #56]	; (8009444 <VL53L0X_RdWord+0x6c>)
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff feba 	bl	8009184 <_I2CRead>
 8009410:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009418:	23ec      	movs	r3, #236	; 0xec
 800941a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800941c:	e00b      	b.n	8009436 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <VL53L0X_RdWord+0x6c>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	b29a      	uxth	r2, r3
 8009428:	4b06      	ldr	r3, [pc, #24]	; (8009444 <VL53L0X_RdWord+0x6c>)
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	b29b      	uxth	r3, r3
 800942e:	4413      	add	r3, r2
 8009430:	b29a      	uxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000648 	.word	0x20000648

08009448 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	460b      	mov	r3, r1
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800945a:	f107 030b 	add.w	r3, r7, #11
 800945e:	2201      	movs	r2, #1
 8009460:	4619      	mov	r1, r3
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff fe6f 	bl	8009146 <_I2CWrite>
 8009468:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009470:	23ec      	movs	r3, #236	; 0xec
 8009472:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009474:	e01b      	b.n	80094ae <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009476:	2204      	movs	r2, #4
 8009478:	4910      	ldr	r1, [pc, #64]	; (80094bc <VL53L0X_RdDWord+0x74>)
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff fe82 	bl	8009184 <_I2CRead>
 8009480:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009488:	23ec      	movs	r3, #236	; 0xec
 800948a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800948c:	e00f      	b.n	80094ae <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <VL53L0X_RdDWord+0x74>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	061a      	lsls	r2, r3, #24
 8009494:	4b09      	ldr	r3, [pc, #36]	; (80094bc <VL53L0X_RdDWord+0x74>)
 8009496:	785b      	ldrb	r3, [r3, #1]
 8009498:	041b      	lsls	r3, r3, #16
 800949a:	441a      	add	r2, r3
 800949c:	4b07      	ldr	r3, [pc, #28]	; (80094bc <VL53L0X_RdDWord+0x74>)
 800949e:	789b      	ldrb	r3, [r3, #2]
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	4413      	add	r3, r2
 80094a4:	4a05      	ldr	r2, [pc, #20]	; (80094bc <VL53L0X_RdDWord+0x74>)
 80094a6:	78d2      	ldrb	r2, [r2, #3]
 80094a8:	441a      	add	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80094ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000648 	.word	0x20000648

080094c0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80094cc:	2002      	movs	r0, #2
 80094ce:	f7f7 ff57 	bl	8001380 <HAL_Delay>
    return status;
 80094d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <siprintf>:
 80094e0:	b40e      	push	{r1, r2, r3}
 80094e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e6:	b500      	push	{lr}
 80094e8:	b09c      	sub	sp, #112	; 0x70
 80094ea:	ab1d      	add	r3, sp, #116	; 0x74
 80094ec:	9002      	str	r0, [sp, #8]
 80094ee:	9006      	str	r0, [sp, #24]
 80094f0:	9107      	str	r1, [sp, #28]
 80094f2:	9104      	str	r1, [sp, #16]
 80094f4:	4808      	ldr	r0, [pc, #32]	; (8009518 <siprintf+0x38>)
 80094f6:	4909      	ldr	r1, [pc, #36]	; (800951c <siprintf+0x3c>)
 80094f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fc:	9105      	str	r1, [sp, #20]
 80094fe:	6800      	ldr	r0, [r0, #0]
 8009500:	a902      	add	r1, sp, #8
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	f000 f8b0 	bl	8009668 <_svfiprintf_r>
 8009508:	2200      	movs	r2, #0
 800950a:	9b02      	ldr	r3, [sp, #8]
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	b01c      	add	sp, #112	; 0x70
 8009510:	f85d eb04 	ldr.w	lr, [sp], #4
 8009514:	b003      	add	sp, #12
 8009516:	4770      	bx	lr
 8009518:	20000318 	.word	0x20000318
 800951c:	ffff0208 	.word	0xffff0208

08009520 <memset>:
 8009520:	4603      	mov	r3, r0
 8009522:	4402      	add	r2, r0
 8009524:	4293      	cmp	r3, r2
 8009526:	d100      	bne.n	800952a <memset+0xa>
 8009528:	4770      	bx	lr
 800952a:	f803 1b01 	strb.w	r1, [r3], #1
 800952e:	e7f9      	b.n	8009524 <memset+0x4>

08009530 <__errno>:
 8009530:	4b01      	ldr	r3, [pc, #4]	; (8009538 <__errno+0x8>)
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20000318 	.word	0x20000318

0800953c <__libc_init_array>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	2600      	movs	r6, #0
 8009540:	4d0c      	ldr	r5, [pc, #48]	; (8009574 <__libc_init_array+0x38>)
 8009542:	4c0d      	ldr	r4, [pc, #52]	; (8009578 <__libc_init_array+0x3c>)
 8009544:	1b64      	subs	r4, r4, r5
 8009546:	10a4      	asrs	r4, r4, #2
 8009548:	42a6      	cmp	r6, r4
 800954a:	d109      	bne.n	8009560 <__libc_init_array+0x24>
 800954c:	f000 fc82 	bl	8009e54 <_init>
 8009550:	2600      	movs	r6, #0
 8009552:	4d0a      	ldr	r5, [pc, #40]	; (800957c <__libc_init_array+0x40>)
 8009554:	4c0a      	ldr	r4, [pc, #40]	; (8009580 <__libc_init_array+0x44>)
 8009556:	1b64      	subs	r4, r4, r5
 8009558:	10a4      	asrs	r4, r4, #2
 800955a:	42a6      	cmp	r6, r4
 800955c:	d105      	bne.n	800956a <__libc_init_array+0x2e>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	f855 3b04 	ldr.w	r3, [r5], #4
 8009564:	4798      	blx	r3
 8009566:	3601      	adds	r6, #1
 8009568:	e7ee      	b.n	8009548 <__libc_init_array+0xc>
 800956a:	f855 3b04 	ldr.w	r3, [r5], #4
 800956e:	4798      	blx	r3
 8009570:	3601      	adds	r6, #1
 8009572:	e7f2      	b.n	800955a <__libc_init_array+0x1e>
 8009574:	08009f08 	.word	0x08009f08
 8009578:	08009f08 	.word	0x08009f08
 800957c:	08009f08 	.word	0x08009f08
 8009580:	08009f0c 	.word	0x08009f0c

08009584 <__retarget_lock_acquire_recursive>:
 8009584:	4770      	bx	lr

08009586 <__retarget_lock_release_recursive>:
 8009586:	4770      	bx	lr

08009588 <memcpy>:
 8009588:	440a      	add	r2, r1
 800958a:	4291      	cmp	r1, r2
 800958c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009590:	d100      	bne.n	8009594 <memcpy+0xc>
 8009592:	4770      	bx	lr
 8009594:	b510      	push	{r4, lr}
 8009596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959a:	4291      	cmp	r1, r2
 800959c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a0:	d1f9      	bne.n	8009596 <memcpy+0xe>
 80095a2:	bd10      	pop	{r4, pc}

080095a4 <strcpy>:
 80095a4:	4603      	mov	r3, r0
 80095a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095aa:	f803 2b01 	strb.w	r2, [r3], #1
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d1f9      	bne.n	80095a6 <strcpy+0x2>
 80095b2:	4770      	bx	lr

080095b4 <__ssputs_r>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	461f      	mov	r7, r3
 80095ba:	688e      	ldr	r6, [r1, #8]
 80095bc:	4682      	mov	sl, r0
 80095be:	42be      	cmp	r6, r7
 80095c0:	460c      	mov	r4, r1
 80095c2:	4690      	mov	r8, r2
 80095c4:	680b      	ldr	r3, [r1, #0]
 80095c6:	d82c      	bhi.n	8009622 <__ssputs_r+0x6e>
 80095c8:	898a      	ldrh	r2, [r1, #12]
 80095ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095ce:	d026      	beq.n	800961e <__ssputs_r+0x6a>
 80095d0:	6965      	ldr	r5, [r4, #20]
 80095d2:	6909      	ldr	r1, [r1, #16]
 80095d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095d8:	eba3 0901 	sub.w	r9, r3, r1
 80095dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095e0:	1c7b      	adds	r3, r7, #1
 80095e2:	444b      	add	r3, r9
 80095e4:	106d      	asrs	r5, r5, #1
 80095e6:	429d      	cmp	r5, r3
 80095e8:	bf38      	it	cc
 80095ea:	461d      	movcc	r5, r3
 80095ec:	0553      	lsls	r3, r2, #21
 80095ee:	d527      	bpl.n	8009640 <__ssputs_r+0x8c>
 80095f0:	4629      	mov	r1, r5
 80095f2:	f000 f957 	bl	80098a4 <_malloc_r>
 80095f6:	4606      	mov	r6, r0
 80095f8:	b360      	cbz	r0, 8009654 <__ssputs_r+0xa0>
 80095fa:	464a      	mov	r2, r9
 80095fc:	6921      	ldr	r1, [r4, #16]
 80095fe:	f7ff ffc3 	bl	8009588 <memcpy>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	6126      	str	r6, [r4, #16]
 8009610:	444e      	add	r6, r9
 8009612:	6026      	str	r6, [r4, #0]
 8009614:	463e      	mov	r6, r7
 8009616:	6165      	str	r5, [r4, #20]
 8009618:	eba5 0509 	sub.w	r5, r5, r9
 800961c:	60a5      	str	r5, [r4, #8]
 800961e:	42be      	cmp	r6, r7
 8009620:	d900      	bls.n	8009624 <__ssputs_r+0x70>
 8009622:	463e      	mov	r6, r7
 8009624:	4632      	mov	r2, r6
 8009626:	4641      	mov	r1, r8
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	f000 fb8a 	bl	8009d42 <memmove>
 800962e:	2000      	movs	r0, #0
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	1b9b      	subs	r3, r3, r6
 8009634:	60a3      	str	r3, [r4, #8]
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	4433      	add	r3, r6
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009640:	462a      	mov	r2, r5
 8009642:	f000 fb4f 	bl	8009ce4 <_realloc_r>
 8009646:	4606      	mov	r6, r0
 8009648:	2800      	cmp	r0, #0
 800964a:	d1e0      	bne.n	800960e <__ssputs_r+0x5a>
 800964c:	4650      	mov	r0, sl
 800964e:	6921      	ldr	r1, [r4, #16]
 8009650:	f000 fbb0 	bl	8009db4 <_free_r>
 8009654:	230c      	movs	r3, #12
 8009656:	f8ca 3000 	str.w	r3, [sl]
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009664:	81a3      	strh	r3, [r4, #12]
 8009666:	e7e9      	b.n	800963c <__ssputs_r+0x88>

08009668 <_svfiprintf_r>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	4698      	mov	r8, r3
 800966e:	898b      	ldrh	r3, [r1, #12]
 8009670:	4607      	mov	r7, r0
 8009672:	061b      	lsls	r3, r3, #24
 8009674:	460d      	mov	r5, r1
 8009676:	4614      	mov	r4, r2
 8009678:	b09d      	sub	sp, #116	; 0x74
 800967a:	d50e      	bpl.n	800969a <_svfiprintf_r+0x32>
 800967c:	690b      	ldr	r3, [r1, #16]
 800967e:	b963      	cbnz	r3, 800969a <_svfiprintf_r+0x32>
 8009680:	2140      	movs	r1, #64	; 0x40
 8009682:	f000 f90f 	bl	80098a4 <_malloc_r>
 8009686:	6028      	str	r0, [r5, #0]
 8009688:	6128      	str	r0, [r5, #16]
 800968a:	b920      	cbnz	r0, 8009696 <_svfiprintf_r+0x2e>
 800968c:	230c      	movs	r3, #12
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009694:	e0d0      	b.n	8009838 <_svfiprintf_r+0x1d0>
 8009696:	2340      	movs	r3, #64	; 0x40
 8009698:	616b      	str	r3, [r5, #20]
 800969a:	2300      	movs	r3, #0
 800969c:	9309      	str	r3, [sp, #36]	; 0x24
 800969e:	2320      	movs	r3, #32
 80096a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a4:	2330      	movs	r3, #48	; 0x30
 80096a6:	f04f 0901 	mov.w	r9, #1
 80096aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009850 <_svfiprintf_r+0x1e8>
 80096b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b6:	4623      	mov	r3, r4
 80096b8:	469a      	mov	sl, r3
 80096ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096be:	b10a      	cbz	r2, 80096c4 <_svfiprintf_r+0x5c>
 80096c0:	2a25      	cmp	r2, #37	; 0x25
 80096c2:	d1f9      	bne.n	80096b8 <_svfiprintf_r+0x50>
 80096c4:	ebba 0b04 	subs.w	fp, sl, r4
 80096c8:	d00b      	beq.n	80096e2 <_svfiprintf_r+0x7a>
 80096ca:	465b      	mov	r3, fp
 80096cc:	4622      	mov	r2, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ff6f 	bl	80095b4 <__ssputs_r>
 80096d6:	3001      	adds	r0, #1
 80096d8:	f000 80a9 	beq.w	800982e <_svfiprintf_r+0x1c6>
 80096dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096de:	445a      	add	r2, fp
 80096e0:	9209      	str	r2, [sp, #36]	; 0x24
 80096e2:	f89a 3000 	ldrb.w	r3, [sl]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80a1 	beq.w	800982e <_svfiprintf_r+0x1c6>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f6:	f10a 0a01 	add.w	sl, sl, #1
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	9307      	str	r3, [sp, #28]
 80096fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009702:	931a      	str	r3, [sp, #104]	; 0x68
 8009704:	4654      	mov	r4, sl
 8009706:	2205      	movs	r2, #5
 8009708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970c:	4850      	ldr	r0, [pc, #320]	; (8009850 <_svfiprintf_r+0x1e8>)
 800970e:	f000 fb43 	bl	8009d98 <memchr>
 8009712:	9a04      	ldr	r2, [sp, #16]
 8009714:	b9d8      	cbnz	r0, 800974e <_svfiprintf_r+0xe6>
 8009716:	06d0      	lsls	r0, r2, #27
 8009718:	bf44      	itt	mi
 800971a:	2320      	movmi	r3, #32
 800971c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009720:	0711      	lsls	r1, r2, #28
 8009722:	bf44      	itt	mi
 8009724:	232b      	movmi	r3, #43	; 0x2b
 8009726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b2a      	cmp	r3, #42	; 0x2a
 8009730:	d015      	beq.n	800975e <_svfiprintf_r+0xf6>
 8009732:	4654      	mov	r4, sl
 8009734:	2000      	movs	r0, #0
 8009736:	f04f 0c0a 	mov.w	ip, #10
 800973a:	9a07      	ldr	r2, [sp, #28]
 800973c:	4621      	mov	r1, r4
 800973e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009742:	3b30      	subs	r3, #48	; 0x30
 8009744:	2b09      	cmp	r3, #9
 8009746:	d94d      	bls.n	80097e4 <_svfiprintf_r+0x17c>
 8009748:	b1b0      	cbz	r0, 8009778 <_svfiprintf_r+0x110>
 800974a:	9207      	str	r2, [sp, #28]
 800974c:	e014      	b.n	8009778 <_svfiprintf_r+0x110>
 800974e:	eba0 0308 	sub.w	r3, r0, r8
 8009752:	fa09 f303 	lsl.w	r3, r9, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	46a2      	mov	sl, r4
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	e7d2      	b.n	8009704 <_svfiprintf_r+0x9c>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	1d19      	adds	r1, r3, #4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	9103      	str	r1, [sp, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfbb      	ittet	lt
 800976a:	425b      	neglt	r3, r3
 800976c:	f042 0202 	orrlt.w	r2, r2, #2
 8009770:	9307      	strge	r3, [sp, #28]
 8009772:	9307      	strlt	r3, [sp, #28]
 8009774:	bfb8      	it	lt
 8009776:	9204      	strlt	r2, [sp, #16]
 8009778:	7823      	ldrb	r3, [r4, #0]
 800977a:	2b2e      	cmp	r3, #46	; 0x2e
 800977c:	d10c      	bne.n	8009798 <_svfiprintf_r+0x130>
 800977e:	7863      	ldrb	r3, [r4, #1]
 8009780:	2b2a      	cmp	r3, #42	; 0x2a
 8009782:	d134      	bne.n	80097ee <_svfiprintf_r+0x186>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	3402      	adds	r4, #2
 8009788:	1d1a      	adds	r2, r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	9203      	str	r2, [sp, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfb8      	it	lt
 8009792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009796:	9305      	str	r3, [sp, #20]
 8009798:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009854 <_svfiprintf_r+0x1ec>
 800979c:	2203      	movs	r2, #3
 800979e:	4650      	mov	r0, sl
 80097a0:	7821      	ldrb	r1, [r4, #0]
 80097a2:	f000 faf9 	bl	8009d98 <memchr>
 80097a6:	b138      	cbz	r0, 80097b8 <_svfiprintf_r+0x150>
 80097a8:	2240      	movs	r2, #64	; 0x40
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	eba0 000a 	sub.w	r0, r0, sl
 80097b0:	4082      	lsls	r2, r0
 80097b2:	4313      	orrs	r3, r2
 80097b4:	3401      	adds	r4, #1
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097bc:	2206      	movs	r2, #6
 80097be:	4826      	ldr	r0, [pc, #152]	; (8009858 <_svfiprintf_r+0x1f0>)
 80097c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c4:	f000 fae8 	bl	8009d98 <memchr>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d038      	beq.n	800983e <_svfiprintf_r+0x1d6>
 80097cc:	4b23      	ldr	r3, [pc, #140]	; (800985c <_svfiprintf_r+0x1f4>)
 80097ce:	bb1b      	cbnz	r3, 8009818 <_svfiprintf_r+0x1b0>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	3307      	adds	r3, #7
 80097d4:	f023 0307 	bic.w	r3, r3, #7
 80097d8:	3308      	adds	r3, #8
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097de:	4433      	add	r3, r6
 80097e0:	9309      	str	r3, [sp, #36]	; 0x24
 80097e2:	e768      	b.n	80096b6 <_svfiprintf_r+0x4e>
 80097e4:	460c      	mov	r4, r1
 80097e6:	2001      	movs	r0, #1
 80097e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ec:	e7a6      	b.n	800973c <_svfiprintf_r+0xd4>
 80097ee:	2300      	movs	r3, #0
 80097f0:	f04f 0c0a 	mov.w	ip, #10
 80097f4:	4619      	mov	r1, r3
 80097f6:	3401      	adds	r4, #1
 80097f8:	9305      	str	r3, [sp, #20]
 80097fa:	4620      	mov	r0, r4
 80097fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009800:	3a30      	subs	r2, #48	; 0x30
 8009802:	2a09      	cmp	r2, #9
 8009804:	d903      	bls.n	800980e <_svfiprintf_r+0x1a6>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0c6      	beq.n	8009798 <_svfiprintf_r+0x130>
 800980a:	9105      	str	r1, [sp, #20]
 800980c:	e7c4      	b.n	8009798 <_svfiprintf_r+0x130>
 800980e:	4604      	mov	r4, r0
 8009810:	2301      	movs	r3, #1
 8009812:	fb0c 2101 	mla	r1, ip, r1, r2
 8009816:	e7f0      	b.n	80097fa <_svfiprintf_r+0x192>
 8009818:	ab03      	add	r3, sp, #12
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	462a      	mov	r2, r5
 800981e:	4638      	mov	r0, r7
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <_svfiprintf_r+0x1f8>)
 8009822:	a904      	add	r1, sp, #16
 8009824:	f3af 8000 	nop.w
 8009828:	1c42      	adds	r2, r0, #1
 800982a:	4606      	mov	r6, r0
 800982c:	d1d6      	bne.n	80097dc <_svfiprintf_r+0x174>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	065b      	lsls	r3, r3, #25
 8009832:	f53f af2d 	bmi.w	8009690 <_svfiprintf_r+0x28>
 8009836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009838:	b01d      	add	sp, #116	; 0x74
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	ab03      	add	r3, sp, #12
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	462a      	mov	r2, r5
 8009844:	4638      	mov	r0, r7
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <_svfiprintf_r+0x1f8>)
 8009848:	a904      	add	r1, sp, #16
 800984a:	f000 f91d 	bl	8009a88 <_printf_i>
 800984e:	e7eb      	b.n	8009828 <_svfiprintf_r+0x1c0>
 8009850:	08009ed2 	.word	0x08009ed2
 8009854:	08009ed8 	.word	0x08009ed8
 8009858:	08009edc 	.word	0x08009edc
 800985c:	00000000 	.word	0x00000000
 8009860:	080095b5 	.word	0x080095b5

08009864 <sbrk_aligned>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	4e0e      	ldr	r6, [pc, #56]	; (80098a0 <sbrk_aligned+0x3c>)
 8009868:	460c      	mov	r4, r1
 800986a:	6831      	ldr	r1, [r6, #0]
 800986c:	4605      	mov	r5, r0
 800986e:	b911      	cbnz	r1, 8009876 <sbrk_aligned+0x12>
 8009870:	f000 fa82 	bl	8009d78 <_sbrk_r>
 8009874:	6030      	str	r0, [r6, #0]
 8009876:	4621      	mov	r1, r4
 8009878:	4628      	mov	r0, r5
 800987a:	f000 fa7d 	bl	8009d78 <_sbrk_r>
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	d00a      	beq.n	8009898 <sbrk_aligned+0x34>
 8009882:	1cc4      	adds	r4, r0, #3
 8009884:	f024 0403 	bic.w	r4, r4, #3
 8009888:	42a0      	cmp	r0, r4
 800988a:	d007      	beq.n	800989c <sbrk_aligned+0x38>
 800988c:	1a21      	subs	r1, r4, r0
 800988e:	4628      	mov	r0, r5
 8009890:	f000 fa72 	bl	8009d78 <_sbrk_r>
 8009894:	3001      	adds	r0, #1
 8009896:	d101      	bne.n	800989c <sbrk_aligned+0x38>
 8009898:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800989c:	4620      	mov	r0, r4
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	200007c8 	.word	0x200007c8

080098a4 <_malloc_r>:
 80098a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	1ccd      	adds	r5, r1, #3
 80098aa:	f025 0503 	bic.w	r5, r5, #3
 80098ae:	3508      	adds	r5, #8
 80098b0:	2d0c      	cmp	r5, #12
 80098b2:	bf38      	it	cc
 80098b4:	250c      	movcc	r5, #12
 80098b6:	2d00      	cmp	r5, #0
 80098b8:	4607      	mov	r7, r0
 80098ba:	db01      	blt.n	80098c0 <_malloc_r+0x1c>
 80098bc:	42a9      	cmp	r1, r5
 80098be:	d905      	bls.n	80098cc <_malloc_r+0x28>
 80098c0:	230c      	movs	r3, #12
 80098c2:	2600      	movs	r6, #0
 80098c4:	603b      	str	r3, [r7, #0]
 80098c6:	4630      	mov	r0, r6
 80098c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80099a0 <_malloc_r+0xfc>
 80098d0:	f000 f9fc 	bl	8009ccc <__malloc_lock>
 80098d4:	f8d8 3000 	ldr.w	r3, [r8]
 80098d8:	461c      	mov	r4, r3
 80098da:	bb5c      	cbnz	r4, 8009934 <_malloc_r+0x90>
 80098dc:	4629      	mov	r1, r5
 80098de:	4638      	mov	r0, r7
 80098e0:	f7ff ffc0 	bl	8009864 <sbrk_aligned>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	4604      	mov	r4, r0
 80098e8:	d155      	bne.n	8009996 <_malloc_r+0xf2>
 80098ea:	f8d8 4000 	ldr.w	r4, [r8]
 80098ee:	4626      	mov	r6, r4
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	d145      	bne.n	8009980 <_malloc_r+0xdc>
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	d048      	beq.n	800998a <_malloc_r+0xe6>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	4631      	mov	r1, r6
 80098fc:	4638      	mov	r0, r7
 80098fe:	eb04 0903 	add.w	r9, r4, r3
 8009902:	f000 fa39 	bl	8009d78 <_sbrk_r>
 8009906:	4581      	cmp	r9, r0
 8009908:	d13f      	bne.n	800998a <_malloc_r+0xe6>
 800990a:	6821      	ldr	r1, [r4, #0]
 800990c:	4638      	mov	r0, r7
 800990e:	1a6d      	subs	r5, r5, r1
 8009910:	4629      	mov	r1, r5
 8009912:	f7ff ffa7 	bl	8009864 <sbrk_aligned>
 8009916:	3001      	adds	r0, #1
 8009918:	d037      	beq.n	800998a <_malloc_r+0xe6>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	442b      	add	r3, r5
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	f8d8 3000 	ldr.w	r3, [r8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d038      	beq.n	800999a <_malloc_r+0xf6>
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	42a2      	cmp	r2, r4
 800992c:	d12b      	bne.n	8009986 <_malloc_r+0xe2>
 800992e:	2200      	movs	r2, #0
 8009930:	605a      	str	r2, [r3, #4]
 8009932:	e00f      	b.n	8009954 <_malloc_r+0xb0>
 8009934:	6822      	ldr	r2, [r4, #0]
 8009936:	1b52      	subs	r2, r2, r5
 8009938:	d41f      	bmi.n	800997a <_malloc_r+0xd6>
 800993a:	2a0b      	cmp	r2, #11
 800993c:	d917      	bls.n	800996e <_malloc_r+0xca>
 800993e:	1961      	adds	r1, r4, r5
 8009940:	42a3      	cmp	r3, r4
 8009942:	6025      	str	r5, [r4, #0]
 8009944:	bf18      	it	ne
 8009946:	6059      	strne	r1, [r3, #4]
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	bf08      	it	eq
 800994c:	f8c8 1000 	streq.w	r1, [r8]
 8009950:	5162      	str	r2, [r4, r5]
 8009952:	604b      	str	r3, [r1, #4]
 8009954:	4638      	mov	r0, r7
 8009956:	f104 060b 	add.w	r6, r4, #11
 800995a:	f000 f9bd 	bl	8009cd8 <__malloc_unlock>
 800995e:	f026 0607 	bic.w	r6, r6, #7
 8009962:	1d23      	adds	r3, r4, #4
 8009964:	1af2      	subs	r2, r6, r3
 8009966:	d0ae      	beq.n	80098c6 <_malloc_r+0x22>
 8009968:	1b9b      	subs	r3, r3, r6
 800996a:	50a3      	str	r3, [r4, r2]
 800996c:	e7ab      	b.n	80098c6 <_malloc_r+0x22>
 800996e:	42a3      	cmp	r3, r4
 8009970:	6862      	ldr	r2, [r4, #4]
 8009972:	d1dd      	bne.n	8009930 <_malloc_r+0x8c>
 8009974:	f8c8 2000 	str.w	r2, [r8]
 8009978:	e7ec      	b.n	8009954 <_malloc_r+0xb0>
 800997a:	4623      	mov	r3, r4
 800997c:	6864      	ldr	r4, [r4, #4]
 800997e:	e7ac      	b.n	80098da <_malloc_r+0x36>
 8009980:	4634      	mov	r4, r6
 8009982:	6876      	ldr	r6, [r6, #4]
 8009984:	e7b4      	b.n	80098f0 <_malloc_r+0x4c>
 8009986:	4613      	mov	r3, r2
 8009988:	e7cc      	b.n	8009924 <_malloc_r+0x80>
 800998a:	230c      	movs	r3, #12
 800998c:	4638      	mov	r0, r7
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	f000 f9a2 	bl	8009cd8 <__malloc_unlock>
 8009994:	e797      	b.n	80098c6 <_malloc_r+0x22>
 8009996:	6025      	str	r5, [r4, #0]
 8009998:	e7dc      	b.n	8009954 <_malloc_r+0xb0>
 800999a:	605b      	str	r3, [r3, #4]
 800999c:	deff      	udf	#255	; 0xff
 800999e:	bf00      	nop
 80099a0:	200007c4 	.word	0x200007c4

080099a4 <_printf_common>:
 80099a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	4616      	mov	r6, r2
 80099aa:	4699      	mov	r9, r3
 80099ac:	688a      	ldr	r2, [r1, #8]
 80099ae:	690b      	ldr	r3, [r1, #16]
 80099b0:	4607      	mov	r7, r0
 80099b2:	4293      	cmp	r3, r2
 80099b4:	bfb8      	it	lt
 80099b6:	4613      	movlt	r3, r2
 80099b8:	6033      	str	r3, [r6, #0]
 80099ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099be:	460c      	mov	r4, r1
 80099c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099c4:	b10a      	cbz	r2, 80099ca <_printf_common+0x26>
 80099c6:	3301      	adds	r3, #1
 80099c8:	6033      	str	r3, [r6, #0]
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	0699      	lsls	r1, r3, #26
 80099ce:	bf42      	ittt	mi
 80099d0:	6833      	ldrmi	r3, [r6, #0]
 80099d2:	3302      	addmi	r3, #2
 80099d4:	6033      	strmi	r3, [r6, #0]
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	f015 0506 	ands.w	r5, r5, #6
 80099dc:	d106      	bne.n	80099ec <_printf_common+0x48>
 80099de:	f104 0a19 	add.w	sl, r4, #25
 80099e2:	68e3      	ldr	r3, [r4, #12]
 80099e4:	6832      	ldr	r2, [r6, #0]
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	dc2b      	bgt.n	8009a44 <_printf_common+0xa0>
 80099ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099f0:	1e13      	subs	r3, r2, #0
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	bf18      	it	ne
 80099f6:	2301      	movne	r3, #1
 80099f8:	0692      	lsls	r2, r2, #26
 80099fa:	d430      	bmi.n	8009a5e <_printf_common+0xba>
 80099fc:	4649      	mov	r1, r9
 80099fe:	4638      	mov	r0, r7
 8009a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a04:	47c0      	blx	r8
 8009a06:	3001      	adds	r0, #1
 8009a08:	d023      	beq.n	8009a52 <_printf_common+0xae>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	6922      	ldr	r2, [r4, #16]
 8009a0e:	f003 0306 	and.w	r3, r3, #6
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	bf14      	ite	ne
 8009a16:	2500      	movne	r5, #0
 8009a18:	6833      	ldreq	r3, [r6, #0]
 8009a1a:	f04f 0600 	mov.w	r6, #0
 8009a1e:	bf08      	it	eq
 8009a20:	68e5      	ldreq	r5, [r4, #12]
 8009a22:	f104 041a 	add.w	r4, r4, #26
 8009a26:	bf08      	it	eq
 8009a28:	1aed      	subeq	r5, r5, r3
 8009a2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a2e:	bf08      	it	eq
 8009a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a34:	4293      	cmp	r3, r2
 8009a36:	bfc4      	itt	gt
 8009a38:	1a9b      	subgt	r3, r3, r2
 8009a3a:	18ed      	addgt	r5, r5, r3
 8009a3c:	42b5      	cmp	r5, r6
 8009a3e:	d11a      	bne.n	8009a76 <_printf_common+0xd2>
 8009a40:	2000      	movs	r0, #0
 8009a42:	e008      	b.n	8009a56 <_printf_common+0xb2>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4652      	mov	r2, sl
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d103      	bne.n	8009a5a <_printf_common+0xb6>
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	3501      	adds	r5, #1
 8009a5c:	e7c1      	b.n	80099e2 <_printf_common+0x3e>
 8009a5e:	2030      	movs	r0, #48	; 0x30
 8009a60:	18e1      	adds	r1, r4, r3
 8009a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a6c:	4422      	add	r2, r4
 8009a6e:	3302      	adds	r3, #2
 8009a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a74:	e7c2      	b.n	80099fc <_printf_common+0x58>
 8009a76:	2301      	movs	r3, #1
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	47c0      	blx	r8
 8009a80:	3001      	adds	r0, #1
 8009a82:	d0e6      	beq.n	8009a52 <_printf_common+0xae>
 8009a84:	3601      	adds	r6, #1
 8009a86:	e7d9      	b.n	8009a3c <_printf_common+0x98>

08009a88 <_printf_i>:
 8009a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8c:	7e0f      	ldrb	r7, [r1, #24]
 8009a8e:	4691      	mov	r9, r2
 8009a90:	2f78      	cmp	r7, #120	; 0x78
 8009a92:	4680      	mov	r8, r0
 8009a94:	460c      	mov	r4, r1
 8009a96:	469a      	mov	sl, r3
 8009a98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a9e:	d807      	bhi.n	8009ab0 <_printf_i+0x28>
 8009aa0:	2f62      	cmp	r7, #98	; 0x62
 8009aa2:	d80a      	bhi.n	8009aba <_printf_i+0x32>
 8009aa4:	2f00      	cmp	r7, #0
 8009aa6:	f000 80d5 	beq.w	8009c54 <_printf_i+0x1cc>
 8009aaa:	2f58      	cmp	r7, #88	; 0x58
 8009aac:	f000 80c1 	beq.w	8009c32 <_printf_i+0x1aa>
 8009ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ab8:	e03a      	b.n	8009b30 <_printf_i+0xa8>
 8009aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009abe:	2b15      	cmp	r3, #21
 8009ac0:	d8f6      	bhi.n	8009ab0 <_printf_i+0x28>
 8009ac2:	a101      	add	r1, pc, #4	; (adr r1, 8009ac8 <_printf_i+0x40>)
 8009ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ac8:	08009b21 	.word	0x08009b21
 8009acc:	08009b35 	.word	0x08009b35
 8009ad0:	08009ab1 	.word	0x08009ab1
 8009ad4:	08009ab1 	.word	0x08009ab1
 8009ad8:	08009ab1 	.word	0x08009ab1
 8009adc:	08009ab1 	.word	0x08009ab1
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009ab1 	.word	0x08009ab1
 8009ae8:	08009ab1 	.word	0x08009ab1
 8009aec:	08009ab1 	.word	0x08009ab1
 8009af0:	08009ab1 	.word	0x08009ab1
 8009af4:	08009c3b 	.word	0x08009c3b
 8009af8:	08009b61 	.word	0x08009b61
 8009afc:	08009bf5 	.word	0x08009bf5
 8009b00:	08009ab1 	.word	0x08009ab1
 8009b04:	08009ab1 	.word	0x08009ab1
 8009b08:	08009c5d 	.word	0x08009c5d
 8009b0c:	08009ab1 	.word	0x08009ab1
 8009b10:	08009b61 	.word	0x08009b61
 8009b14:	08009ab1 	.word	0x08009ab1
 8009b18:	08009ab1 	.word	0x08009ab1
 8009b1c:	08009bfd 	.word	0x08009bfd
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	1d1a      	adds	r2, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	602a      	str	r2, [r5, #0]
 8009b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b30:	2301      	movs	r3, #1
 8009b32:	e0a0      	b.n	8009c76 <_printf_i+0x1ee>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	0607      	lsls	r7, r0, #24
 8009b3a:	f103 0104 	add.w	r1, r3, #4
 8009b3e:	6029      	str	r1, [r5, #0]
 8009b40:	d501      	bpl.n	8009b46 <_printf_i+0xbe>
 8009b42:	681e      	ldr	r6, [r3, #0]
 8009b44:	e003      	b.n	8009b4e <_printf_i+0xc6>
 8009b46:	0646      	lsls	r6, r0, #25
 8009b48:	d5fb      	bpl.n	8009b42 <_printf_i+0xba>
 8009b4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	da03      	bge.n	8009b5a <_printf_i+0xd2>
 8009b52:	232d      	movs	r3, #45	; 0x2d
 8009b54:	4276      	negs	r6, r6
 8009b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b5a:	230a      	movs	r3, #10
 8009b5c:	4859      	ldr	r0, [pc, #356]	; (8009cc4 <_printf_i+0x23c>)
 8009b5e:	e012      	b.n	8009b86 <_printf_i+0xfe>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	6820      	ldr	r0, [r4, #0]
 8009b64:	1d19      	adds	r1, r3, #4
 8009b66:	6029      	str	r1, [r5, #0]
 8009b68:	0605      	lsls	r5, r0, #24
 8009b6a:	d501      	bpl.n	8009b70 <_printf_i+0xe8>
 8009b6c:	681e      	ldr	r6, [r3, #0]
 8009b6e:	e002      	b.n	8009b76 <_printf_i+0xee>
 8009b70:	0641      	lsls	r1, r0, #25
 8009b72:	d5fb      	bpl.n	8009b6c <_printf_i+0xe4>
 8009b74:	881e      	ldrh	r6, [r3, #0]
 8009b76:	2f6f      	cmp	r7, #111	; 0x6f
 8009b78:	bf0c      	ite	eq
 8009b7a:	2308      	moveq	r3, #8
 8009b7c:	230a      	movne	r3, #10
 8009b7e:	4851      	ldr	r0, [pc, #324]	; (8009cc4 <_printf_i+0x23c>)
 8009b80:	2100      	movs	r1, #0
 8009b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b86:	6865      	ldr	r5, [r4, #4]
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	bfa8      	it	ge
 8009b8c:	6821      	ldrge	r1, [r4, #0]
 8009b8e:	60a5      	str	r5, [r4, #8]
 8009b90:	bfa4      	itt	ge
 8009b92:	f021 0104 	bicge.w	r1, r1, #4
 8009b96:	6021      	strge	r1, [r4, #0]
 8009b98:	b90e      	cbnz	r6, 8009b9e <_printf_i+0x116>
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	d04b      	beq.n	8009c36 <_printf_i+0x1ae>
 8009b9e:	4615      	mov	r5, r2
 8009ba0:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ba4:	fb03 6711 	mls	r7, r3, r1, r6
 8009ba8:	5dc7      	ldrb	r7, [r0, r7]
 8009baa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bae:	4637      	mov	r7, r6
 8009bb0:	42bb      	cmp	r3, r7
 8009bb2:	460e      	mov	r6, r1
 8009bb4:	d9f4      	bls.n	8009ba0 <_printf_i+0x118>
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	d10b      	bne.n	8009bd2 <_printf_i+0x14a>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	07de      	lsls	r6, r3, #31
 8009bbe:	d508      	bpl.n	8009bd2 <_printf_i+0x14a>
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	6861      	ldr	r1, [r4, #4]
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	bfde      	ittt	le
 8009bc8:	2330      	movle	r3, #48	; 0x30
 8009bca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009bd2:	1b52      	subs	r2, r2, r5
 8009bd4:	6122      	str	r2, [r4, #16]
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4640      	mov	r0, r8
 8009bdc:	f8cd a000 	str.w	sl, [sp]
 8009be0:	aa03      	add	r2, sp, #12
 8009be2:	f7ff fedf 	bl	80099a4 <_printf_common>
 8009be6:	3001      	adds	r0, #1
 8009be8:	d14a      	bne.n	8009c80 <_printf_i+0x1f8>
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bee:	b004      	add	sp, #16
 8009bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	f043 0320 	orr.w	r3, r3, #32
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	2778      	movs	r7, #120	; 0x78
 8009bfe:	4832      	ldr	r0, [pc, #200]	; (8009cc8 <_printf_i+0x240>)
 8009c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	6829      	ldr	r1, [r5, #0]
 8009c08:	061f      	lsls	r7, r3, #24
 8009c0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c0e:	d402      	bmi.n	8009c16 <_printf_i+0x18e>
 8009c10:	065f      	lsls	r7, r3, #25
 8009c12:	bf48      	it	mi
 8009c14:	b2b6      	uxthmi	r6, r6
 8009c16:	07df      	lsls	r7, r3, #31
 8009c18:	bf48      	it	mi
 8009c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c1e:	6029      	str	r1, [r5, #0]
 8009c20:	bf48      	it	mi
 8009c22:	6023      	strmi	r3, [r4, #0]
 8009c24:	b91e      	cbnz	r6, 8009c2e <_printf_i+0x1a6>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	f023 0320 	bic.w	r3, r3, #32
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	2310      	movs	r3, #16
 8009c30:	e7a6      	b.n	8009b80 <_printf_i+0xf8>
 8009c32:	4824      	ldr	r0, [pc, #144]	; (8009cc4 <_printf_i+0x23c>)
 8009c34:	e7e4      	b.n	8009c00 <_printf_i+0x178>
 8009c36:	4615      	mov	r5, r2
 8009c38:	e7bd      	b.n	8009bb6 <_printf_i+0x12e>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	6826      	ldr	r6, [r4, #0]
 8009c3e:	1d18      	adds	r0, r3, #4
 8009c40:	6961      	ldr	r1, [r4, #20]
 8009c42:	6028      	str	r0, [r5, #0]
 8009c44:	0635      	lsls	r5, r6, #24
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	d501      	bpl.n	8009c4e <_printf_i+0x1c6>
 8009c4a:	6019      	str	r1, [r3, #0]
 8009c4c:	e002      	b.n	8009c54 <_printf_i+0x1cc>
 8009c4e:	0670      	lsls	r0, r6, #25
 8009c50:	d5fb      	bpl.n	8009c4a <_printf_i+0x1c2>
 8009c52:	8019      	strh	r1, [r3, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	4615      	mov	r5, r2
 8009c58:	6123      	str	r3, [r4, #16]
 8009c5a:	e7bc      	b.n	8009bd6 <_printf_i+0x14e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	2100      	movs	r1, #0
 8009c60:	1d1a      	adds	r2, r3, #4
 8009c62:	602a      	str	r2, [r5, #0]
 8009c64:	681d      	ldr	r5, [r3, #0]
 8009c66:	6862      	ldr	r2, [r4, #4]
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f895 	bl	8009d98 <memchr>
 8009c6e:	b108      	cbz	r0, 8009c74 <_printf_i+0x1ec>
 8009c70:	1b40      	subs	r0, r0, r5
 8009c72:	6060      	str	r0, [r4, #4]
 8009c74:	6863      	ldr	r3, [r4, #4]
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c7e:	e7aa      	b.n	8009bd6 <_printf_i+0x14e>
 8009c80:	462a      	mov	r2, r5
 8009c82:	4649      	mov	r1, r9
 8009c84:	4640      	mov	r0, r8
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	47d0      	blx	sl
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d0ad      	beq.n	8009bea <_printf_i+0x162>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	079b      	lsls	r3, r3, #30
 8009c92:	d413      	bmi.n	8009cbc <_printf_i+0x234>
 8009c94:	68e0      	ldr	r0, [r4, #12]
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	bfb8      	it	lt
 8009c9c:	4618      	movlt	r0, r3
 8009c9e:	e7a6      	b.n	8009bee <_printf_i+0x166>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	47d0      	blx	sl
 8009caa:	3001      	adds	r0, #1
 8009cac:	d09d      	beq.n	8009bea <_printf_i+0x162>
 8009cae:	3501      	adds	r5, #1
 8009cb0:	68e3      	ldr	r3, [r4, #12]
 8009cb2:	9903      	ldr	r1, [sp, #12]
 8009cb4:	1a5b      	subs	r3, r3, r1
 8009cb6:	42ab      	cmp	r3, r5
 8009cb8:	dcf2      	bgt.n	8009ca0 <_printf_i+0x218>
 8009cba:	e7eb      	b.n	8009c94 <_printf_i+0x20c>
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	f104 0619 	add.w	r6, r4, #25
 8009cc2:	e7f5      	b.n	8009cb0 <_printf_i+0x228>
 8009cc4:	08009ee3 	.word	0x08009ee3
 8009cc8:	08009ef4 	.word	0x08009ef4

08009ccc <__malloc_lock>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	; (8009cd4 <__malloc_lock+0x8>)
 8009cce:	f7ff bc59 	b.w	8009584 <__retarget_lock_acquire_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	200007c0 	.word	0x200007c0

08009cd8 <__malloc_unlock>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	; (8009ce0 <__malloc_unlock+0x8>)
 8009cda:	f7ff bc54 	b.w	8009586 <__retarget_lock_release_recursive>
 8009cde:	bf00      	nop
 8009ce0:	200007c0 	.word	0x200007c0

08009ce4 <_realloc_r>:
 8009ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4614      	mov	r4, r2
 8009cec:	460e      	mov	r6, r1
 8009cee:	b921      	cbnz	r1, 8009cfa <_realloc_r+0x16>
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf6:	f7ff bdd5 	b.w	80098a4 <_malloc_r>
 8009cfa:	b92a      	cbnz	r2, 8009d08 <_realloc_r+0x24>
 8009cfc:	f000 f85a 	bl	8009db4 <_free_r>
 8009d00:	4625      	mov	r5, r4
 8009d02:	4628      	mov	r0, r5
 8009d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d08:	f000 f89c 	bl	8009e44 <_malloc_usable_size_r>
 8009d0c:	4284      	cmp	r4, r0
 8009d0e:	4607      	mov	r7, r0
 8009d10:	d802      	bhi.n	8009d18 <_realloc_r+0x34>
 8009d12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d16:	d812      	bhi.n	8009d3e <_realloc_r+0x5a>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	f7ff fdc2 	bl	80098a4 <_malloc_r>
 8009d20:	4605      	mov	r5, r0
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d0ed      	beq.n	8009d02 <_realloc_r+0x1e>
 8009d26:	42bc      	cmp	r4, r7
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	bf28      	it	cs
 8009d2e:	463a      	movcs	r2, r7
 8009d30:	f7ff fc2a 	bl	8009588 <memcpy>
 8009d34:	4631      	mov	r1, r6
 8009d36:	4640      	mov	r0, r8
 8009d38:	f000 f83c 	bl	8009db4 <_free_r>
 8009d3c:	e7e1      	b.n	8009d02 <_realloc_r+0x1e>
 8009d3e:	4635      	mov	r5, r6
 8009d40:	e7df      	b.n	8009d02 <_realloc_r+0x1e>

08009d42 <memmove>:
 8009d42:	4288      	cmp	r0, r1
 8009d44:	b510      	push	{r4, lr}
 8009d46:	eb01 0402 	add.w	r4, r1, r2
 8009d4a:	d902      	bls.n	8009d52 <memmove+0x10>
 8009d4c:	4284      	cmp	r4, r0
 8009d4e:	4623      	mov	r3, r4
 8009d50:	d807      	bhi.n	8009d62 <memmove+0x20>
 8009d52:	1e43      	subs	r3, r0, #1
 8009d54:	42a1      	cmp	r1, r4
 8009d56:	d008      	beq.n	8009d6a <memmove+0x28>
 8009d58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d60:	e7f8      	b.n	8009d54 <memmove+0x12>
 8009d62:	4601      	mov	r1, r0
 8009d64:	4402      	add	r2, r0
 8009d66:	428a      	cmp	r2, r1
 8009d68:	d100      	bne.n	8009d6c <memmove+0x2a>
 8009d6a:	bd10      	pop	{r4, pc}
 8009d6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d74:	e7f7      	b.n	8009d66 <memmove+0x24>
	...

08009d78 <_sbrk_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	4d05      	ldr	r5, [pc, #20]	; (8009d94 <_sbrk_r+0x1c>)
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4608      	mov	r0, r1
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	f7f7 f938 	bl	8000ff8 <_sbrk>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d102      	bne.n	8009d92 <_sbrk_r+0x1a>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	b103      	cbz	r3, 8009d92 <_sbrk_r+0x1a>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	200007cc 	.word	0x200007cc

08009d98 <memchr>:
 8009d98:	4603      	mov	r3, r0
 8009d9a:	b510      	push	{r4, lr}
 8009d9c:	b2c9      	uxtb	r1, r1
 8009d9e:	4402      	add	r2, r0
 8009da0:	4293      	cmp	r3, r2
 8009da2:	4618      	mov	r0, r3
 8009da4:	d101      	bne.n	8009daa <memchr+0x12>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e003      	b.n	8009db2 <memchr+0x1a>
 8009daa:	7804      	ldrb	r4, [r0, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	428c      	cmp	r4, r1
 8009db0:	d1f6      	bne.n	8009da0 <memchr+0x8>
 8009db2:	bd10      	pop	{r4, pc}

08009db4 <_free_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4605      	mov	r5, r0
 8009db8:	2900      	cmp	r1, #0
 8009dba:	d040      	beq.n	8009e3e <_free_r+0x8a>
 8009dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc0:	1f0c      	subs	r4, r1, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bfb8      	it	lt
 8009dc6:	18e4      	addlt	r4, r4, r3
 8009dc8:	f7ff ff80 	bl	8009ccc <__malloc_lock>
 8009dcc:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <_free_r+0x8c>)
 8009dce:	6813      	ldr	r3, [r2, #0]
 8009dd0:	b933      	cbnz	r3, 8009de0 <_free_r+0x2c>
 8009dd2:	6063      	str	r3, [r4, #4]
 8009dd4:	6014      	str	r4, [r2, #0]
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ddc:	f7ff bf7c 	b.w	8009cd8 <__malloc_unlock>
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	d908      	bls.n	8009df6 <_free_r+0x42>
 8009de4:	6820      	ldr	r0, [r4, #0]
 8009de6:	1821      	adds	r1, r4, r0
 8009de8:	428b      	cmp	r3, r1
 8009dea:	bf01      	itttt	eq
 8009dec:	6819      	ldreq	r1, [r3, #0]
 8009dee:	685b      	ldreq	r3, [r3, #4]
 8009df0:	1809      	addeq	r1, r1, r0
 8009df2:	6021      	streq	r1, [r4, #0]
 8009df4:	e7ed      	b.n	8009dd2 <_free_r+0x1e>
 8009df6:	461a      	mov	r2, r3
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	b10b      	cbz	r3, 8009e00 <_free_r+0x4c>
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	d9fa      	bls.n	8009df6 <_free_r+0x42>
 8009e00:	6811      	ldr	r1, [r2, #0]
 8009e02:	1850      	adds	r0, r2, r1
 8009e04:	42a0      	cmp	r0, r4
 8009e06:	d10b      	bne.n	8009e20 <_free_r+0x6c>
 8009e08:	6820      	ldr	r0, [r4, #0]
 8009e0a:	4401      	add	r1, r0
 8009e0c:	1850      	adds	r0, r2, r1
 8009e0e:	4283      	cmp	r3, r0
 8009e10:	6011      	str	r1, [r2, #0]
 8009e12:	d1e0      	bne.n	8009dd6 <_free_r+0x22>
 8009e14:	6818      	ldr	r0, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	4408      	add	r0, r1
 8009e1a:	6010      	str	r0, [r2, #0]
 8009e1c:	6053      	str	r3, [r2, #4]
 8009e1e:	e7da      	b.n	8009dd6 <_free_r+0x22>
 8009e20:	d902      	bls.n	8009e28 <_free_r+0x74>
 8009e22:	230c      	movs	r3, #12
 8009e24:	602b      	str	r3, [r5, #0]
 8009e26:	e7d6      	b.n	8009dd6 <_free_r+0x22>
 8009e28:	6820      	ldr	r0, [r4, #0]
 8009e2a:	1821      	adds	r1, r4, r0
 8009e2c:	428b      	cmp	r3, r1
 8009e2e:	bf01      	itttt	eq
 8009e30:	6819      	ldreq	r1, [r3, #0]
 8009e32:	685b      	ldreq	r3, [r3, #4]
 8009e34:	1809      	addeq	r1, r1, r0
 8009e36:	6021      	streq	r1, [r4, #0]
 8009e38:	6063      	str	r3, [r4, #4]
 8009e3a:	6054      	str	r4, [r2, #4]
 8009e3c:	e7cb      	b.n	8009dd6 <_free_r+0x22>
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	200007c4 	.word	0x200007c4

08009e44 <_malloc_usable_size_r>:
 8009e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e48:	1f18      	subs	r0, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	bfbc      	itt	lt
 8009e4e:	580b      	ldrlt	r3, [r1, r0]
 8009e50:	18c0      	addlt	r0, r0, r3
 8009e52:	4770      	bx	lr

08009e54 <_init>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr

08009e60 <_fini>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr
