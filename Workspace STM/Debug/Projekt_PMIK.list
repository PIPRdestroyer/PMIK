
Projekt_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f04  08009f04  0002031c  2**0
                  CONTENTS
  4 .ARM          00000000  08009f04  08009f04  0002031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f04  08009f04  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  08009f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000031c  0800a228  0002031c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  0800a228  000207d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020345  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019969  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d2  00000000  00000000  00039cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e60  00000000  00000000  0003faf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b472  00000000  00000000  00059956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000944ab  00000000  00000000  00074dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000619c  00000000  00000000  00109274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0010f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000031c 	.word	0x2000031c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009e54 	.word	0x08009e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000320 	.word	0x20000320
 8000148:	08009e54 	.word	0x08009e54

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037c:	4b52      	ldr	r3, [pc, #328]	; (80004c8 <MX_GPIO_Init+0x160>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a51      	ldr	r2, [pc, #324]	; (80004c8 <MX_GPIO_Init+0x160>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b4f      	ldr	r3, [pc, #316]	; (80004c8 <MX_GPIO_Init+0x160>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0310 	and.w	r3, r3, #16
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b4c      	ldr	r3, [pc, #304]	; (80004c8 <MX_GPIO_Init+0x160>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a4b      	ldr	r2, [pc, #300]	; (80004c8 <MX_GPIO_Init+0x160>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a45      	ldr	r2, [pc, #276]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <MX_GPIO_Init+0x160>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f248 0120 	movw	r1, #32800	; 0x8020
 80003e2:	483a      	ldr	r0, [pc, #232]	; (80004cc <MX_GPIO_Init+0x164>)
 80003e4:	f000 ffa6 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	4838      	ldr	r0, [pc, #224]	; (80004d0 <MX_GPIO_Init+0x168>)
 80003ee:	f000 ffa1 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2180      	movs	r1, #128	; 0x80
 80003f6:	4837      	ldr	r0, [pc, #220]	; (80004d4 <MX_GPIO_Init+0x16c>)
 80003f8:	f000 ff9c 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <MX_GPIO_Init+0x170>)
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4830      	ldr	r0, [pc, #192]	; (80004d4 <MX_GPIO_Init+0x16c>)
 8000412:	f000 fe0b 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT_Pin;
 8000416:	f248 0320 	movw	r3, #32800	; 0x8020
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4827      	ldr	r0, [pc, #156]	; (80004cc <MX_GPIO_Init+0x164>)
 8000430:	f000 fdfc 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000434:	2301      	movs	r3, #1
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4821      	ldr	r0, [pc, #132]	; (80004d0 <MX_GPIO_Init+0x168>)
 800044c:	f000 fdee 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000450:	2302      	movs	r3, #2
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <MX_GPIO_Init+0x174>)
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000458:	2301      	movs	r3, #1
 800045a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	481b      	ldr	r0, [pc, #108]	; (80004d0 <MX_GPIO_Init+0x168>)
 8000464:	f000 fde2 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_Pin;
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4815      	ldr	r0, [pc, #84]	; (80004d4 <MX_GPIO_Init+0x16c>)
 8000480:	f000 fdd4 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_GPIO_Init+0x174>)
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_GPIO_Init+0x164>)
 800049a:	f000 fdc7 	bl	800102c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	2007      	movs	r0, #7
 80004a4:	f000 fccb 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004a8:	2007      	movs	r0, #7
 80004aa:	f000 fce4 	bl	8000e76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2100      	movs	r1, #0
 80004b2:	2028      	movs	r0, #40	; 0x28
 80004b4:	f000 fcc3 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004b8:	2028      	movs	r0, #40	; 0x28
 80004ba:	f000 fcdc 	bl	8000e76 <HAL_NVIC_EnableIRQ>

}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40011000 	.word	0x40011000
 80004d8:	10110000 	.word	0x10110000
 80004dc:	10210000 	.word	0x10210000

080004e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_I2C1_Init+0x50>)
 80004e6:	4a13      	ldr	r2, [pc, #76]	; (8000534 <MX_I2C1_Init+0x54>)
 80004e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_I2C1_Init+0x50>)
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_I2C1_Init+0x58>)
 80004ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_I2C1_Init+0x50>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_I2C1_Init+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_I2C1_Init+0x50>)
 80004fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000502:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MX_I2C1_Init+0x50>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_I2C1_Init+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MX_I2C1_Init+0x50>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_I2C1_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_I2C1_Init+0x50>)
 800051e:	f000 ff53 	bl	80013c8 <HAL_I2C_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000528:	f000 f903 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000338 	.word	0x20000338
 8000534:	40005400 	.word	0x40005400
 8000538:	000186a0 	.word	0x000186a0

0800053c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C2_Init+0x50>)
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <MX_I2C2_Init+0x54>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_I2C2_Init+0x50>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_I2C2_Init+0x58>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_I2C2_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C2_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_I2C2_Init+0x50>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C2_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_I2C2_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_I2C2_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C2_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_I2C2_Init+0x50>)
 800057a:	f000 ff25 	bl	80013c8 <HAL_I2C_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000584:	f000 f8d5 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000038c 	.word	0x2000038c
 8000590:	40005800 	.word	0x40005800
 8000594:	000186a0 	.word	0x000186a0

08000598 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <HAL_I2C_MspInit+0xc8>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d124      	bne.n	8000602 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a29      	ldr	r2, [pc, #164]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005d0:	23c0      	movs	r3, #192	; 0xc0
 80005d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d4:	2312      	movs	r3, #18
 80005d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	4619      	mov	r1, r3
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <HAL_I2C_MspInit+0xd0>)
 80005e4:	f000 fd22 	bl	800102c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000600:	e029      	b.n	8000656 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <HAL_I2C_MspInit+0xd4>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d124      	bne.n	8000656 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062a:	2312      	movs	r3, #18
 800062c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_I2C_MspInit+0xd0>)
 800063a:	f000 fcf7 	bl	800102c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_I2C_MspInit+0xcc>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40005400 	.word	0x40005400
 8000664:	40021000 	.word	0x40021000
 8000668:	40010c00 	.word	0x40010c00
 800066c:	40005800 	.word	0x40005800

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fa62 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f81a 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff fe74 	bl	8000368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f9c6 	bl	8000a10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000684:	f7ff ff2c 	bl	80004e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000688:	f7ff ff58 	bl	800053c <MX_I2C2_Init>
  MX_TIM1_Init();
 800068c:	f000 f930 	bl	80008f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  peripherialsInit();
 8000690:	f008 fc1c 	bl	8008ecc <peripherialsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Compute(mode,status);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <main+0x38>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <main+0x3c>)
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f008 fc44 	bl	8008f2c <Compute>
 80006a4:	e7f6      	b.n	8000694 <main+0x24>
 80006a6:	bf00      	nop
 80006a8:	200004bd 	.word	0x200004bd
 80006ac:	200004bc 	.word	0x200004bc

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b090      	sub	sp, #64	; 0x40
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2228      	movs	r2, #40	; 0x28
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f008 ff2e 	bl	8009520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2310      	movs	r3, #16
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006e2:	2300      	movs	r3, #0
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f82d 	bl	8002750 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006fc:	f000 f819 	bl	8000732 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fa9a 	bl	8002c54 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000726:	f000 f804 	bl	8000732 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3740      	adds	r7, #64	; 0x40
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
}
 8000738:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073a:	e7fe      	b.n	800073a <Error_Handler+0x8>

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_MspInit+0x5c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x5c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_MspInit+0x60>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_MspInit+0x60>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000
 800079c:	40010000 	.word	0x40010000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f9ef 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}

080007ee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 80007f2:	2002      	movs	r0, #2
 80007f4:	f000 fdd0 	bl	8001398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM1_BRK_IRQHandler+0x10>)
 8000802:	f002 fc57 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200003e4 	.word	0x200003e4

08000810 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <TIM1_UP_IRQHandler+0x10>)
 8000816:	f002 fc4d 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200003e4 	.word	0x200003e4

08000824 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <TIM1_TRG_COM_IRQHandler+0x10>)
 800082a:	f002 fc43 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200003e4 	.word	0x200003e4

08000838 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM1_CC_IRQHandler+0x10>)
 800083e:	f002 fc39 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200003e4 	.word	0x200003e4

0800084c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <USART2_IRQHandler+0x10>)
 8000852:	f003 f835 	bl	80038c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000042c 	.word	0x2000042c

08000860 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000864:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000868:	f000 fd96 	bl	8001398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800086c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000870:	f000 fd92 	bl	8001398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f008 fe42 	bl	8009530 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20005000 	.word	0x20005000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200003e0 	.word	0x200003e0
 80008e0:	200007d0 	.word	0x200007d0

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_TIM1_Init+0x9c>)
 800090e:	4a20      	ldr	r2, [pc, #128]	; (8000990 <MX_TIM1_Init+0xa0>)
 8000910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_TIM1_Init+0x9c>)
 8000914:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_TIM1_Init+0x9c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_TIM1_Init+0x9c>)
 8000922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_TIM1_Init+0x9c>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_TIM1_Init+0x9c>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_TIM1_Init+0x9c>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_TIM1_Init+0x9c>)
 800093c:	f002 fb18 	bl	8002f70 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000946:	f7ff fef4 	bl	8000732 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4619      	mov	r1, r3
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_TIM1_Init+0x9c>)
 8000958:	f002 fcb4 	bl	80032c4 <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000962:	f7ff fee6 	bl	8000732 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_TIM1_Init+0x9c>)
 8000974:	f002 fe8a 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800097e:	f7ff fed8 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200003e4 	.word	0x200003e4
 8000990:	40012c00 	.word	0x40012c00

08000994 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_TIM_Base_MspInit+0x74>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12b      	bne.n	80009fe <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_TIM_Base_MspInit+0x78>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <HAL_TIM_Base_MspInit+0x78>)
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_TIM_Base_MspInit+0x78>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2018      	movs	r0, #24
 80009c4:	f000 fa3b 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80009c8:	2018      	movs	r0, #24
 80009ca:	f000 fa54 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2019      	movs	r0, #25
 80009d4:	f000 fa33 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009d8:	2019      	movs	r0, #25
 80009da:	f000 fa4c 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	201a      	movs	r0, #26
 80009e4:	f000 fa2b 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80009e8:	201a      	movs	r0, #26
 80009ea:	f000 fa44 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	201b      	movs	r0, #27
 80009f4:	f000 fa23 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009f8:	201b      	movs	r0, #27
 80009fa:	f000 fa3c 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART2_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a48:	f002 fe90 	bl	800376c <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f7ff fe6e 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000042c 	.word	0x2000042c
 8000a60:	40004400 	.word	0x40004400

08000a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d12b      	bne.n	8000adc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8e:	61d3      	str	r3, [r2, #28]
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000ac8:	f000 fab0 	bl	800102c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2026      	movs	r0, #38	; 0x26
 8000ad2:	f000 f9b4 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad6:	2026      	movs	r0, #38	; 0x26
 8000ad8:	f000 f9cd 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff fef8 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af6:	490c      	ldr	r1, [pc, #48]	; (8000b28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b0c:	4c09      	ldr	r4, [pc, #36]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f008 fd0f 	bl	800953c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fda7 	bl	8000670 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8000b2c:	08009f0c 	.word	0x08009f0c
  ldr r2, =_sbss
 8000b30:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8000b34:	200007d0 	.word	0x200007d0

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f96b 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fdf0 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f991 	bl	8000eae <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f94b 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000474 	.word	0x20000474

08000bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000474 	.word	0x20000474

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4906      	ldr	r1, [pc, #24]	; (8000ce0 <__NVIC_EnableIRQ+0x34>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db12      	blt.n	8000d1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	490a      	ldr	r1, [pc, #40]	; (8000d28 <__NVIC_DisableIRQ+0x44>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	3320      	adds	r3, #32
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d10:	f3bf 8f4f 	dsb	sy
}
 8000d14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d16:	f3bf 8f6f 	isb	sy
}
 8000d1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff90 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff09 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff1e 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff90 	bl	8000d80 <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5f 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff11 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff1f 	bl	8000ce4 <__NVIC_DisableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff94 	bl	8000de4 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d008      	beq.n	8000ef0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e020      	b.n	8000f32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 020e 	bic.w	r2, r2, #14
 8000efe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d005      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2204      	movs	r2, #4
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e051      	b.n	8001004 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 020e 	bic.w	r2, r2, #14
 8000f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_DMA_Abort_IT+0xd4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d029      	beq.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <HAL_DMA_Abort_IT+0xd8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d022      	beq.n	8000fda <HAL_DMA_Abort_IT+0x9e>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <HAL_DMA_Abort_IT+0xdc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01a      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0x98>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_DMA_Abort_IT+0xe0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d012      	beq.n	8000fce <HAL_DMA_Abort_IT+0x92>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <HAL_DMA_Abort_IT+0xe4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00a      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x8c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_DMA_Abort_IT+0xe8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d102      	bne.n	8000fc2 <HAL_DMA_Abort_IT+0x86>
 8000fbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fc0:	e00e      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xa4>
 8000fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc6:	e00b      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xa4>
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	e008      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xa4>
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	e005      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xa4>
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	e002      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xa4>
 8000fda:	2310      	movs	r3, #16
 8000fdc:	e000      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xa4>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_DMA_Abort_IT+0xec>)
 8000fe2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	4798      	blx	r3
    } 
  }
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020008 	.word	0x40020008
 8001014:	4002001c 	.word	0x4002001c
 8001018:	40020030 	.word	0x40020030
 800101c:	40020044 	.word	0x40020044
 8001020:	40020058 	.word	0x40020058
 8001024:	4002006c 	.word	0x4002006c
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b08b      	sub	sp, #44	; 0x2c
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e169      	b.n	8001314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001040:	2201      	movs	r2, #1
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8158 	bne.w	800130e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a9a      	ldr	r2, [pc, #616]	; (80012cc <HAL_GPIO_Init+0x2a0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d05e      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001068:	4a98      	ldr	r2, [pc, #608]	; (80012cc <HAL_GPIO_Init+0x2a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d875      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800106e:	4a98      	ldr	r2, [pc, #608]	; (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d058      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001074:	4a96      	ldr	r2, [pc, #600]	; (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d86f      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800107a:	4a96      	ldr	r2, [pc, #600]	; (80012d4 <HAL_GPIO_Init+0x2a8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d052      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001080:	4a94      	ldr	r2, [pc, #592]	; (80012d4 <HAL_GPIO_Init+0x2a8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d869      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001086:	4a94      	ldr	r2, [pc, #592]	; (80012d8 <HAL_GPIO_Init+0x2ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d04c      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 800108c:	4a92      	ldr	r2, [pc, #584]	; (80012d8 <HAL_GPIO_Init+0x2ac>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d863      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001092:	4a92      	ldr	r2, [pc, #584]	; (80012dc <HAL_GPIO_Init+0x2b0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d046      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001098:	4a90      	ldr	r2, [pc, #576]	; (80012dc <HAL_GPIO_Init+0x2b0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d85d      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d82a      	bhi.n	80010f8 <HAL_GPIO_Init+0xcc>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d859      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <HAL_GPIO_Init+0x80>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001101 	.word	0x08001101
 80010b4:	08001113 	.word	0x08001113
 80010b8:	08001155 	.word	0x08001155
 80010bc:	0800115b 	.word	0x0800115b
 80010c0:	0800115b 	.word	0x0800115b
 80010c4:	0800115b 	.word	0x0800115b
 80010c8:	0800115b 	.word	0x0800115b
 80010cc:	0800115b 	.word	0x0800115b
 80010d0:	0800115b 	.word	0x0800115b
 80010d4:	0800115b 	.word	0x0800115b
 80010d8:	0800115b 	.word	0x0800115b
 80010dc:	0800115b 	.word	0x0800115b
 80010e0:	0800115b 	.word	0x0800115b
 80010e4:	0800115b 	.word	0x0800115b
 80010e8:	0800115b 	.word	0x0800115b
 80010ec:	0800115b 	.word	0x0800115b
 80010f0:	08001109 	.word	0x08001109
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	4a79      	ldr	r2, [pc, #484]	; (80012e0 <HAL_GPIO_Init+0x2b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fe:	e02c      	b.n	800115a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e029      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	3304      	adds	r3, #4
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e024      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3308      	adds	r3, #8
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e01f      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	330c      	adds	r3, #12
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e01a      	b.n	800115c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112e:	2304      	movs	r3, #4
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e013      	b.n	800115c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	611a      	str	r2, [r3, #16]
          break;
 8001146:	e009      	b.n	800115c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	615a      	str	r2, [r3, #20]
          break;
 8001152:	e003      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x130>
          break;
 800115a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2bff      	cmp	r3, #255	; 0xff
 8001160:	d801      	bhi.n	8001166 <HAL_GPIO_Init+0x13a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	e001      	b.n	800116a <HAL_GPIO_Init+0x13e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3304      	adds	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2bff      	cmp	r3, #255	; 0xff
 8001170:	d802      	bhi.n	8001178 <HAL_GPIO_Init+0x14c>
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x152>
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	3b08      	subs	r3, #8
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	210f      	movs	r1, #15
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	6a39      	ldr	r1, [r7, #32]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80b1 	beq.w	800130e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c4:	4a48      	ldr	r2, [pc, #288]	; (80012e8 <HAL_GPIO_Init+0x2bc>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <HAL_GPIO_Init+0x2c0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x1ec>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a3f      	ldr	r2, [pc, #252]	; (80012f0 <HAL_GPIO_Init+0x2c4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1e8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3e      	ldr	r2, [pc, #248]	; (80012f4 <HAL_GPIO_Init+0x2c8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1e4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3d      	ldr	r2, [pc, #244]	; (80012f8 <HAL_GPIO_Init+0x2cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1e0>
 8001208:	2303      	movs	r3, #3
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 800120c:	2304      	movs	r3, #4
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001218:	2300      	movs	r3, #0
 800121a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800122a:	492f      	ldr	r1, [pc, #188]	; (80012e8 <HAL_GPIO_Init+0x2bc>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	492c      	ldr	r1, [pc, #176]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4928      	ldr	r1, [pc, #160]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4922      	ldr	r1, [pc, #136]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	60cb      	str	r3, [r1, #12]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	491e      	ldr	r1, [pc, #120]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4918      	ldr	r1, [pc, #96]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4914      	ldr	r1, [pc, #80]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e021      	b.n	800130e <HAL_GPIO_Init+0x2e2>
 80012ca:	bf00      	nop
 80012cc:	10320000 	.word	0x10320000
 80012d0:	10310000 	.word	0x10310000
 80012d4:	10220000 	.word	0x10220000
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40011400 	.word	0x40011400
 80012fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_GPIO_Init+0x304>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4909      	ldr	r1, [pc, #36]	; (8001330 <HAL_GPIO_Init+0x304>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f ae8e 	bne.w	8001040 <HAL_GPIO_Init+0x14>
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	372c      	adds	r7, #44	; 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	611a      	str	r2, [r3, #16]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43d9      	mvns	r1, r3
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	400b      	ands	r3, r1
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
	...

08001398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fe60 	bl	800907c <HAL_GPIO_EXTI_Callback>
  }
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40010400 	.word	0x40010400

080013c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e12b      	b.n	8001632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff f8d2 	bl	8000598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	; 0x24
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800141a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800142a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800142c:	f001 fd5a 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a81      	ldr	r2, [pc, #516]	; (800163c <HAL_I2C_Init+0x274>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d807      	bhi.n	800144c <HAL_I2C_Init+0x84>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a80      	ldr	r2, [pc, #512]	; (8001640 <HAL_I2C_Init+0x278>)
 8001440:	4293      	cmp	r3, r2
 8001442:	bf94      	ite	ls
 8001444:	2301      	movls	r3, #1
 8001446:	2300      	movhi	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e006      	b.n	800145a <HAL_I2C_Init+0x92>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a7d      	ldr	r2, [pc, #500]	; (8001644 <HAL_I2C_Init+0x27c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0e7      	b.n	8001632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a78      	ldr	r2, [pc, #480]	; (8001648 <HAL_I2C_Init+0x280>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	430a      	orrs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a6a      	ldr	r2, [pc, #424]	; (800163c <HAL_I2C_Init+0x274>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d802      	bhi.n	800149c <HAL_I2C_Init+0xd4>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3301      	adds	r3, #1
 800149a:	e009      	b.n	80014b0 <HAL_I2C_Init+0xe8>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_I2C_Init+0x284>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	3301      	adds	r3, #1
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	495c      	ldr	r1, [pc, #368]	; (800163c <HAL_I2C_Init+0x274>)
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d819      	bhi.n	8001504 <HAL_I2C_Init+0x13c>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e59      	subs	r1, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fbb1 f3f3 	udiv	r3, r1, r3
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <HAL_I2C_Init+0x138>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e59      	subs	r1, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	e051      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001500:	2304      	movs	r3, #4
 8001502:	e04f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_I2C_Init+0x168>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e012      	b.n	8001556 <HAL_I2C_Init+0x18e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	0099      	lsls	r1, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Init+0x196>
 800155a:	2301      	movs	r3, #1
 800155c:	e022      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10e      	bne.n	8001584 <HAL_I2C_Init+0x1bc>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1e58      	subs	r0, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	440b      	add	r3, r1
 8001574:	fbb0 f3f3 	udiv	r3, r0, r3
 8001578:	3301      	adds	r3, #1
 800157a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	e00f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	0099      	lsls	r1, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	fbb0 f3f3 	udiv	r3, r0, r3
 800159a:	3301      	adds	r3, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6809      	ldr	r1, [r1, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6911      	ldr	r1, [r2, #16]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68d2      	ldr	r2, [r2, #12]
 80015de:	4311      	orrs	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	000186a0 	.word	0x000186a0
 8001640:	001e847f 	.word	0x001e847f
 8001644:	003d08ff 	.word	0x003d08ff
 8001648:	431bde83 	.word	0x431bde83
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	817b      	strh	r3, [r7, #10]
 8001660:	4613      	mov	r3, r2
 8001662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff fac2 	bl	8000bec <HAL_GetTick>
 8001668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b20      	cmp	r3, #32
 8001674:	f040 80e0 	bne.w	8001838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2319      	movs	r3, #25
 800167e:	2201      	movs	r2, #1
 8001680:	4970      	ldr	r1, [pc, #448]	; (8001844 <HAL_I2C_Master_Transmit+0x1f4>)
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fe2e 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
 8001690:	e0d3      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x50>
 800169c:	2302      	movs	r3, #2
 800169e:	e0cc      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d007      	beq.n	80016c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2221      	movs	r2, #33	; 0x21
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2210      	movs	r2, #16
 80016e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_I2C_Master_Transmit+0x1f8>)
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001708:	8979      	ldrh	r1, [r7, #10]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	6a3a      	ldr	r2, [r7, #32]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fc02 	bl	8001f18 <I2C_MasterRequestWrite>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e08d      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001734:	e066      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 feec 	bl	8002518 <I2C_WaitOnTXEFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00d      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b04      	cmp	r3, #4
 800174c:	d107      	bne.n	800175e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06b      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b04      	cmp	r3, #4
 800179e:	d11b      	bne.n	80017d8 <HAL_I2C_Master_Transmit+0x188>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	6a39      	ldr	r1, [r7, #32]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fee3 	bl	80025a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e01a      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d194      	bne.n	8001736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	00100002 	.word	0x00100002
 8001848:	ffff0000 	.word	0xffff0000

0800184c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	461a      	mov	r2, r3
 8001858:	460b      	mov	r3, r1
 800185a:	817b      	strh	r3, [r7, #10]
 800185c:	4613      	mov	r3, r2
 800185e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff f9c2 	bl	8000bec <HAL_GetTick>
 8001868:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	f040 824b 	bne.w	8001d0e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2319      	movs	r3, #25
 800187e:	2201      	movs	r2, #1
 8001880:	497f      	ldr	r1, [pc, #508]	; (8001a80 <HAL_I2C_Master_Receive+0x234>)
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fd2e 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800188e:	2302      	movs	r3, #2
 8001890:	e23e      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_I2C_Master_Receive+0x54>
 800189c:	2302      	movs	r3, #2
 800189e:	e237      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d007      	beq.n	80018c6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2222      	movs	r2, #34	; 0x22
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2210      	movs	r2, #16
 80018e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	893a      	ldrh	r2, [r7, #8]
 80018f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4a5f      	ldr	r2, [pc, #380]	; (8001a84 <HAL_I2C_Master_Receive+0x238>)
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001908:	8979      	ldrh	r1, [r7, #10]
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fb84 	bl	800201c <I2C_MasterRequestRead>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1f8      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	d113      	bne.n	800194e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e1cc      	b.n	8001ce8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001952:	2b01      	cmp	r3, #1
 8001954:	d11e      	bne.n	8001994 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001964:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001966:	b672      	cpsid	i
}
 8001968:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001990:	b662      	cpsie	i
}
 8001992:	e035      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	2b02      	cmp	r3, #2
 800199a:	d11e      	bne.n	80019da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019d6:	b662      	cpsie	i
}
 80019d8:	e012      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a00:	e172      	b.n	8001ce8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	f200 811f 	bhi.w	8001c4a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d123      	bne.n	8001a5c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fe0d 	bl	8002638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e173      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a5a:	e145      	b.n	8001ce8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d152      	bne.n	8001b0a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4906      	ldr	r1, [pc, #24]	; (8001a88 <HAL_I2C_Master_Receive+0x23c>)
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fc38 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e148      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
 8001a7e:	bf00      	nop
 8001a80:	00100002 	.word	0x00100002
 8001a84:	ffff0000 	.word	0xffff0000
 8001a88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad2:	b662      	cpsie	i
}
 8001ad4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b08:	e0ee      	b.n	8001ce8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b10:	2200      	movs	r2, #0
 8001b12:	4981      	ldr	r1, [pc, #516]	; (8001d18 <HAL_I2C_Master_Receive+0x4cc>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fbe5 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0f5      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b6a:	4b6c      	ldr	r3, [pc, #432]	; (8001d1c <HAL_I2C_Master_Receive+0x4d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	4a6b      	ldr	r2, [pc, #428]	; (8001d20 <HAL_I2C_Master_Receive+0x4d4>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a1a      	lsrs	r2, r3, #8
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00da      	lsls	r2, r3, #3
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d118      	bne.n	8001bc2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f043 0220 	orr.w	r2, r3, #32
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb2:	b662      	cpsie	i
}
 8001bb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0a6      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d1d9      	bne.n	8001b84 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c12:	b662      	cpsie	i
}
 8001c14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c48:	e04e      	b.n	8001ce8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fcf2 	bl	8002638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e058      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d124      	bne.n	8001ce8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d107      	bne.n	8001cb6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f ae88 	bne.w	8001a02 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	00010004 	.word	0x00010004
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	14f8b589 	.word	0x14f8b589

08001d24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	817b      	strh	r3, [r7, #10]
 8001d36:	460b      	mov	r3, r1
 8001d38:	813b      	strh	r3, [r7, #8]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d3e:	f7fe ff55 	bl	8000bec <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	f040 80d9 	bne.w	8001f04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2319      	movs	r3, #25
 8001d58:	2201      	movs	r2, #1
 8001d5a:	496d      	ldr	r1, [pc, #436]	; (8001f10 <HAL_I2C_Mem_Write+0x1ec>)
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 fac1 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0cc      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_I2C_Mem_Write+0x56>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0c5      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d007      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2221      	movs	r2, #33	; 0x21
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	; (8001f14 <HAL_I2C_Mem_Write+0x1f0>)
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001de2:	88f8      	ldrh	r0, [r7, #6]
 8001de4:	893a      	ldrh	r2, [r7, #8]
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4603      	mov	r3, r0
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f9e0 	bl	80021b8 <I2C_RequestMemoryWrite>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d052      	beq.n	8001ea4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e081      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fb86 	bl	8002518 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_I2C_Mem_Write+0x180>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d017      	beq.n	8001ea4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1aa      	bne.n	8001e02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fb79 	bl	80025a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e016      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	00100002 	.word	0x00100002
 8001f14:	ffff0000 	.word	0xffff0000

08001f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	460b      	mov	r3, r1
 8001f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d006      	beq.n	8001f42 <I2C_MasterRequestWrite+0x2a>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d003      	beq.n	8001f42 <I2C_MasterRequestWrite+0x2a>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f40:	d108      	bne.n	8001f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e00b      	b.n	8001f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d107      	bne.n	8001f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f9b3 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f92:	d103      	bne.n	8001f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e035      	b.n	800200c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fa8:	d108      	bne.n	8001fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	e01b      	b.n	8001ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fbc:	897b      	ldrh	r3, [r7, #10]
 8001fbe:	11db      	asrs	r3, r3, #7
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 0306 	and.w	r3, r3, #6
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f063 030f 	orn	r3, r3, #15
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <I2C_MasterRequestWrite+0xfc>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f9fc 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e010      	b.n	800200c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fea:	897b      	ldrh	r3, [r7, #10]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <I2C_MasterRequestWrite+0x100>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f9ec 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	00010008 	.word	0x00010008
 8002018:	00010002 	.word	0x00010002

0800201c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002040:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d006      	beq.n	8002056 <I2C_MasterRequestRead+0x3a>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d003      	beq.n	8002056 <I2C_MasterRequestRead+0x3a>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002054:	d108      	bne.n	8002068 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00b      	b.n	8002080 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	2b11      	cmp	r3, #17
 800206e:	d107      	bne.n	8002080 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800207e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f929 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a6:	d103      	bne.n	80020b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e079      	b.n	80021a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020bc:	d108      	bne.n	80020d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	e05f      	b.n	8002190 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020d0:	897b      	ldrh	r3, [r7, #10]
 80020d2:	11db      	asrs	r3, r3, #7
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 0306 	and.w	r3, r3, #6
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f063 030f 	orn	r3, r3, #15
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4930      	ldr	r1, [pc, #192]	; (80021b0 <I2C_MasterRequestRead+0x194>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f972 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e054      	b.n	80021a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020fe:	897b      	ldrh	r3, [r7, #10]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4929      	ldr	r1, [pc, #164]	; (80021b4 <I2C_MasterRequestRead+0x198>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f962 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e044      	b.n	80021a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f8c7 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216a:	d103      	bne.n	8002174 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e017      	b.n	80021a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	11db      	asrs	r3, r3, #7
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 0306 	and.w	r3, r3, #6
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f063 030e 	orn	r3, r3, #14
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <I2C_MasterRequestRead+0x198>)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f91e 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	00010008 	.word	0x00010008
 80021b4:	00010002 	.word	0x00010002

080021b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	460b      	mov	r3, r1
 80021cc:	813b      	strh	r3, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f878 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002208:	d103      	bne.n	8002212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e05f      	b.n	80022d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	6a3a      	ldr	r2, [r7, #32]
 800222a:	492d      	ldr	r1, [pc, #180]	; (80022e0 <I2C_RequestMemoryWrite+0x128>)
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f8d3 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e04c      	b.n	80022d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	6a39      	ldr	r1, [r7, #32]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f95e 	bl	8002518 <I2C_WaitOnTXEFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b04      	cmp	r3, #4
 8002268:	d107      	bne.n	800227a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e02b      	b.n	80022d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002284:	893b      	ldrh	r3, [r7, #8]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	e021      	b.n	80022d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002290:	893b      	ldrh	r3, [r7, #8]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b29b      	uxth	r3, r3
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	6a39      	ldr	r1, [r7, #32]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f938 	bl	8002518 <I2C_WaitOnTXEFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d107      	bne.n	80022c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e005      	b.n	80022d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	00010002 	.word	0x00010002

080022e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f4:	e048      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d044      	beq.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7fe fc75 	bl	8000bec <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d139      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d10d      	bne.n	800233a <I2C_WaitOnFlagUntilTimeout+0x56>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	43da      	mvns	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	e00c      	b.n	8002354 <I2C_WaitOnFlagUntilTimeout+0x70>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	429a      	cmp	r2, r3
 8002358:	d116      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e023      	b.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10d      	bne.n	80023ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	43da      	mvns	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	e00c      	b.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d093      	beq.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e6:	e071      	b.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f6:	d123      	bne.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e067      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d041      	beq.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002448:	f7fe fbd0 	bl	8000bec <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d302      	bcc.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d136      	bne.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10c      	bne.n	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4013      	ands	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	e00b      	b.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e021      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10c      	bne.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e00b      	b.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4013      	ands	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f47f af6d 	bne.w	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002524:	e034      	b.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f8e3 	bl	80026f2 <I2C_IsAcknowledgeFailed>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e034      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d028      	beq.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7fe fb55 	bl	8000bec <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11d      	bne.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b80      	cmp	r3, #128	; 0x80
 8002560:	d016      	beq.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b80      	cmp	r3, #128	; 0x80
 800259c:	d1c3      	bne.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b4:	e034      	b.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f89b 	bl	80026f2 <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d028      	beq.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7fe fb0d 	bl	8000bec <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11d      	bne.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d016      	beq.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d1c3      	bne.n	80025b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002644:	e049      	b.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d119      	bne.n	8002688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0210 	mvn.w	r2, #16
 800265c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e030      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002688:	f7fe fab0 	bl	8000bec <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11d      	bne.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d016      	beq.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d1ae      	bne.n	8002646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	d11b      	bne.n	8002742 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002712:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
	...

08002750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e272      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8087 	beq.w	800287e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b04      	cmp	r3, #4
 800277a:	d00c      	beq.n	8002796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d112      	bne.n	80027ae <HAL_RCC_OscConfig+0x5e>
 8002788:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d10b      	bne.n	80027ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d06c      	beq.n	800287c <HAL_RCC_OscConfig+0x12c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d168      	bne.n	800287c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e24c      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x76>
 80027b8:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e02e      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x98>
 80027ce:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b78      	ldr	r3, [pc, #480]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a77      	ldr	r2, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0xbc>
 80027f2:	4b72      	ldr	r3, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a71      	ldr	r2, [pc, #452]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe f9de 	bl	8000bec <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe f9da 	bl	8000bec <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e200      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0xe4>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f9ca 	bl	8000bec <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe f9c6 	bl	8000bec <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1ec      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x10c>
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d063      	beq.n	8002952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800288a:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002896:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x18c>
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1c0      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4939      	ldr	r1, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e03a      	b.n	8002952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe f97f 	bl	8000bec <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe f97b 	bl	8000bec <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1a1      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4927      	ldr	r1, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe f95e 	bl	8000bec <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe f95a 	bl	8000bec <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e180      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03a      	beq.n	80029d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d019      	beq.n	800299a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x274>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe f93e 	bl	8000bec <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe f93a 	bl	8000bec <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e160      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002992:	2001      	movs	r0, #1
 8002994:	f000 face 	bl	8002f34 <RCC_Delay>
 8002998:	e01c      	b.n	80029d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_RCC_OscConfig+0x274>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe f924 	bl	8000bec <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	e00f      	b.n	80029c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe f920 	bl	8000bec <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d908      	bls.n	80029c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e146      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	42420000 	.word	0x42420000
 80029c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e9      	bne.n	80029a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a6 	beq.w	8002b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a87      	ldr	r2, [pc, #540]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7e      	ldr	r2, [pc, #504]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7fe f8e1 	bl	8000bec <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe f8dd 	bl	8000bec <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e103      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x312>
 8002a54:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e02d      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x334>
 8002a6a:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	6213      	str	r3, [r2, #32]
 8002a82:	e01c      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x356>
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4a60      	ldr	r2, [pc, #384]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a57      	ldr	r2, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d015      	beq.n	8002af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f891 	bl	8000bec <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f88d 	bl	8000bec <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0b1      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	4b4b      	ldr	r3, [pc, #300]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ee      	beq.n	8002ace <HAL_RCC_OscConfig+0x37e>
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe f87b 	bl	8000bec <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe f877 	bl	8000bec <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e09b      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ee      	bne.n	8002afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d061      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d146      	bne.n	8002bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_RCC_OscConfig+0x4cc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe f84b 	bl	8000bec <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe f847 	bl	8000bec <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e06d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4921      	ldr	r1, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a19      	ldr	r1, [r3, #32]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe f81b 	bl	8000bec <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe f817 	bl	8000bec <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e03d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x46a>
 8002bd8:	e035      	b.n	8002c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f804 	bl	8000bec <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe f800 	bl	8000bec <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e026      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x498>
 8002c06:	e01e      	b.n	8002c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e019      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_OscConfig+0x500>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0d0      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4965      	ldr	r1, [pc, #404]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d040      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d115      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e073      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06b      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4936      	ldr	r1, [pc, #216]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fd ff52 	bl	8000bec <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7fd ff4e 	bl	8000bec <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e053      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d210      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	4922      	ldr	r1, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1cc>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1d0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd feb0 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08009e94 	.word	0x08009e94
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x30>
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x36>
 8002e56:	e027      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5a:	613b      	str	r3, [r7, #16]
      break;
 8002e5c:	e027      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0c9b      	lsrs	r3, r3, #18
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d010      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0c5b      	lsrs	r3, r3, #17
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8a:	fb03 f202 	mul.w	r2, r3, r2
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e004      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eaa:	613b      	str	r3, [r7, #16]
      break;
 8002eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eae:	693b      	ldr	r3, [r7, #16]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	007a1200 	.word	0x007a1200
 8002ec4:	08009eac 	.word	0x08009eac
 8002ec8:	08009ebc 	.word	0x08009ebc
 8002ecc:	003d0900 	.word	0x003d0900

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee8:	f7ff fff2 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08009ea4 	.word	0x08009ea4

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0adb      	lsrs	r3, r3, #11
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08009ea4 	.word	0x08009ea4

08002f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <RCC_Delay+0x34>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <RCC_Delay+0x38>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0a5b      	lsrs	r3, r3, #9
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f50:	bf00      	nop
  }
  while (Delay --);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	60fa      	str	r2, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <RCC_Delay+0x1c>
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	10624dd3 	.word	0x10624dd3

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fcfc 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fa74 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e03a      	b.n	800309e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x58>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d009      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x58>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a14      	ldr	r2, [pc, #80]	; (80030ac <HAL_TIM_Base_Start_IT+0x9c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x58>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d010      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	e007      	b.n	800309c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800

080030b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0202 	mvn.w	r2, #2
 80030e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9b4 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9a7 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9b6 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0204 	mvn.w	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f98a 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f97d 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f98c 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b08      	cmp	r3, #8
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b08      	cmp	r3, #8
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0208 	mvn.w	r2, #8
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2204      	movs	r2, #4
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f960 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f953 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f962 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d122      	bne.n	800320c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d11b      	bne.n	800320c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0210 	mvn.w	r2, #16
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2208      	movs	r2, #8
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f936 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f929 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f938 	bl	8003476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0201 	mvn.w	r2, #1
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f005 ff52 	bl	80090dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa7b 	bl	800375a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d10e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8fc 	bl	8003488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d10e      	bne.n	80032bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0220 	mvn.w	r2, #32
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa46 	bl	8003748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIM_ConfigClockSource+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0b4      	b.n	800344a <HAL_TIM_ConfigClockSource+0x186>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d03e      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0xd4>
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331e:	f200 8087 	bhi.w	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	f000 8086 	beq.w	8003436 <HAL_TIM_ConfigClockSource+0x172>
 800332a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332e:	d87f      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d01a      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xa6>
 8003334:	2b70      	cmp	r3, #112	; 0x70
 8003336:	d87b      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d050      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x11a>
 800333c:	2b60      	cmp	r3, #96	; 0x60
 800333e:	d877      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d03c      	beq.n	80033be <HAL_TIM_ConfigClockSource+0xfa>
 8003344:	2b50      	cmp	r3, #80	; 0x50
 8003346:	d873      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d058      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x13a>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d86f      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d064      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d86b      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d060      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d867      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05c      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 8003364:	2b10      	cmp	r3, #16
 8003366:	d05a      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 8003368:	e062      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800337a:	f000 f968 	bl	800364e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800338c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	609a      	str	r2, [r3, #8]
      break;
 8003396:	e04f      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	f000 f951 	bl	800364e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ba:	609a      	str	r2, [r3, #8]
      break;
 80033bc:	e03c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 f8c8 	bl	8003560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2150      	movs	r1, #80	; 0x50
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f91f 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 80033dc:	e02c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 f8e6 	bl	80035bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2160      	movs	r1, #96	; 0x60
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f90f 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 80033fc:	e01c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340a:	461a      	mov	r2, r3
 800340c:	f000 f8a8 	bl	8003560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f8ff 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 800341c:	e00c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f000 f8f6 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 800342e:	e003      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e000      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
	...

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a29      	ldr	r2, [pc, #164]	; (8003554 <TIM_Base_SetConfig+0xb8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00b      	beq.n	80034cc <TIM_Base_SetConfig+0x30>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d007      	beq.n	80034cc <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a26      	ldr	r2, [pc, #152]	; (8003558 <TIM_Base_SetConfig+0xbc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <TIM_Base_SetConfig+0xc0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d108      	bne.n	80034de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <TIM_Base_SetConfig+0xb8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_Base_SetConfig+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d007      	beq.n	80034fe <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <TIM_Base_SetConfig+0xbc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <TIM_Base_SetConfig+0xc0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <TIM_Base_SetConfig+0xb8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800

08003560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 030a 	bic.w	r3, r3, #10
 800359c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0210 	bic.w	r2, r3, #16
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	031b      	lsls	r3, r3, #12
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	621a      	str	r2, [r3, #32]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	f043 0307 	orr.w	r3, r3, #7
 800363c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800364e:	b480      	push	{r7}
 8003650:	b087      	sub	sp, #28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	431a      	orrs	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	609a      	str	r2, [r3, #8]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e046      	b.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a16      	ldr	r2, [pc, #88]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d009      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10c      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800

08003748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e042      	b.n	8003804 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f966 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fd09 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	d121      	bne.n	800386a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_UART_Transmit_IT+0x26>
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e01a      	b.n	800386c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2221      	movs	r2, #33	; 0x21
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003864:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	d112      	bne.n	80038b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UART_Receive_IT+0x26>
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e00b      	b.n	80038b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fab6 	bl	8003e1e <UART_Start_Receive_IT>
 80038b2:	4603      	mov	r3, r0
 80038b4:	e000      	b.n	80038b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ba      	sub	sp, #232	; 0xe8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_UART_IRQHandler+0x66>
 8003912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fb93 	bl	800404a <UART_Receive_IT>
      return;
 8003924:	e25b      	b.n	8003dde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80de 	beq.w	8003aec <HAL_UART_IRQHandler+0x22c>
 8003930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80d1 	beq.w	8003aec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_UART_IRQHandler+0xae>
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_UART_IRQHandler+0xd2>
 800397a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f043 0202 	orr.w	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_UART_IRQHandler+0xf6>
 800399e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f043 0204 	orr.w	r2, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d011      	beq.n	80039e6 <HAL_UART_IRQHandler+0x126>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0208 	orr.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 81f2 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_UART_IRQHandler+0x14e>
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fb1e 	bl	800404a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_UART_IRQHandler+0x17a>
 8003a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04f      	beq.n	8003ada <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa28 	bl	8003e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d041      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3314      	adds	r3, #20
 8003a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1d9      	bne.n	8003a4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d013      	beq.n	8003aca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	4a7e      	ldr	r2, [pc, #504]	; (8003ca0 <HAL_UART_IRQHandler+0x3e0>)
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fa44 	bl	8000f3c <HAL_DMA_Abort_IT>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	e00e      	b.n	8003ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f993 	bl	8003df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	e00a      	b.n	8003ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f98f 	bl	8003df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e006      	b.n	8003ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f98b 	bl	8003df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ae6:	e175      	b.n	8003dd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	bf00      	nop
    return;
 8003aea:	e173      	b.n	8003dd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	f040 814f 	bne.w	8003d94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8148 	beq.w	8003d94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8141 	beq.w	8003d94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80b6 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8145 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b56:	429a      	cmp	r2, r3
 8003b58:	f080 813e 	bcs.w	8003dd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	f000 8088 	beq.w	8003c80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1d9      	bne.n	8003b70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3314      	adds	r3, #20
 8003bc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003be0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003be4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003be8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e1      	bne.n	8003bbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e3      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	f023 0310 	bic.w	r3, r3, #16
 8003c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c62:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e3      	bne.n	8003c3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd f923 	bl	8000ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8b6 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c9c:	e09c      	b.n	8003dd8 <HAL_UART_IRQHandler+0x518>
 8003c9e:	bf00      	nop
 8003ca0:	08003f55 	.word	0x08003f55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 808e 	beq.w	8003ddc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8089 	beq.w	8003ddc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cee:	647a      	str	r2, [r7, #68]	; 0x44
 8003cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e3      	bne.n	8003cca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	623b      	str	r3, [r7, #32]
   return(result);
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d26:	633a      	str	r2, [r7, #48]	; 0x30
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e3      	bne.n	8003d02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d6c:	61fa      	str	r2, [r7, #28]
 8003d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	69b9      	ldr	r1, [r7, #24]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	617b      	str	r3, [r7, #20]
   return(result);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e3      	bne.n	8003d48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f83b 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d92:	e023      	b.n	8003ddc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <HAL_UART_IRQHandler+0x4f4>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f8e5 	bl	8003f7c <UART_Transmit_IT>
    return;
 8003db2:	e014      	b.n	8003dde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <HAL_UART_IRQHandler+0x51e>
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f924 	bl	800401a <UART_EndTransmit_IT>
    return;
 8003dd2:	e004      	b.n	8003dde <HAL_UART_IRQHandler+0x51e>
    return;
 8003dd4:	bf00      	nop
 8003dd6:	e002      	b.n	8003dde <HAL_UART_IRQHandler+0x51e>
      return;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_UART_IRQHandler+0x51e>
      return;
 8003ddc:	bf00      	nop
  }
}
 8003dde:	37e8      	adds	r7, #232	; 0xe8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b095      	sub	sp, #84	; 0x54
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb8:	643a      	str	r2, [r7, #64]	; 0x40
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d119      	bne.n	8003f3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f023 0310 	bic.w	r3, r3, #16
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f28:	61ba      	str	r2, [r7, #24]
 8003f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	613b      	str	r3, [r7, #16]
   return(result);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f4a:	bf00      	nop
 8003f4c:	3754      	adds	r7, #84	; 0x54
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff41 	bl	8003df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b21      	cmp	r3, #33	; 0x21
 8003f8e:	d13e      	bne.n	800400e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d114      	bne.n	8003fc4 <UART_Transmit_IT+0x48>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d110      	bne.n	8003fc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	1c9a      	adds	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	e008      	b.n	8003fd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	1c59      	adds	r1, r3, #1
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6211      	str	r1, [r2, #32]
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004008:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004030:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fed2 	bl	8003de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08c      	sub	sp, #48	; 0x30
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b22      	cmp	r3, #34	; 0x22
 800405c:	f040 80ae 	bne.w	80041bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d117      	bne.n	800409a <UART_Receive_IT+0x50>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d113      	bne.n	800409a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004088:	b29a      	uxth	r2, r3
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
 8004098:	e026      	b.n	80040e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d007      	beq.n	80040be <UART_Receive_IT+0x74>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <UART_Receive_IT+0x82>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e008      	b.n	80040de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d15d      	bne.n	80041b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0220 	bic.w	r2, r2, #32
 800410a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	2b01      	cmp	r3, #1
 8004140:	d135      	bne.n	80041ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	613b      	str	r3, [r7, #16]
   return(result);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	623a      	str	r2, [r7, #32]
 800416a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69f9      	ldr	r1, [r7, #28]
 800416e:	6a3a      	ldr	r2, [r7, #32]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	61bb      	str	r3, [r7, #24]
   return(result);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d10a      	bne.n	80041a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fe2e 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
 80041ac:	e002      	b.n	80041b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f004 ffae 	bl	8009110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e002      	b.n	80041be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3730      	adds	r7, #48	; 0x30
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <UART_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fe fe6c 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fe54 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <UART_SetConfig+0x118>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013800 	.word	0x40013800
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 fc92 	bl	8005c1e <VL53L0X_get_offset_calibration_data_micro_meter>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80042fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800430c:	b5b0      	push	{r4, r5, r7, lr}
 800430e:	b096      	sub	sp, #88	; 0x58
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800431a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004322:	2200      	movs	r2, #0
 8004324:	2188      	movs	r1, #136	; 0x88
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f004 fbea 	bl	8008b00 <VL53L0X_WrByte>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004340:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800434a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a9e      	ldr	r2, [pc, #632]	; (80045cc <VL53L0X_DataInit+0x2c0>)
 8004352:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a9d      	ldr	r2, [pc, #628]	; (80045d0 <VL53L0X_DataInit+0x2c4>)
 800435a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fac1 	bl	80048f2 <VL53L0X_GetDeviceParameters>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004376:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800437a:	2b00      	cmp	r3, #0
 800437c:	d112      	bne.n	80043a4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800437e:	2300      	movs	r3, #0
 8004380:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004382:	2300      	movs	r3, #0
 8004384:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 0410 	add.w	r4, r3, #16
 800438c:	f107 0510 	add.w	r5, r7, #16
 8004390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2264      	movs	r2, #100	; 0x64
 80043a8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f44f 7261 	mov.w	r2, #900	; 0x384
 80043b2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043bc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80043c6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80043d2:	2201      	movs	r2, #1
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f004 fb92 	bl	8008b00 <VL53L0X_WrByte>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80043ea:	2201      	movs	r2, #1
 80043ec:	21ff      	movs	r1, #255	; 0xff
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f004 fb86 	bl	8008b00 <VL53L0X_WrByte>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f004 fb7a 	bl	8008b00 <VL53L0X_WrByte>
 800440c:	4603      	mov	r3, r0
 800440e:	461a      	mov	r2, r3
 8004410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004414:	4313      	orrs	r3, r2
 8004416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800441a:	f107 030f 	add.w	r3, r7, #15
 800441e:	461a      	mov	r2, r3
 8004420:	2191      	movs	r1, #145	; 0x91
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f004 fbee 	bl	8008c04 <VL53L0X_RdByte>
 8004428:	4603      	mov	r3, r0
 800442a:	461a      	mov	r2, r3
 800442c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004430:	4313      	orrs	r3, r2
 8004432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800443e:	2201      	movs	r2, #1
 8004440:	2100      	movs	r1, #0
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f004 fb5c 	bl	8008b00 <VL53L0X_WrByte>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004450:	4313      	orrs	r3, r2
 8004452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004456:	2200      	movs	r2, #0
 8004458:	21ff      	movs	r1, #255	; 0xff
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f004 fb50 	bl	8008b00 <VL53L0X_WrByte>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004468:	4313      	orrs	r3, r2
 800446a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800446e:	2200      	movs	r2, #0
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f004 fb44 	bl	8008b00 <VL53L0X_WrByte>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004480:	4313      	orrs	r3, r2
 8004482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004486:	2300      	movs	r3, #0
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 800448a:	e014      	b.n	80044b6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800448c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004490:	2b00      	cmp	r3, #0
 8004492:	d114      	bne.n	80044be <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004496:	b29b      	uxth	r3, r3
 8004498:	2201      	movs	r2, #1
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fd19 	bl	8004ed4 <VL53L0X_SetLimitCheckEnable>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80044b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b2:	3301      	adds	r3, #1
 80044b4:	653b      	str	r3, [r7, #80]	; 0x50
 80044b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	dde7      	ble.n	800448c <VL53L0X_DataInit+0x180>
 80044bc:	e000      	b.n	80044c0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80044be:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80044c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80044c8:	2200      	movs	r2, #0
 80044ca:	2102      	movs	r1, #2
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fd01 	bl	8004ed4 <VL53L0X_SetLimitCheckEnable>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80044d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80044e0:	2200      	movs	r2, #0
 80044e2:	2103      	movs	r1, #3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fcf5 	bl	8004ed4 <VL53L0X_SetLimitCheckEnable>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80044f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80044f8:	2200      	movs	r2, #0
 80044fa:	2104      	movs	r1, #4
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fce9 	bl	8004ed4 <VL53L0X_SetLimitCheckEnable>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004508:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004510:	2200      	movs	r2, #0
 8004512:	2105      	movs	r1, #5
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fcdd 	bl	8004ed4 <VL53L0X_SetLimitCheckEnable>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004520:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004528:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fd7e 	bl	8005030 <VL53L0X_SetLimitCheckValue>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800453a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004546:	2101      	movs	r1, #1
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fd71 	bl	8005030 <VL53L0X_SetLimitCheckValue>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004554:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800455c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004560:	2102      	movs	r1, #2
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fd64 	bl	8005030 <VL53L0X_SetLimitCheckValue>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800456e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004576:	2200      	movs	r2, #0
 8004578:	2103      	movs	r1, #3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fd58 	bl	8005030 <VL53L0X_SetLimitCheckValue>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004586:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004596:	22ff      	movs	r2, #255	; 0xff
 8004598:	2101      	movs	r1, #1
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f004 fab0 	bl	8008b00 <VL53L0X_WrByte>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80045ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80045be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3758      	adds	r7, #88	; 0x58
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bdb0      	pop	{r4, r5, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	00016b85 	.word	0x00016b85
 80045d0:	000970a4 	.word	0x000970a4

080045d4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b09e      	sub	sp, #120	; 0x78
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80045e2:	f107 031c 	add.w	r3, r7, #28
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f004 ff98 	bl	8009520 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004610:	2101      	movs	r1, #1
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f002 fa43 	bl	8006a9e <VL53L0X_get_info_from_device>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004624:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800462c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004634:	2b01      	cmp	r3, #1
 8004636:	d80d      	bhi.n	8004654 <VL53L0X_StaticInit+0x80>
 8004638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800463c:	2b01      	cmp	r3, #1
 800463e:	d102      	bne.n	8004646 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004642:	2b20      	cmp	r3, #32
 8004644:	d806      	bhi.n	8004654 <VL53L0X_StaticInit+0x80>
 8004646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10e      	bne.n	800466c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800464e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d90b      	bls.n	800466c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004654:	f107 0218 	add.w	r2, r7, #24
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 fcd7 	bl	8006012 <VL53L0X_perform_ref_spad_management>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800466a:	e009      	b.n	8004680 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800466c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004670:	461a      	mov	r2, r3
 8004672:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fed8 	bl	800642a <VL53L0X_set_reference_spads>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004680:	4b94      	ldr	r3, [pc, #592]	; (80048d4 <VL53L0X_StaticInit+0x300>)
 8004682:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004684:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004696:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80046a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a6:	e001      	b.n	80046ac <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80046a8:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <VL53L0X_StaticInit+0x300>)
 80046aa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80046ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80046b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f003 fb0c 	bl	8007cd4 <VL53L0X_load_tuning_settings>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80046c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80046ca:	2300      	movs	r3, #0
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2304      	movs	r3, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	2100      	movs	r1, #0
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f001 f8d3 	bl	8005880 <VL53L0X_SetGpioConfig>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d121      	bne.n	800472c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80046e8:	2201      	movs	r2, #1
 80046ea:	21ff      	movs	r1, #255	; 0xff
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f004 fa07 	bl	8008b00 <VL53L0X_WrByte>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80046f8:	f107 031a 	add.w	r3, r7, #26
 80046fc:	461a      	mov	r2, r3
 80046fe:	2184      	movs	r1, #132	; 0x84
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f004 faa9 	bl	8008c58 <VL53L0X_RdWord>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800470e:	4313      	orrs	r3, r2
 8004710:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004714:	2200      	movs	r2, #0
 8004716:	21ff      	movs	r1, #255	; 0xff
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f004 f9f1 	bl	8008b00 <VL53L0X_WrByte>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004726:	4313      	orrs	r3, r2
 8004728:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800472c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004734:	8b7b      	ldrh	r3, [r7, #26]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004740:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004748:	f107 031c 	add.w	r3, r7, #28
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8cf 	bl	80048f2 <VL53L0X_GetDeviceParameters>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800475a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800475e:	2b00      	cmp	r3, #0
 8004760:	d110      	bne.n	8004784 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004762:	f107 0319 	add.w	r3, r7, #25
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f991 	bl	8004a90 <VL53L0X_GetFractionEnable>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004774:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800477c:	7e7a      	ldrb	r2, [r7, #25]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004784:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10e      	bne.n	80047aa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f103 0410 	add.w	r4, r3, #16
 8004792:	f107 051c 	add.w	r5, r7, #28
 8004796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80047a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80047aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d111      	bne.n	80047d6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80047b2:	f107 0319 	add.w	r3, r7, #25
 80047b6:	461a      	mov	r2, r3
 80047b8:	2101      	movs	r1, #1
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f004 fa22 	bl	8008c04 <VL53L0X_RdByte>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80047c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80047ce:	7e7a      	ldrb	r2, [r7, #25]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80047d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d107      	bne.n	80047ee <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9b0 	bl	8004b48 <VL53L0X_SetSequenceStepEnable>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80047ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80047f6:	2200      	movs	r2, #0
 80047f8:	2102      	movs	r1, #2
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9a4 	bl	8004b48 <VL53L0X_SetSequenceStepEnable>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004806:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2203      	movs	r2, #3
 8004812:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004816:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800481e:	f107 0313 	add.w	r3, r7, #19
 8004822:	461a      	mov	r2, r3
 8004824:	2100      	movs	r1, #0
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f977 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004832:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800483a:	7cfa      	ldrb	r2, [r7, #19]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004842:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800484a:	f107 0313 	add.w	r3, r7, #19
 800484e:	461a      	mov	r2, r3
 8004850:	2101      	movs	r1, #1
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f961 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800485e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004866:	7cfa      	ldrb	r2, [r7, #19]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800486e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	461a      	mov	r2, r3
 800487c:	2103      	movs	r1, #3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f002 fe8c 	bl	800759c <get_sequence_step_timeout>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800488a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800489a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	461a      	mov	r2, r3
 80048a8:	2104      	movs	r1, #4
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f002 fe76 	bl	800759c <get_sequence_step_timeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80048b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3770      	adds	r7, #112	; 0x70
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bdb0      	pop	{r4, r5, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80048e0:	239d      	movs	r3, #157	; 0x9d
 80048e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80048e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8b1 	bl	8004a6c <VL53L0X_GetDeviceMode>
 800490a:	4603      	mov	r3, r0
 800490c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800490e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa5d 	bl	8004ddc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004922:	4603      	mov	r3, r0
 8004924:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3310      	adds	r3, #16
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa92 	bl	8004e6c <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800494c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fcc2 	bl	80042e4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d134      	bne.n	80049d6 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800496c:	2300      	movs	r3, #0
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	e02a      	b.n	80049c8 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d12a      	bne.n	80049d0 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	b299      	uxth	r1, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3308      	adds	r3, #8
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4413      	add	r3, r2
 8004988:	3304      	adds	r3, #4
 800498a:	461a      	mov	r2, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fbb1 	bl	80050f4 <VL53L0X_GetLimitCheckValue>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	4313      	orrs	r3, r2
 800499a:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800499c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d117      	bne.n	80049d4 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	b299      	uxth	r1, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3318      	adds	r3, #24
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	4413      	add	r3, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fb1a 	bl	8004fec <VL53L0X_GetLimitCheckEnable>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461a      	mov	r2, r3
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	4313      	orrs	r3, r2
 80049c0:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	ddd1      	ble.n	8004972 <VL53L0X_GetDeviceParameters+0x80>
 80049ce:	e002      	b.n	80049d6 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80049d4:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	333c      	adds	r3, #60	; 0x3c
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fc13 	bl	8005210 <VL53L0X_GetWrapAroundCheckEnable>
 80049ea:	4603      	mov	r3, r0
 80049ec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80049ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d107      	bne.n	8004a06 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f879 	bl	8004af4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b15      	cmp	r3, #21
 8004a28:	bf8c      	ite	hi
 8004a2a:	2201      	movhi	r2, #1
 8004a2c:	2200      	movls	r2, #0
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d10f      	bne.n	8004a54 <VL53L0X_SetDeviceMode+0x40>
 8004a34:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <VL53L0X_SetDeviceMode+0x54>)
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf14      	ite	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2300      	moveq	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	741a      	strb	r2, [r3, #16]
		break;
 8004a52:	e001      	b.n	8004a58 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004a54:	23f8      	movs	r3, #248	; 0xf8
 8004a56:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	0030000b 	.word	0x0030000b

08004a6c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7c1a      	ldrb	r2, [r3, #16]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	2109      	movs	r1, #9
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f004 f8ae 	bl	8008c04 <VL53L0X_RdByte>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f002 ff66 	bl	80079b0 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004b02:	6839      	ldr	r1, [r7, #0]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f003 f833 	bl	8007b70 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	460b      	mov	r3, r1
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f002 ff05 	bl	8007942 <VL53L0X_get_vcsel_pulse_period>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
 8004b54:	4613      	mov	r3, r2
 8004b56:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004b64:	f107 030f 	add.w	r3, r7, #15
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f004 f849 	bl	8008c04 <VL53L0X_RdByte>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d159      	bne.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8004b82:	78bb      	ldrb	r3, [r7, #2]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d12b      	bne.n	8004be0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d825      	bhi.n	8004bda <VL53L0X_SetSequenceStepEnable+0x92>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004ba9 	.word	0x08004ba9
 8004b98:	08004bb3 	.word	0x08004bb3
 8004b9c:	08004bbd 	.word	0x08004bbd
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bd1 	.word	0x08004bd1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004ba8:	7dbb      	ldrb	r3, [r7, #22]
 8004baa:	f043 0310 	orr.w	r3, r3, #16
 8004bae:	75bb      	strb	r3, [r7, #22]
				break;
 8004bb0:	e041      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004bb2:	7dbb      	ldrb	r3, [r7, #22]
 8004bb4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004bb8:	75bb      	strb	r3, [r7, #22]
				break;
 8004bba:	e03c      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004bbc:	7dbb      	ldrb	r3, [r7, #22]
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	75bb      	strb	r3, [r7, #22]
				break;
 8004bc4:	e037      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004bc6:	7dbb      	ldrb	r3, [r7, #22]
 8004bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bcc:	75bb      	strb	r3, [r7, #22]
				break;
 8004bce:	e032      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004bd0:	7dbb      	ldrb	r3, [r7, #22]
 8004bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bd6:	75bb      	strb	r3, [r7, #22]
				break;
 8004bd8:	e02d      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004bda:	23fc      	movs	r3, #252	; 0xfc
 8004bdc:	75fb      	strb	r3, [r7, #23]
 8004bde:	e02a      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d825      	bhi.n	8004c32 <VL53L0X_SetSequenceStepEnable+0xea>
 8004be6:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c01 	.word	0x08004c01
 8004bf0:	08004c0b 	.word	0x08004c0b
 8004bf4:	08004c15 	.word	0x08004c15
 8004bf8:	08004c1f 	.word	0x08004c1f
 8004bfc:	08004c29 	.word	0x08004c29
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004c00:	7dbb      	ldrb	r3, [r7, #22]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	75bb      	strb	r3, [r7, #22]
				break;
 8004c08:	e015      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004c0a:	7dbb      	ldrb	r3, [r7, #22]
 8004c0c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004c10:	75bb      	strb	r3, [r7, #22]
				break;
 8004c12:	e010      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004c14:	7dbb      	ldrb	r3, [r7, #22]
 8004c16:	f023 0304 	bic.w	r3, r3, #4
 8004c1a:	75bb      	strb	r3, [r7, #22]
				break;
 8004c1c:	e00b      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004c1e:	7dbb      	ldrb	r3, [r7, #22]
 8004c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c24:	75bb      	strb	r3, [r7, #22]
				break;
 8004c26:	e006      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004c28:	7dbb      	ldrb	r3, [r7, #22]
 8004c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2e:	75bb      	strb	r3, [r7, #22]
				break;
 8004c30:	e001      	b.n	8004c36 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c32:	23fc      	movs	r3, #252	; 0xfc
 8004c34:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	7dba      	ldrb	r2, [r7, #22]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d01e      	beq.n	8004c7c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8004c46:	7dbb      	ldrb	r3, [r7, #22]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f003 ff57 	bl	8008b00 <VL53L0X_WrByte>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7dba      	ldrb	r2, [r7, #22]
 8004c62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004c74:	6939      	ldr	r1, [r7, #16]
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ff29 	bl	8004ace <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	72fb      	strb	r3, [r7, #11]
 8004c96:	4613      	mov	r3, r2
 8004c98:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004ca4:	7afb      	ldrb	r3, [r7, #11]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d836      	bhi.n	8004d18 <sequence_step_enabled+0x90>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <sequence_step_enabled+0x28>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc5 	.word	0x08004cc5
 8004cb4:	08004cd7 	.word	0x08004cd7
 8004cb8:	08004ce9 	.word	0x08004ce9
 8004cbc:	08004cfb 	.word	0x08004cfb
 8004cc0:	08004d0d 	.word	0x08004d0d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004cc4:	7abb      	ldrb	r3, [r7, #10]
 8004cc6:	111b      	asrs	r3, r3, #4
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	701a      	strb	r2, [r3, #0]
		break;
 8004cd4:	e022      	b.n	8004d1c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004cd6:	7abb      	ldrb	r3, [r7, #10]
 8004cd8:	10db      	asrs	r3, r3, #3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	701a      	strb	r2, [r3, #0]
		break;
 8004ce6:	e019      	b.n	8004d1c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004ce8:	7abb      	ldrb	r3, [r7, #10]
 8004cea:	109b      	asrs	r3, r3, #2
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	701a      	strb	r2, [r3, #0]
		break;
 8004cf8:	e010      	b.n	8004d1c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004cfa:	7abb      	ldrb	r3, [r7, #10]
 8004cfc:	119b      	asrs	r3, r3, #6
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	701a      	strb	r2, [r3, #0]
		break;
 8004d0a:	e007      	b.n	8004d1c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004d0c:	7abb      	ldrb	r3, [r7, #10]
 8004d0e:	09db      	lsrs	r3, r3, #7
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	701a      	strb	r2, [r3, #0]
		break;
 8004d16:	e001      	b.n	8004d1c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d18:	23fc      	movs	r3, #252	; 0xfc
 8004d1a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop

08004d2c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004d3e:	f107 030e 	add.w	r3, r7, #14
 8004d42:	461a      	mov	r2, r3
 8004d44:	2101      	movs	r1, #1
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f003 ff5c 	bl	8008c04 <VL53L0X_RdByte>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004d58:	7bba      	ldrb	r2, [r7, #14]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff92 	bl	8004c88 <sequence_step_enabled>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d108      	bne.n	8004d82 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004d70:	7bba      	ldrb	r2, [r7, #14]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	3302      	adds	r3, #2
 8004d76:	2101      	movs	r1, #1
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff85 	bl	8004c88 <sequence_step_enabled>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004d8a:	7bba      	ldrb	r2, [r7, #14]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	2102      	movs	r1, #2
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ff78 	bl	8004c88 <sequence_step_enabled>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004da4:	7bba      	ldrb	r2, [r7, #14]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	3303      	adds	r3, #3
 8004daa:	2103      	movs	r1, #3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff6b 	bl	8004c88 <sequence_step_enabled>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d108      	bne.n	8004dd0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004dbe:	7bba      	ldrb	r2, [r7, #14]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff5e 	bl	8004c88 <sequence_step_enabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	461a      	mov	r2, r3
 8004df0:	21f8      	movs	r1, #248	; 0xf8
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f003 ff30 	bl	8008c58 <VL53L0X_RdWord>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004e04:	f107 0308 	add.w	r3, r7, #8
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f003 ff5b 	bl	8008cc8 <VL53L0X_RdDWord>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004e1e:	89bb      	ldrh	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	89ba      	ldrh	r2, [r7, #12]
 8004e28:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7f1b      	ldrb	r3, [r3, #28]
 8004e56:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	7bba      	ldrb	r2, [r7, #14]
 8004e5c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004e7a:	f107 030e 	add.w	r3, r7, #14
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2120      	movs	r1, #32
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f003 fee8 	bl	8008c58 <VL53L0X_RdWord>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d118      	bne.n	8004ec6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004e94:	89fb      	ldrh	r3, [r7, #14]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
 8004eac:	e00b      	b.n	8004ec6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004eae:	89fb      	ldrh	r3, [r7, #14]
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	807b      	strh	r3, [r7, #2]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d902      	bls.n	8004f00 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004efa:	23fc      	movs	r3, #252	; 0xfc
 8004efc:	75fb      	strb	r3, [r7, #23]
 8004efe:	e05b      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004f00:	787b      	ldrb	r3, [r7, #1]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73bb      	strb	r3, [r7, #14]
 8004f12:	e00a      	b.n	8004f2a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f14:	887b      	ldrh	r3, [r7, #2]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d841      	bhi.n	8004fb4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f51 	.word	0x08004f51
 8004f3c:	08004f5b 	.word	0x08004f5b
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f85 	.word	0x08004f85
 8004f4c:	08004f9d 	.word	0x08004f9d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7bfa      	ldrb	r2, [r7, #15]
 8004f54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004f58:	e02e      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	2144      	movs	r1, #68	; 0x44
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f003 fdef 	bl	8008b48 <VL53L0X_WrWord>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75fb      	strb	r3, [r7, #23]

			break;
 8004f6e:	e023      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7bfa      	ldrb	r2, [r7, #15]
 8004f74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004f78:	e01e      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004f82:	e019      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004f8a:	7b7b      	ldrb	r3, [r7, #13]
 8004f8c:	22fe      	movs	r2, #254	; 0xfe
 8004f8e:	2160      	movs	r1, #96	; 0x60
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f003 fe03 	bl	8008b9c <VL53L0X_UpdateByte>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004f9a:	e00d      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004f9c:	7bbb      	ldrb	r3, [r7, #14]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004fa2:	7b7b      	ldrb	r3, [r7, #13]
 8004fa4:	22ef      	movs	r2, #239	; 0xef
 8004fa6:	2160      	movs	r1, #96	; 0x60
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f003 fdf7 	bl	8008b9c <VL53L0X_UpdateByte>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004fb2:	e001      	b.n	8004fb8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fb4:	23fc      	movs	r3, #252	; 0xfc
 8004fb6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004fc0:	787b      	ldrb	r3, [r7, #1]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004fc6:	887b      	ldrh	r3, [r7, #2]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004fd2:	e005      	b.n	8004fe0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004fd4:	887b      	ldrh	r3, [r7, #2]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	2b05      	cmp	r3, #5
 8005002:	d905      	bls.n	8005010 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005004:	23fc      	movs	r3, #252	; 0xfc
 8005006:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e008      	b.n	8005022 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005010:	897b      	ldrh	r3, [r7, #10]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7dba      	ldrb	r2, [r7, #22]
 8005020:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	460b      	mov	r3, r1
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800504e:	7dbb      	ldrb	r3, [r7, #22]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005054:	897b      	ldrh	r3, [r7, #10]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	330c      	adds	r3, #12
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	e040      	b.n	80050e6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005064:	897b      	ldrh	r3, [r7, #10]
 8005066:	2b05      	cmp	r3, #5
 8005068:	d830      	bhi.n	80050cc <VL53L0X_SetLimitCheckValue+0x9c>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <VL53L0X_SetLimitCheckValue+0x40>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005089 	.word	0x08005089
 8005074:	08005091 	.word	0x08005091
 8005078:	080050a7 	.word	0x080050a7
 800507c:	080050af 	.word	0x080050af
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050b7 	.word	0x080050b7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800508e:	e01f      	b.n	80050d0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	2144      	movs	r1, #68	; 0x44
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f003 fd54 	bl	8008b48 <VL53L0X_WrWord>
 80050a0:	4603      	mov	r3, r0
 80050a2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80050a4:	e014      	b.n	80050d0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80050ac:	e010      	b.n	80050d0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80050b4:	e00c      	b.n	80050d0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	2164      	movs	r1, #100	; 0x64
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f003 fd41 	bl	8008b48 <VL53L0X_WrWord>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80050ca:	e001      	b.n	80050d0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050cc:	23fc      	movs	r3, #252	; 0xfc
 80050ce:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80050d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	330c      	adds	r3, #12
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80050e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	460b      	mov	r3, r1
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005102:	2300      	movs	r3, #0
 8005104:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	2b05      	cmp	r3, #5
 800510e:	d847      	bhi.n	80051a0 <VL53L0X_GetLimitCheckValue+0xac>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <VL53L0X_GetLimitCheckValue+0x24>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005131 	.word	0x08005131
 800511c:	0800513d 	.word	0x0800513d
 8005120:	08005163 	.word	0x08005163
 8005124:	0800516f 	.word	0x0800516f
 8005128:	0800517b 	.word	0x0800517b
 800512c:	0800517b 	.word	0x0800517b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	77bb      	strb	r3, [r7, #30]
		break;
 800513a:	e033      	b.n	80051a4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800513c:	f107 0316 	add.w	r3, r7, #22
 8005140:	461a      	mov	r2, r3
 8005142:	2144      	movs	r1, #68	; 0x44
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f003 fd87 	bl	8008c58 <VL53L0X_RdWord>
 800514a:	4603      	mov	r3, r0
 800514c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800514e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005156:	8afb      	ldrh	r3, [r7, #22]
 8005158:	025b      	lsls	r3, r3, #9
 800515a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800515c:	2301      	movs	r3, #1
 800515e:	77bb      	strb	r3, [r7, #30]
		break;
 8005160:	e020      	b.n	80051a4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	77bb      	strb	r3, [r7, #30]
		break;
 800516c:	e01a      	b.n	80051a4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	77bb      	strb	r3, [r7, #30]
		break;
 8005178:	e014      	b.n	80051a4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800517a:	f107 0316 	add.w	r3, r7, #22
 800517e:	461a      	mov	r2, r3
 8005180:	2164      	movs	r1, #100	; 0x64
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f003 fd68 	bl	8008c58 <VL53L0X_RdWord>
 8005188:	4603      	mov	r3, r0
 800518a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800518c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005194:	8afb      	ldrh	r3, [r7, #22]
 8005196:	025b      	lsls	r3, r3, #9
 8005198:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	77bb      	strb	r3, [r7, #30]
		break;
 800519e:	e001      	b.n	80051a4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051a0:	23fc      	movs	r3, #252	; 0xfc
 80051a2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d12a      	bne.n	8005202 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80051ac:	7fbb      	ldrb	r3, [r7, #30]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d124      	bne.n	80051fc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d110      	bne.n	80051da <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80051b8:	897b      	ldrh	r3, [r7, #10]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	330c      	adds	r3, #12
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80051cc:	897b      	ldrh	r3, [r7, #10]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80051d8:	e013      	b.n	8005202 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	330c      	adds	r3, #12
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80051fa:	e002      	b.n	8005202 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005202:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop

08005210 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800521e:	f107 030e 	add.w	r3, r7, #14
 8005222:	461a      	mov	r2, r3
 8005224:	2101      	movs	r1, #1
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f003 fcec 	bl	8008c04 <VL53L0X_RdByte>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10e      	bne.n	8005256 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005238:	7bba      	ldrb	r2, [r7, #14]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005240:	7bbb      	ldrb	r3, [r7, #14]
 8005242:	b25b      	sxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	da03      	bge.n	8005250 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e002      	b.n	8005256 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005280:	f107 030e 	add.w	r3, r7, #14
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fbf0 	bl	8004a6c <VL53L0X_GetDeviceMode>
 800528c:	4603      	mov	r3, r0
 800528e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f898 	bl	80053d4 <VL53L0X_StartMeasurement>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80052a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fb3c 	bl	800692e <VL53L0X_measurement_poll_for_completion>
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80052ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2203      	movs	r2, #3
 80052cc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80052d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80052ec:	2301      	movs	r3, #1
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f001 fade 	bl	80068b4 <VL53L0X_perform_ref_calibration>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80052fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005314:	2300      	movs	r3, #0
 8005316:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800531e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005320:	7dbb      	ldrb	r3, [r7, #22]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d005      	beq.n	8005332 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005326:	7dbb      	ldrb	r3, [r7, #22]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d002      	beq.n	8005332 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800532c:	7dbb      	ldrb	r3, [r7, #22]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d147      	bne.n	80053c2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005332:	f107 030c 	add.w	r3, r7, #12
 8005336:	f107 0210 	add.w	r2, r7, #16
 800533a:	2101      	movs	r1, #1
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fbc1 	bl	8005ac4 <VL53L0X_GetInterruptThresholds>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800534c:	d803      	bhi.n	8005356 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800534e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005350:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005354:	d935      	bls.n	80053c2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d131      	bne.n	80053c2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d006      	beq.n	8005372 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005364:	491a      	ldr	r1, [pc, #104]	; (80053d0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f002 fcb4 	bl	8007cd4 <VL53L0X_load_tuning_settings>
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]
 8005370:	e027      	b.n	80053c2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005372:	2204      	movs	r2, #4
 8005374:	21ff      	movs	r1, #255	; 0xff
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f003 fbc2 	bl	8008b00 <VL53L0X_WrByte>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	4313      	orrs	r3, r2
 8005384:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005386:	2200      	movs	r2, #0
 8005388:	2170      	movs	r1, #112	; 0x70
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f003 fbb8 	bl	8008b00 <VL53L0X_WrByte>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	4313      	orrs	r3, r2
 8005398:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800539a:	2200      	movs	r2, #0
 800539c:	21ff      	movs	r1, #255	; 0xff
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f003 fbae 	bl	8008b00 <VL53L0X_WrByte>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f003 fba4 	bl	8008b00 <VL53L0X_WrByte>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	4313      	orrs	r3, r2
 80053c0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80053c2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000100 	.word	0x20000100

080053d4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053dc:	2300      	movs	r3, #0
 80053de:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80053e4:	f107 030e 	add.w	r3, r7, #14
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fb3e 	bl	8004a6c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80053f0:	2201      	movs	r2, #1
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f003 fb83 	bl	8008b00 <VL53L0X_WrByte>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80053fe:	2201      	movs	r2, #1
 8005400:	21ff      	movs	r1, #255	; 0xff
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f003 fb7c 	bl	8008b00 <VL53L0X_WrByte>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800540c:	2200      	movs	r2, #0
 800540e:	2100      	movs	r1, #0
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f003 fb75 	bl	8008b00 <VL53L0X_WrByte>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005420:	461a      	mov	r2, r3
 8005422:	2191      	movs	r1, #145	; 0x91
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f003 fb6b 	bl	8008b00 <VL53L0X_WrByte>
 800542a:	4603      	mov	r3, r0
 800542c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800542e:	2201      	movs	r2, #1
 8005430:	2100      	movs	r1, #0
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f003 fb64 	bl	8008b00 <VL53L0X_WrByte>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800543c:	2200      	movs	r2, #0
 800543e:	21ff      	movs	r1, #255	; 0xff
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f003 fb5d 	bl	8008b00 <VL53L0X_WrByte>
 8005446:	4603      	mov	r3, r0
 8005448:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800544a:	2200      	movs	r2, #0
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f003 fb56 	bl	8008b00 <VL53L0X_WrByte>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b03      	cmp	r3, #3
 800545c:	d054      	beq.n	8005508 <VL53L0X_StartMeasurement+0x134>
 800545e:	2b03      	cmp	r3, #3
 8005460:	dc6c      	bgt.n	800553c <VL53L0X_StartMeasurement+0x168>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <VL53L0X_StartMeasurement+0x98>
 8005466:	2b01      	cmp	r3, #1
 8005468:	d034      	beq.n	80054d4 <VL53L0X_StartMeasurement+0x100>
 800546a:	e067      	b.n	800553c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800546c:	2201      	movs	r2, #1
 800546e:	2100      	movs	r1, #0
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f003 fb45 	bl	8008b00 <VL53L0X_WrByte>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800547e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d15d      	bne.n	8005542 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005490:	f107 030d 	add.w	r3, r7, #13
 8005494:	461a      	mov	r2, r3
 8005496:	2100      	movs	r1, #0
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f003 fbb3 	bl	8008c04 <VL53L0X_RdByte>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80054a8:	7b7a      	ldrb	r2, [r7, #13]
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	4013      	ands	r3, r2
 80054ae:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80054b0:	7bfa      	ldrb	r2, [r7, #15]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d107      	bne.n	80054c6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80054b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054c4:	d3e1      	bcc.n	800548a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054cc:	d339      	bcc.n	8005542 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80054ce:	23f9      	movs	r3, #249	; 0xf9
 80054d0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80054d2:	e036      	b.n	8005542 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80054d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80054dc:	2101      	movs	r1, #1
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff12 	bl	8005308 <VL53L0X_CheckAndLoadInterruptSettings>
 80054e4:	4603      	mov	r3, r0
 80054e6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80054e8:	2202      	movs	r2, #2
 80054ea:	2100      	movs	r1, #0
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f003 fb07 	bl	8008b00 <VL53L0X_WrByte>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80054f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d123      	bne.n	8005546 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2204      	movs	r2, #4
 8005502:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005506:	e01e      	b.n	8005546 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005510:	2101      	movs	r1, #1
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff fef8 	bl	8005308 <VL53L0X_CheckAndLoadInterruptSettings>
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800551c:	2204      	movs	r2, #4
 800551e:	2100      	movs	r1, #0
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f003 faed 	bl	8008b00 <VL53L0X_WrByte>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800552a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800553a:	e006      	b.n	800554a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800553c:	23f8      	movs	r3, #248	; 0xf8
 800553e:	75fb      	strb	r3, [r7, #23]
 8005540:	e004      	b.n	800554c <VL53L0X_StartMeasurement+0x178>
		break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <VL53L0X_StartMeasurement+0x178>
		break;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <VL53L0X_StartMeasurement+0x178>
		break;
 800554a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800554c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800556c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d112      	bne.n	800559a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb18 	bl	8005bb0 <VL53L0X_GetInterruptMaskStatus>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d103      	bne.n	8005592 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e01c      	b.n	80055cc <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e018      	b.n	80055cc <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800559a:	f107 030d 	add.w	r3, r7, #13
 800559e:	461a      	mov	r2, r3
 80055a0:	2114      	movs	r1, #20
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f003 fb2e 	bl	8008c04 <VL53L0X_RdByte>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80055ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80055b4:	7b7b      	ldrb	r3, [r7, #13]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	e002      	b.n	80055cc <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b096      	sub	sp, #88	; 0x58
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80055e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055ec:	230c      	movs	r3, #12
 80055ee:	2114      	movs	r1, #20
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f003 fa59 	bl	8008aa8 <VL53L0X_ReadMulti>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80055fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 80d1 	bne.w	80057a8 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005612:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005616:	b29b      	uxth	r3, r3
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	b29a      	uxth	r2, r3
 800561c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005620:	b29b      	uxth	r3, r3
 8005622:	4413      	add	r3, r2
 8005624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800562e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005632:	b29b      	uxth	r3, r3
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	b29a      	uxth	r2, r3
 8005638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800563c:	b29b      	uxth	r3, r3
 800563e:	4413      	add	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	025b      	lsls	r3, r3, #9
 8005644:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800564c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005650:	b29b      	uxth	r3, r3
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	b29a      	uxth	r2, r3
 8005656:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800565a:	b29b      	uxth	r3, r3
 800565c:	4413      	add	r3, r2
 800565e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005662:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800566e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	b29a      	uxth	r2, r3
 8005678:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800567c:	b29b      	uxth	r3, r3
 800567e:	4413      	add	r3, r2
 8005680:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800568a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800568c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800569a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80056a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80056a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ac:	d046      	beq.n	800573c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80056ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056b0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80056bc:	4a57      	ldr	r2, [pc, #348]	; (800581c <VL53L0X_GetRangingMeasurementData+0x244>)
 80056be:	fb82 1203 	smull	r1, r2, r2, r3
 80056c2:	1192      	asrs	r2, r2, #6
 80056c4:	17db      	asrs	r3, r3, #31
 80056c6:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80056c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	7f1b      	ldrb	r3, [r3, #28]
 80056d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80056da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02c      	beq.n	800573c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80056e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056e4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
 80056ec:	121a      	asrs	r2, r3, #8
					<= 0) {
 80056ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d10d      	bne.n	8005710 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80056f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80056fc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005700:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005704:	e016      	b.n	8005734 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005706:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800570a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800570e:	e011      	b.n	8005734 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005710:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005716:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800571a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800571c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005720:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005724:	121b      	asrs	r3, r3, #8
 8005726:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005730:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005734:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005738:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800573c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005744:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005748:	089b      	lsrs	r3, r3, #2
 800574a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005750:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005754:	b2db      	uxtb	r3, r3
 8005756:	019b      	lsls	r3, r3, #6
 8005758:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	75da      	strb	r2, [r3, #23]
 800575e:	e006      	b.n	800576e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005766:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800576e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005772:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005776:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f002 ff43 	bl	8008610 <VL53L0X_get_pal_range_status>
 800578a:	4603      	mov	r3, r0
 800578c:	461a      	mov	r2, r3
 800578e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005792:	4313      	orrs	r3, r2
 8005794:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005798:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800579c:	2b00      	cmp	r3, #0
 800579e:	d103      	bne.n	80057a8 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80057a0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057a8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d12f      	bne.n	8005810 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f107 040c 	add.w	r4, r7, #12
 80057b6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80057ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80057ca:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80057d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80057d8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80057de:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80057e4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80057ea:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80057f0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80057f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005800:	f107 050c 	add.w	r5, r7, #12
 8005804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005808:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800580c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005810:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005814:	4618      	mov	r0, r3
 8005816:	3750      	adds	r7, #80	; 0x50
 8005818:	46bd      	mov	sp, r7
 800581a:	bdb0      	pop	{r4, r5, r7, pc}
 800581c:	10624dd3 	.word	0x10624dd3

08005820 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800582e:	2100      	movs	r1, #0
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff f8ef 	bl	8004a14 <VL53L0X_SetDeviceMode>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800583a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fd16 	bl	8005274 <VL53L0X_PerformSingleMeasurement>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800584c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff febe 	bl	80055d8 <VL53L0X_GetRangingMeasurementData>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005868:	2100      	movs	r1, #0
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f960 	bl	8005b30 <VL53L0X_ClearInterruptMask>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	461a      	mov	r2, r3
 800588e:	4603      	mov	r3, r0
 8005890:	70fb      	strb	r3, [r7, #3]
 8005892:	460b      	mov	r3, r1
 8005894:	70bb      	strb	r3, [r7, #2]
 8005896:	4613      	mov	r3, r2
 8005898:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80058a4:	23f6      	movs	r3, #246	; 0xf6
 80058a6:	73fb      	strb	r3, [r7, #15]
 80058a8:	e105      	b.n	8005ab6 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80058aa:	78bb      	ldrb	r3, [r7, #2]
 80058ac:	2b14      	cmp	r3, #20
 80058ae:	d110      	bne.n	80058d2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80058b0:	7e3b      	ldrb	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80058b6:	2310      	movs	r3, #16
 80058b8:	73bb      	strb	r3, [r7, #14]
 80058ba:	e001      	b.n	80058c0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80058bc:	2301      	movs	r3, #1
 80058be:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	461a      	mov	r2, r3
 80058c4:	2184      	movs	r1, #132	; 0x84
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f003 f91a 	bl	8008b00 <VL53L0X_WrByte>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e0f1      	b.n	8005ab6 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80058d2:	78bb      	ldrb	r3, [r7, #2]
 80058d4:	2b15      	cmp	r3, #21
 80058d6:	f040 8097 	bne.w	8005a08 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80058da:	2201      	movs	r2, #1
 80058dc:	21ff      	movs	r1, #255	; 0xff
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f003 f90e 	bl	8008b00 <VL53L0X_WrByte>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058ee:	2200      	movs	r2, #0
 80058f0:	2100      	movs	r1, #0
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f003 f904 	bl	8008b00 <VL53L0X_WrByte>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	4313      	orrs	r3, r2
 8005900:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005902:	2200      	movs	r2, #0
 8005904:	21ff      	movs	r1, #255	; 0xff
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f003 f8fa 	bl	8008b00 <VL53L0X_WrByte>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	4313      	orrs	r3, r2
 8005914:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005916:	2201      	movs	r2, #1
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f003 f8f0 	bl	8008b00 <VL53L0X_WrByte>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	4313      	orrs	r3, r2
 8005928:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800592a:	2202      	movs	r2, #2
 800592c:	2185      	movs	r1, #133	; 0x85
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f003 f8e6 	bl	8008b00 <VL53L0X_WrByte>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	4313      	orrs	r3, r2
 800593c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800593e:	2204      	movs	r2, #4
 8005940:	21ff      	movs	r1, #255	; 0xff
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f003 f8dc 	bl	8008b00 <VL53L0X_WrByte>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	4313      	orrs	r3, r2
 8005950:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005952:	2200      	movs	r2, #0
 8005954:	21cd      	movs	r1, #205	; 0xcd
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f003 f8d2 	bl	8008b00 <VL53L0X_WrByte>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	4313      	orrs	r3, r2
 8005964:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005966:	2211      	movs	r2, #17
 8005968:	21cc      	movs	r1, #204	; 0xcc
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f003 f8c8 	bl	8008b00 <VL53L0X_WrByte>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4313      	orrs	r3, r2
 8005978:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800597a:	2207      	movs	r2, #7
 800597c:	21ff      	movs	r1, #255	; 0xff
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f003 f8be 	bl	8008b00 <VL53L0X_WrByte>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	4313      	orrs	r3, r2
 800598c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800598e:	2200      	movs	r2, #0
 8005990:	21be      	movs	r1, #190	; 0xbe
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f003 f8b4 	bl	8008b00 <VL53L0X_WrByte>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	4313      	orrs	r3, r2
 80059a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80059a2:	2206      	movs	r2, #6
 80059a4:	21ff      	movs	r1, #255	; 0xff
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 f8aa 	bl	8008b00 <VL53L0X_WrByte>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80059b6:	2209      	movs	r2, #9
 80059b8:	21cc      	movs	r1, #204	; 0xcc
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f003 f8a0 	bl	8008b00 <VL53L0X_WrByte>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80059ca:	2200      	movs	r2, #0
 80059cc:	21ff      	movs	r1, #255	; 0xff
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f003 f896 	bl	8008b00 <VL53L0X_WrByte>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	4313      	orrs	r3, r2
 80059dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80059de:	2201      	movs	r2, #1
 80059e0:	21ff      	movs	r1, #255	; 0xff
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f003 f88c 	bl	8008b00 <VL53L0X_WrByte>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461a      	mov	r2, r3
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f003 f882 	bl	8008b00 <VL53L0X_WrByte>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	e056      	b.n	8005ab6 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d120      	bne.n	8005a52 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8005a10:	787b      	ldrb	r3, [r7, #1]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d81b      	bhi.n	8005a4e <VL53L0X_SetGpioConfig+0x1ce>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <VL53L0X_SetGpioConfig+0x19c>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a31 	.word	0x08005a31
 8005a20:	08005a37 	.word	0x08005a37
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a43 	.word	0x08005a43
 8005a2c:	08005a49 	.word	0x08005a49
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73bb      	strb	r3, [r7, #14]
				break;
 8005a34:	e00d      	b.n	8005a52 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73bb      	strb	r3, [r7, #14]
				break;
 8005a3a:	e00a      	b.n	8005a52 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	73bb      	strb	r3, [r7, #14]
				break;
 8005a40:	e007      	b.n	8005a52 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005a42:	2303      	movs	r3, #3
 8005a44:	73bb      	strb	r3, [r7, #14]
				break;
 8005a46:	e004      	b.n	8005a52 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005a48:	2304      	movs	r3, #4
 8005a4a:	73bb      	strb	r3, [r7, #14]
				break;
 8005a4c:	e001      	b.n	8005a52 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8005a4e:	23f5      	movs	r3, #245	; 0xf5
 8005a50:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d107      	bne.n	8005a6a <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	210a      	movs	r1, #10
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f003 f84d 	bl	8008b00 <VL53L0X_WrByte>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10f      	bne.n	8005a92 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005a72:	7e3b      	ldrb	r3, [r7, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73bb      	strb	r3, [r7, #14]
 8005a7c:	e001      	b.n	8005a82 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8005a7e:	2310      	movs	r3, #16
 8005a80:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	22ef      	movs	r2, #239	; 0xef
 8005a86:	2184      	movs	r1, #132	; 0x84
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f003 f887 	bl	8008b9c <VL53L0X_UpdateByte>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	787a      	ldrb	r2, [r7, #1]
 8005a9e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f83f 	bl	8005b30 <VL53L0X_ClearInterruptMask>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005ad8:	f107 0314 	add.w	r3, r7, #20
 8005adc:	461a      	mov	r2, r3
 8005ade:	210e      	movs	r1, #14
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f003 f8b9 	bl	8008c58 <VL53L0X_RdWord>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005aea:	8abb      	ldrh	r3, [r7, #20]
 8005aec:	045b      	lsls	r3, r3, #17
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <VL53L0X_GetInterruptThresholds+0x68>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10f      	bne.n	8005b20 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	461a      	mov	r2, r3
 8005b06:	210c      	movs	r1, #12
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f003 f8a5 	bl	8008c58 <VL53L0X_RdWord>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005b12:	8abb      	ldrh	r3, [r7, #20]
 8005b14:	045b      	lsls	r3, r3, #17
 8005b16:	461a      	mov	r2, r3
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <VL53L0X_GetInterruptThresholds+0x68>)
 8005b1a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	1ffe0000 	.word	0x1ffe0000

08005b30 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005b42:	2201      	movs	r2, #1
 8005b44:	210b      	movs	r1, #11
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f002 ffda 	bl	8008b00 <VL53L0X_WrByte>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005b50:	2200      	movs	r2, #0
 8005b52:	210b      	movs	r1, #11
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 ffd3 	bl	8008b00 <VL53L0X_WrByte>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005b64:	f107 030d 	add.w	r3, r7, #13
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2113      	movs	r1, #19
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f003 f849 	bl	8008c04 <VL53L0X_RdByte>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005b82:	7b7b      	ldrb	r3, [r7, #13]
 8005b84:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005b8c:	7bbb      	ldrb	r3, [r7, #14]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d803      	bhi.n	8005b9a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0d3      	beq.n	8005b42 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005ba0:	23f4      	movs	r3, #244	; 0xf4
 8005ba2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005bbe:	f107 030e 	add.w	r3, r7, #14
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2113      	movs	r1, #19
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f003 f81c 	bl	8008c04 <VL53L0X_RdByte>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	f003 0207 	and.w	r2, r3, #7
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	f003 0318 	and.w	r3, r3, #24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005be4:	23fa      	movs	r3, #250	; 0xfa
 8005be6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fa02 	bl	8006012 <VL53L0X_perform_ref_spad_management>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005c2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005c30:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c36:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005c38:	f107 0308 	add.w	r3, r7, #8
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2128      	movs	r1, #40	; 0x28
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f003 f809 	bl	8008c58 <VL53L0X_RdWord>
 8005c46:	4603      	mov	r3, r0
 8005c48:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11e      	bne.n	8005c90 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	dd0b      	ble.n	8005c80 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005c68:	893a      	ldrh	r2, [r7, #8]
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	b21b      	sxth	r3, r3
 8005c72:	461a      	mov	r2, r3
					* 250;
 8005c74:	23fa      	movs	r3, #250	; 0xfa
 8005c76:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e007      	b.n	8005c90 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	23fa      	movs	r3, #250	; 0xfa
 8005c88:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b08b      	sub	sp, #44	; 0x2c
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005caa:	2308      	movs	r3, #8
 8005cac:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	fb01 f202 	mul.w	r2, r1, r2
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e030      	b.n	8005d3e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	4413      	add	r3, r2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d11e      	bne.n	8005d30 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005cf2:	7ffa      	ldrb	r2, [r7, #31]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	fa42 f303 	asr.w	r3, r2, r3
 8005cfa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005d00:	e016      	b.n	8005d30 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <get_next_good_spad+0x88>
				success = 1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	fb03 f202 	mul.w	r2, r3, r2
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	601a      	str	r2, [r3, #0]
				break;
 8005d22:	e009      	b.n	8005d38 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005d24:	7ffb      	ldrb	r3, [r7, #31]
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3e4      	bcc.n	8005d02 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d202      	bcs.n	8005d4c <get_next_good_spad+0xb0>
 8005d46:	7fbb      	ldrb	r3, [r7, #30]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0c7      	beq.n	8005cdc <get_next_good_spad+0x40>
		}
	}
}
 8005d4c:	bf00      	nop
 8005d4e:	372c      	adds	r7, #44	; 0x2c
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
	...

08005d58 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	099b      	lsrs	r3, r3, #6
 8005d68:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005d6a:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <is_aperture+0x30>)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <is_aperture+0x22>
		isAperture = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	200002b8 	.word	0x200002b8

08005d8c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	; 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8005db2:	69b9      	ldr	r1, [r7, #24]
 8005db4:	fb01 f202 	mul.w	r2, r1, r2
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005dc4:	23ce      	movs	r3, #206	; 0xce
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e010      	b.n	8005dec <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b25a      	sxtb	r2, r3
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	b25b      	sxtb	r3, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b259      	sxtb	r1, r3
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4413      	add	r3, r2
 8005de8:	b2ca      	uxtb	r2, r1
 8005dea:	701a      	strb	r2, [r3, #0]

	return status;
 8005dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3724      	adds	r7, #36	; 0x24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005e04:	2306      	movs	r3, #6
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	21b0      	movs	r1, #176	; 0xb0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f002 fe1c 	bl	8008a48 <VL53L0X_WriteMulti>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005e2a:	2306      	movs	r3, #6
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	21b0      	movs	r1, #176	; 0xb0
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f002 fe39 	bl	8008aa8 <VL53L0X_ReadMulti>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b08c      	sub	sp, #48	; 0x30
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	460b      	mov	r3, r1
 8005e54:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5e:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005e64:	2300      	movs	r3, #0
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e68:	e02b      	b.n	8005ec2 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005e6a:	f107 031c 	add.w	r3, r7, #28
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff ff12 	bl	8005c9c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d103      	bne.n	8005e88 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005e80:	23ce      	movs	r3, #206	; 0xce
 8005e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005e86:	e020      	b.n	8005eca <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	4413      	add	r3, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ff61 	bl	8005d58 <is_aperture>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005ea0:	23ce      	movs	r3, #206	; 0xce
 8005ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005ea6:	e010      	b.n	8005eca <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f7ff ff6b 	bl	8005d8c <enable_spad_bit>
		currentSpad++;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d3cf      	bcc.n	8005e6a <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005ed0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff ff8d 	bl	8005dfa <set_ref_spad_map>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005ee6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d121      	bne.n	8005f32 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff ff93 	bl	8005e20 <get_ref_spad_map>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005f04:	e011      	b.n	8005f2a <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	f107 0114 	add.w	r1, r7, #20
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	440b      	add	r3, r1
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d003      	beq.n	8005f24 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005f1c:	23ce      	movs	r3, #206	; 0xce
 8005f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005f22:	e006      	b.n	8005f32 <enable_ref_spads+0xec>
			}
			i++;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	3301      	adds	r3, #1
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3e9      	bcc.n	8005f06 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005f32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3730      	adds	r7, #48	; 0x30
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b08a      	sub	sp, #40	; 0x28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005f5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005f66:	22c0      	movs	r2, #192	; 0xc0
 8005f68:	2101      	movs	r1, #1
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f002 fdc8 	bl	8008b00 <VL53L0X_WrByte>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005f76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005f7e:	f107 0308 	add.w	r3, r7, #8
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fc4b 	bl	8005820 <VL53L0X_PerformSingleRangingMeasurement>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d107      	bne.n	8005fa8 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f98:	2201      	movs	r2, #1
 8005f9a:	21ff      	movs	r1, #255	; 0xff
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f002 fdaf 	bl	8008b00 <VL53L0X_WrByte>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005fa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	21b6      	movs	r1, #182	; 0xb6
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f002 fe4f 	bl	8008c58 <VL53L0X_RdWord>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d107      	bne.n	8005fd8 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fc8:	2200      	movs	r2, #0
 8005fca:	21ff      	movs	r1, #255	; 0xff
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f002 fd97 	bl	8008b00 <VL53L0X_WrByte>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d112      	bne.n	8006006 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f002 fd89 	bl	8008b00 <VL53L0X_WrByte>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006002:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006006:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800600a:	4618      	mov	r0, r3
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006012:	b590      	push	{r4, r7, lr}
 8006014:	b09d      	sub	sp, #116	; 0x74
 8006016:	af06      	add	r7, sp, #24
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601e:	2300      	movs	r3, #0
 8006020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006024:	23b4      	movs	r3, #180	; 0xb4
 8006026:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800602a:	2303      	movs	r3, #3
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800602e:	232c      	movs	r3, #44	; 0x2c
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800603e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006042:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800604c:	2306      	movs	r3, #6
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006076:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006078:	2300      	movs	r3, #0
 800607a:	64bb      	str	r3, [r7, #72]	; 0x48
 800607c:	e009      	b.n	8006092 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006082:	4413      	add	r3, r2
 8006084:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800608c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608e:	3301      	adds	r3, #1
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
 8006092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	429a      	cmp	r2, r3
 8006098:	d3f1      	bcc.n	800607e <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800609a:	2201      	movs	r2, #1
 800609c:	21ff      	movs	r1, #255	; 0xff
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f002 fd2e 	bl	8008b00 <VL53L0X_WrByte>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80060aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80060b2:	2200      	movs	r2, #0
 80060b4:	214f      	movs	r1, #79	; 0x4f
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f002 fd22 	bl	8008b00 <VL53L0X_WrByte>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80060c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d107      	bne.n	80060da <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80060ca:	222c      	movs	r2, #44	; 0x2c
 80060cc:	214e      	movs	r1, #78	; 0x4e
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f002 fd16 	bl	8008b00 <VL53L0X_WrByte>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80060da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d107      	bne.n	80060f2 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060e2:	2200      	movs	r2, #0
 80060e4:	21ff      	movs	r1, #255	; 0xff
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f002 fd0a 	bl	8008b00 <VL53L0X_WrByte>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80060f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80060fa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80060fe:	461a      	mov	r2, r3
 8006100:	21b6      	movs	r1, #182	; 0xb6
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f002 fcfc 	bl	8008b00 <VL53L0X_WrByte>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800610e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006112:	2b00      	cmp	r3, #0
 8006114:	d107      	bne.n	8006126 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006116:	2200      	movs	r2, #0
 8006118:	2180      	movs	r1, #128	; 0x80
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f002 fcf0 	bl	8008b00 <VL53L0X_WrByte>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006126:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800612e:	f107 0210 	add.w	r2, r7, #16
 8006132:	f107 0111 	add.w	r1, r7, #17
 8006136:	2300      	movs	r3, #0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fbbb 	bl	80068b4 <VL53L0X_perform_ref_calibration>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006144:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006148:	2b00      	cmp	r3, #0
 800614a:	d121      	bne.n	8006190 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006152:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006168:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800616c:	f107 0218 	add.w	r2, r7, #24
 8006170:	9204      	str	r2, [sp, #16]
 8006172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006174:	9203      	str	r2, [sp, #12]
 8006176:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006178:	9202      	str	r2, [sp, #8]
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4623      	mov	r3, r4
 8006182:	4602      	mov	r2, r0
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fe5e 	bl	8005e46 <enable_ref_spads>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006190:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006194:	2b00      	cmp	r3, #0
 8006196:	d174      	bne.n	8006282 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800619c:	f107 0312 	add.w	r3, r7, #18
 80061a0:	4619      	mov	r1, r3
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fecb 	bl	8005f3e <perform_ref_signal_measurement>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80061ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d161      	bne.n	800627a <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80061b6:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80061b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d25d      	bcs.n	800627a <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80061be:	2300      	movs	r3, #0
 80061c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c2:	e009      	b.n	80061d8 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	3301      	adds	r3, #1
 80061d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	429a      	cmp	r2, r3
 80061de:	d3f1      	bcc.n	80061c4 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80061e0:	e002      	b.n	80061e8 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	3301      	adds	r3, #1
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80061e8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80061ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ee:	4413      	add	r3, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fdb1 	bl	8005d58 <is_aperture>
 80061f6:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <VL53L0X_perform_ref_spad_management+0x1f2>
 80061fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	429a      	cmp	r2, r3
 8006202:	d3ee      	bcc.n	80061e2 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006204:	2301      	movs	r3, #1
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006218:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800621c:	f107 0218 	add.w	r2, r7, #24
 8006220:	9204      	str	r2, [sp, #16]
 8006222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006224:	9203      	str	r2, [sp, #12]
 8006226:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006228:	9202      	str	r2, [sp, #8]
 800622a:	9301      	str	r3, [sp, #4]
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	4623      	mov	r3, r4
 8006232:	4602      	mov	r2, r0
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fe06 	bl	8005e46 <enable_ref_spads>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006240:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006244:	2b00      	cmp	r3, #0
 8006246:	d11b      	bne.n	8006280 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800624c:	f107 0312 	add.w	r3, r7, #18
 8006250:	4619      	mov	r1, r3
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fe73 	bl	8005f3e <perform_ref_signal_measurement>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800625e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10c      	bne.n	8006280 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006266:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006268:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800626a:	429a      	cmp	r2, r3
 800626c:	d208      	bcs.n	8006280 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006278:	e002      	b.n	8006280 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627e:	e000      	b.n	8006282 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006280:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006282:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 80af 	bne.w	80063ea <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800628c:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800628e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006290:	429a      	cmp	r2, r3
 8006292:	f240 80aa 	bls.w	80063ea <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006298:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80062a6:	f107 031c 	add.w	r3, r7, #28
 80062aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ac:	4618      	mov	r0, r3
 80062ae:	f003 f973 	bl	8009598 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	461a      	mov	r2, r3
 80062b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bfb8      	it	lt
 80062be:	425b      	neglt	r3, r3
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80062c8:	e086      	b.n	80063d8 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d8:	f7ff fce0 	bl	8005c9c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d103      	bne.n	80062ec <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80062e4:	23ce      	movs	r3, #206	; 0xce
 80062e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80062ea:	e07e      	b.n	80063ea <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80062ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fd2f 	bl	8005d58 <is_aperture>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800630a:	e06e      	b.n	80063ea <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	3301      	adds	r3, #1
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800631c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800631e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fd33 	bl	8005d8c <enable_spad_bit>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800632c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10c      	bne.n	800634e <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006336:	3301      	adds	r3, #1
 8006338:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006340:	4619      	mov	r1, r3
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fd59 	bl	8005dfa <set_ref_spad_map>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800634e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006352:	2b00      	cmp	r3, #0
 8006354:	d146      	bne.n	80063e4 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006356:	f107 0312 	add.w	r3, r7, #18
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fdee 	bl	8005f3e <perform_ref_signal_measurement>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006368:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800636c:	2b00      	cmp	r3, #0
 800636e:	d13b      	bne.n	80063e8 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006370:	8a7b      	ldrh	r3, [r7, #18]
 8006372:	461a      	mov	r2, r3
 8006374:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	bfb8      	it	lt
 800637c:	425b      	neglt	r3, r3
 800637e:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006380:	8a7b      	ldrh	r3, [r7, #18]
 8006382:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006384:	429a      	cmp	r2, r3
 8006386:	d21c      	bcs.n	80063c2 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638c:	429a      	cmp	r2, r3
 800638e:	d914      	bls.n	80063ba <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006390:	f107 031c 	add.w	r3, r7, #28
 8006394:	4619      	mov	r1, r3
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fd2f 	bl	8005dfa <set_ref_spad_map>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80063a8:	f107 011c 	add.w	r1, r7, #28
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	4618      	mov	r0, r3
 80063b0:	f003 f8f2 	bl	8009598 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80063b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b6:	3b01      	subs	r3, #1
 80063b8:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c0:	e00a      	b.n	80063d8 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80063cc:	f107 031c 	add.w	r3, r7, #28
 80063d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d2:	4618      	mov	r0, r3
 80063d4:	f003 f8e0 	bl	8009598 <memcpy>
		while (!complete) {
 80063d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f43f af74 	beq.w	80062ca <VL53L0X_perform_ref_spad_management+0x2b8>
 80063e2:	e002      	b.n	80063ea <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80063e4:	bf00      	nop
 80063e6:	e000      	b.n	80063ea <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80063e8:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d115      	bne.n	800641e <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063f6:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80063fe:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800641e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006422:	4618      	mov	r0, r3
 8006424:	375c      	adds	r7, #92	; 0x5c
 8006426:	46bd      	mov	sp, r7
 8006428:	bd90      	pop	{r4, r7, pc}

0800642a <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800642a:	b590      	push	{r4, r7, lr}
 800642c:	b093      	sub	sp, #76	; 0x4c
 800642e:	af06      	add	r7, sp, #24
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	4613      	mov	r3, r2
 8006436:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006442:	23b4      	movs	r3, #180	; 0xb4
 8006444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006448:	2306      	movs	r3, #6
 800644a:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800644c:	232c      	movs	r3, #44	; 0x2c
 800644e:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006450:	2201      	movs	r2, #1
 8006452:	21ff      	movs	r1, #255	; 0xff
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f002 fb53 	bl	8008b00 <VL53L0X_WrByte>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006460:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006468:	2200      	movs	r2, #0
 800646a:	214f      	movs	r1, #79	; 0x4f
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f002 fb47 	bl	8008b00 <VL53L0X_WrByte>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006478:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006480:	222c      	movs	r2, #44	; 0x2c
 8006482:	214e      	movs	r1, #78	; 0x4e
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f002 fb3b 	bl	8008b00 <VL53L0X_WrByte>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006490:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006494:	2b00      	cmp	r3, #0
 8006496:	d107      	bne.n	80064a8 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006498:	2200      	movs	r2, #0
 800649a:	21ff      	movs	r1, #255	; 0xff
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f002 fb2f 	bl	8008b00 <VL53L0X_WrByte>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80064a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80064b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064b4:	461a      	mov	r2, r3
 80064b6:	21b6      	movs	r1, #182	; 0xb6
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f002 fb21 	bl	8008b00 <VL53L0X_WrByte>
 80064be:	4603      	mov	r3, r0
 80064c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
 80064c8:	e009      	b.n	80064de <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3f1      	bcc.n	80064ca <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80064ec:	e002      	b.n	80064f4 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	3301      	adds	r3, #1
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80064f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	4413      	add	r3, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fc2b 	bl	8005d58 <is_aperture>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <VL53L0X_set_reference_spads+0xe6>
 8006508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	d3ee      	bcc.n	80064ee <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800651c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006520:	79f9      	ldrb	r1, [r7, #7]
 8006522:	f107 0214 	add.w	r2, r7, #20
 8006526:	9204      	str	r2, [sp, #16]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	9203      	str	r2, [sp, #12]
 800652c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4623      	mov	r3, r4
 8006538:	4602      	mov	r2, r0
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fc83 	bl	8005e46 <enable_ref_spads>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006546:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10c      	bne.n	8006568 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	79fa      	ldrb	r2, [r7, #7]
 8006564:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006568:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800656c:	4618      	mov	r0, r3
 800656e:	3734      	adds	r7, #52	; 0x34
 8006570:	46bd      	mov	sp, r7
 8006572:	bd90      	pop	{r4, r7, pc}

08006574 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	2100      	movs	r1, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f002 fab1 	bl	8008b00 <VL53L0X_WrByte>
 800659e:	4603      	mov	r3, r0
 80065a0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80065a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9bf 	bl	800692e <VL53L0X_measurement_poll_for_completion>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fab6 	bl	8005b30 <VL53L0X_ClearInterruptMask>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2100      	movs	r1, #0
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f002 fa93 	bl	8008b00 <VL53L0X_WrByte>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]

	return Status;
 80065de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	4608      	mov	r0, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	461a      	mov	r2, r3
 80065f8:	4603      	mov	r3, r0
 80065fa:	70fb      	strb	r3, [r7, #3]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70bb      	strb	r3, [r7, #2]
 8006600:	4613      	mov	r3, r2
 8006602:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800660c:	2201      	movs	r2, #1
 800660e:	21ff      	movs	r1, #255	; 0xff
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f002 fa75 	bl	8008b00 <VL53L0X_WrByte>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	4313      	orrs	r3, r2
 800661e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f002 fa6b 	bl	8008b00 <VL53L0X_WrByte>
 800662a:	4603      	mov	r3, r0
 800662c:	461a      	mov	r2, r3
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	4313      	orrs	r3, r2
 8006632:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006634:	2200      	movs	r2, #0
 8006636:	21ff      	movs	r1, #255	; 0xff
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f002 fa61 	bl	8008b00 <VL53L0X_WrByte>
 800663e:	4603      	mov	r3, r0
 8006640:	461a      	mov	r2, r3
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	4313      	orrs	r3, r2
 8006646:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01e      	beq.n	800668c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800664e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	21cb      	movs	r1, #203	; 0xcb
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f002 fad2 	bl	8008c04 <VL53L0X_RdByte>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	4313      	orrs	r3, r2
 8006668:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800666a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02a      	beq.n	80066c8 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006672:	f107 030e 	add.w	r3, r7, #14
 8006676:	461a      	mov	r2, r3
 8006678:	21ee      	movs	r1, #238	; 0xee
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fac2 	bl	8008c04 <VL53L0X_RdByte>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	4313      	orrs	r3, r2
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	e01d      	b.n	80066c8 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800668c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006694:	78bb      	ldrb	r3, [r7, #2]
 8006696:	461a      	mov	r2, r3
 8006698:	21cb      	movs	r1, #203	; 0xcb
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 fa30 	bl	8008b00 <VL53L0X_WrByte>
 80066a0:	4603      	mov	r3, r0
 80066a2:	461a      	mov	r2, r3
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80066aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80066b2:	787b      	ldrb	r3, [r7, #1]
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	21ee      	movs	r1, #238	; 0xee
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f002 fa6f 	bl	8008b9c <VL53L0X_UpdateByte>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066c8:	2201      	movs	r2, #1
 80066ca:	21ff      	movs	r1, #255	; 0xff
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fa17 	bl	8008b00 <VL53L0X_WrByte>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	4313      	orrs	r3, r2
 80066da:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80066dc:	2201      	movs	r2, #1
 80066de:	2100      	movs	r1, #0
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 fa0d 	bl	8008b00 <VL53L0X_WrByte>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066f0:	2200      	movs	r2, #0
 80066f2:	21ff      	movs	r1, #255	; 0xff
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f002 fa03 	bl	8008b00 <VL53L0X_WrByte>
 80066fa:	4603      	mov	r3, r0
 80066fc:	461a      	mov	r2, r3
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	4313      	orrs	r3, r2
 8006702:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	f023 0310 	bic.w	r3, r3, #16
 800670a:	b2da      	uxtb	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	701a      	strb	r2, [r3, #0]

	return Status;
 8006710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	; 0x28
 8006720:	af04      	add	r7, sp, #16
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	460b      	mov	r3, r1
 800672c:	71fb      	strb	r3, [r7, #7]
 800672e:	4613      	mov	r3, r2
 8006730:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006746:	79bb      	ldrb	r3, [r7, #6]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006752:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006754:	2201      	movs	r2, #1
 8006756:	2101      	movs	r1, #1
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f002 f9d1 	bl	8008b00 <VL53L0X_WrByte>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800676a:	2140      	movs	r1, #64	; 0x40
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff ff01 	bl	8006574 <VL53L0X_perform_single_ref_calibration>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d115      	bne.n	80067aa <VL53L0X_perform_vhv_calibration+0x8e>
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d112      	bne.n	80067aa <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006784:	7d39      	ldrb	r1, [r7, #20]
 8006786:	7d7a      	ldrb	r2, [r7, #21]
 8006788:	2300      	movs	r3, #0
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	2301      	movs	r3, #1
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	f107 0313 	add.w	r3, r7, #19
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	460b      	mov	r3, r1
 800679c:	2101      	movs	r1, #1
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff ff23 	bl	80065ea <VL53L0X_ref_calibration_io>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75fb      	strb	r3, [r7, #23]
 80067a8:	e002      	b.n	80067b0 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80067b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d112      	bne.n	80067de <VL53L0X_perform_vhv_calibration+0xc2>
 80067b8:	79bb      	ldrb	r3, [r7, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	461a      	mov	r2, r3
 80067c2:	2101      	movs	r1, #1
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f002 f99b 	bl	8008b00 <VL53L0X_WrByte>
 80067ca:	4603      	mov	r3, r0
 80067cc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80067ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	7dba      	ldrb	r2, [r7, #22]
 80067da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80067de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b08a      	sub	sp, #40	; 0x28
 80067ee:	af04      	add	r7, sp, #16
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	4611      	mov	r1, r2
 80067f6:	461a      	mov	r2, r3
 80067f8:	460b      	mov	r3, r1
 80067fa:	71fb      	strb	r3, [r7, #7]
 80067fc:	4613      	mov	r3, r2
 80067fe:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006810:	79bb      	ldrb	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800681c:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800681e:	2202      	movs	r2, #2
 8006820:	2101      	movs	r1, #1
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f002 f96c 	bl	8008b00 <VL53L0X_WrByte>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800682c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006834:	2100      	movs	r1, #0
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7ff fe9c 	bl	8006574 <VL53L0X_perform_single_ref_calibration>
 800683c:	4603      	mov	r3, r0
 800683e:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d115      	bne.n	8006874 <VL53L0X_perform_phase_calibration+0x8a>
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d112      	bne.n	8006874 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800684e:	7d39      	ldrb	r1, [r7, #20]
 8006850:	7d7a      	ldrb	r2, [r7, #21]
 8006852:	2301      	movs	r3, #1
 8006854:	9303      	str	r3, [sp, #12]
 8006856:	2300      	movs	r3, #0
 8006858:	9302      	str	r3, [sp, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	f107 0313 	add.w	r3, r7, #19
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	460b      	mov	r3, r1
 8006866:	2101      	movs	r1, #1
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff febe 	bl	80065ea <VL53L0X_ref_calibration_io>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
 8006872:	e002      	b.n	800687a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800687a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d112      	bne.n	80068a8 <VL53L0X_perform_phase_calibration+0xbe>
 8006882:	79bb      	ldrb	r3, [r7, #6]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00f      	beq.n	80068a8 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006888:	7dbb      	ldrb	r3, [r7, #22]
 800688a:	461a      	mov	r2, r3
 800688c:	2101      	movs	r1, #1
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f002 f936 	bl	8008b00 <VL53L0X_WrByte>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7dba      	ldrb	r2, [r7, #22]
 80068a4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80068a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80068d0:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	2300      	movs	r3, #0
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ff1f 	bl	800671c <VL53L0X_perform_vhv_calibration>
 80068de:	4603      	mov	r3, r0
 80068e0:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80068e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	2300      	movs	r3, #0
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff ff7a 	bl	80067ea <VL53L0X_perform_phase_calibration>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80068fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006902:	7dbb      	ldrb	r3, [r7, #22]
 8006904:	461a      	mov	r2, r3
 8006906:	2101      	movs	r1, #1
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f002 f8f9 	bl	8008b00 <VL53L0X_WrByte>
 800690e:	4603      	mov	r3, r0
 8006910:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006912:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	7dba      	ldrb	r2, [r7, #22]
 800691e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006942:	f107 030f 	add.w	r3, r7, #15
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe fe05 	bl	8005558 <VL53L0X_GetMeasurementDataReady>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d110      	bne.n	800697c <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d00f      	beq.n	8006980 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	3301      	adds	r3, #1
 8006964:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800696c:	d302      	bcc.n	8006974 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800696e:	23f9      	movs	r3, #249	; 0xf9
 8006970:	75fb      	strb	r3, [r7, #23]
			break;
 8006972:	e006      	b.n	8006982 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 f9e3 	bl	8008d40 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800697a:	e7e2      	b.n	8006942 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006980:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	4603      	mov	r3, r0
 8006996:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	3301      	adds	r3, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80069be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069c2:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80069c4:	e002      	b.n	80069cc <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d8f8      	bhi.n	80069c6 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80069d4:	e017      	b.n	8006a06 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4413      	add	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d30b      	bcc.n	80069fa <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4413      	add	r3, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4413      	add	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e002      	b.n	8006a00 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	089b      	lsrs	r3, r3, #2
 8006a04:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e4      	bne.n	80069d6 <VL53L0X_isqrt+0x24>
	}

	return res;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006a24:	2200      	movs	r2, #0
 8006a26:	2183      	movs	r1, #131	; 0x83
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f002 f869 	bl	8008b00 <VL53L0X_WrByte>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11e      	bne.n	8006a7e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006a44:	f107 030f 	add.w	r3, r7, #15
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2183      	movs	r1, #131	; 0x83
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f002 f8d9 	bl	8008c04 <VL53L0X_RdByte>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <VL53L0X_device_read_strobe+0x5a>
 8006a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	3301      	adds	r3, #1
 8006a68:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a70:	d3e8      	bcc.n	8006a44 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a78:	d301      	bcc.n	8006a7e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006a7a:	23f9      	movs	r3, #249	; 0xf9
 8006a7c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006a7e:	2201      	movs	r2, #1
 8006a80:	2183      	movs	r1, #131	; 0x83
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f002 f83c 	bl	8008b00 <VL53L0X_WrByte>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a92:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b098      	sub	sp, #96	; 0x60
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006ace:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006ad2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006aea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aee:	2b07      	cmp	r3, #7
 8006af0:	f000 8408 	beq.w	8007304 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006af4:	2201      	movs	r2, #1
 8006af6:	2180      	movs	r1, #128	; 0x80
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 f801 	bl	8008b00 <VL53L0X_WrByte>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461a      	mov	r2, r3
 8006b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	21ff      	movs	r1, #255	; 0xff
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 fff5 	bl	8008b00 <VL53L0X_WrByte>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006b24:	2200      	movs	r2, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 ffe9 	bl	8008b00 <VL53L0X_WrByte>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006b3c:	2206      	movs	r2, #6
 8006b3e:	21ff      	movs	r1, #255	; 0xff
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 ffdd 	bl	8008b00 <VL53L0X_WrByte>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006b54:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2183      	movs	r1, #131	; 0x83
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 f851 	bl	8008c04 <VL53L0X_RdByte>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b74:	f043 0304 	orr.w	r3, r3, #4
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2183      	movs	r1, #131	; 0x83
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 ffbe 	bl	8008b00 <VL53L0X_WrByte>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006b92:	2207      	movs	r2, #7
 8006b94:	21ff      	movs	r1, #255	; 0xff
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 ffb2 	bl	8008b00 <VL53L0X_WrByte>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006baa:	2201      	movs	r2, #1
 8006bac:	2181      	movs	r1, #129	; 0x81
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 ffa6 	bl	8008b00 <VL53L0X_WrByte>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 f8bc 	bl	8008d40 <VL53L0X_PollingDelay>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	2180      	movs	r1, #128	; 0x80
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 ff90 	bl	8008b00 <VL53L0X_WrByte>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8098 	beq.w	8006d2a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bfe:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 8091 	bne.w	8006d2a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006c08:	226b      	movs	r2, #107	; 0x6b
 8006c0a:	2194      	movs	r1, #148	; 0x94
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 ff77 	bl	8008b00 <VL53L0X_WrByte>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fef9 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2190      	movs	r1, #144	; 0x90
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f002 f843 	bl	8008cc8 <VL53L0X_RdDWord>
 8006c42:	4603      	mov	r3, r0
 8006c44:	461a      	mov	r2, r3
 8006c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	0bdb      	lsrs	r3, r3, #15
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006c6c:	2224      	movs	r2, #36	; 0x24
 8006c6e:	2194      	movs	r1, #148	; 0x94
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 ff45 	bl	8008b00 <VL53L0X_WrByte>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff fec7 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2190      	movs	r1, #144	; 0x90
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f002 f811 	bl	8008cc8 <VL53L0X_RdDWord>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	0e1b      	lsrs	r3, r3, #24
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006cd2:	2225      	movs	r2, #37	; 0x25
 8006cd4:	2194      	movs	r1, #148	; 0x94
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 ff12 	bl	8008b00 <VL53L0X_WrByte>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe94 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d02:	461a      	mov	r2, r3
 8006d04:	2190      	movs	r1, #144	; 0x90
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 ffde 	bl	8008cc8 <VL53L0X_RdDWord>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	0e1b      	lsrs	r3, r3, #24
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8189 	beq.w	8007048 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006d36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d3a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 8182 	bne.w	8007048 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006d44:	2202      	movs	r2, #2
 8006d46:	2194      	movs	r1, #148	; 0x94
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fed9 	bl	8008b00 <VL53L0X_WrByte>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	461a      	mov	r2, r3
 8006d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe5b 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006d70:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006d74:	461a      	mov	r2, r3
 8006d76:	2190      	movs	r1, #144	; 0x90
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 ff43 	bl	8008c04 <VL53L0X_RdByte>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	461a      	mov	r2, r3
 8006d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006d8c:	227b      	movs	r2, #123	; 0x7b
 8006d8e:	2194      	movs	r1, #148	; 0x94
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 feb5 	bl	8008b00 <VL53L0X_WrByte>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff fe37 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006db8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2190      	movs	r1, #144	; 0x90
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 ff1f 	bl	8008c04 <VL53L0X_RdByte>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006dd4:	2277      	movs	r2, #119	; 0x77
 8006dd6:	2194      	movs	r1, #148	; 0x94
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fe91 	bl	8008b00 <VL53L0X_WrByte>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff fe13 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461a      	mov	r2, r3
 8006df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e04:	461a      	mov	r2, r3
 8006e06:	2190      	movs	r1, #144	; 0x90
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 ff5d 	bl	8008cc8 <VL53L0X_RdDWord>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	461a      	mov	r2, r3
 8006e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	0e5b      	lsrs	r3, r3, #25
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	0c9b      	lsrs	r3, r3, #18
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	0adb      	lsrs	r3, r3, #11
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006e66:	2278      	movs	r2, #120	; 0x78
 8006e68:	2194      	movs	r1, #148	; 0x94
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fe48 	bl	8008b00 <VL53L0X_WrByte>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fdca 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e96:	461a      	mov	r2, r3
 8006e98:	2190      	movs	r1, #144	; 0x90
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 ff14 	bl	8008cc8 <VL53L0X_RdDWord>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	0f5b      	lsrs	r3, r3, #29
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006eba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ebe:	4413      	add	r3, r2
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	0d9b      	lsrs	r3, r3, #22
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	0bdb      	lsrs	r3, r3, #15
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	019b      	lsls	r3, r3, #6
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006f0e:	2279      	movs	r2, #121	; 0x79
 8006f10:	2194      	movs	r1, #148	; 0x94
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fdf4 	bl	8008b00 <VL53L0X_WrByte>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fd76 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f3e:	461a      	mov	r2, r3
 8006f40:	2190      	movs	r1, #144	; 0x90
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fec0 	bl	8008cc8 <VL53L0X_RdDWord>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	0e9b      	lsrs	r3, r3, #26
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f66:	4413      	add	r3, r2
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	0cdb      	lsrs	r3, r3, #19
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	0b1b      	lsrs	r3, r3, #12
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006fa8:	227a      	movs	r2, #122	; 0x7a
 8006faa:	2194      	movs	r1, #148	; 0x94
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fda7 	bl	8008b00 <VL53L0X_WrByte>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fd29 	bl	8006a18 <VL53L0X_device_read_strobe>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2190      	movs	r1, #144	; 0x90
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fe73 	bl	8008cc8 <VL53L0X_RdDWord>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	0f9b      	lsrs	r3, r3, #30
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007000:	4413      	add	r3, r2
 8007002:	b2db      	uxtb	r3, r3
 8007004:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	0ddb      	lsrs	r3, r3, #23
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007010:	b2db      	uxtb	r3, r3
 8007012:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	0c1b      	lsrs	r3, r3, #16
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701e:	b2db      	uxtb	r3, r3
 8007020:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	0a5b      	lsrs	r3, r3, #9
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703c:	b2db      	uxtb	r3, r3
 800703e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007042:	2300      	movs	r3, #0
 8007044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80f1 	beq.w	8007236 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007054:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007058:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 80ea 	bne.w	8007236 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007062:	227b      	movs	r2, #123	; 0x7b
 8007064:	2194      	movs	r1, #148	; 0x94
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fd4a 	bl	8008b00 <VL53L0X_WrByte>
 800706c:	4603      	mov	r3, r0
 800706e:	461a      	mov	r2, r3
 8007070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007074:	4313      	orrs	r3, r2
 8007076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff fccc 	bl	8006a18 <VL53L0X_device_read_strobe>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007088:	4313      	orrs	r3, r2
 800708a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800708e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007092:	461a      	mov	r2, r3
 8007094:	2190      	movs	r1, #144	; 0x90
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fe16 	bl	8008cc8 <VL53L0X_RdDWord>
 800709c:	4603      	mov	r3, r0
 800709e:	461a      	mov	r2, r3
 80070a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80070aa:	227c      	movs	r2, #124	; 0x7c
 80070ac:	2194      	movs	r1, #148	; 0x94
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 fd26 	bl	8008b00 <VL53L0X_WrByte>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070bc:	4313      	orrs	r3, r2
 80070be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fca8 	bl	8006a18 <VL53L0X_device_read_strobe>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80070d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070da:	461a      	mov	r2, r3
 80070dc:	2190      	movs	r1, #144	; 0x90
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fdf2 	bl	8008cc8 <VL53L0X_RdDWord>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80070f2:	2273      	movs	r2, #115	; 0x73
 80070f4:	2194      	movs	r1, #148	; 0x94
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fd02 	bl	8008b00 <VL53L0X_WrByte>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007104:	4313      	orrs	r3, r2
 8007106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fc84 	bl	8006a18 <VL53L0X_device_read_strobe>
 8007110:	4603      	mov	r3, r0
 8007112:	461a      	mov	r2, r3
 8007114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007118:	4313      	orrs	r3, r2
 800711a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800711e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007122:	461a      	mov	r2, r3
 8007124:	2190      	movs	r1, #144	; 0x90
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fdce 	bl	8008cc8 <VL53L0X_RdDWord>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007134:	4313      	orrs	r3, r2
 8007136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800713e:	b29b      	uxth	r3, r3
 8007140:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007142:	2274      	movs	r2, #116	; 0x74
 8007144:	2194      	movs	r1, #148	; 0x94
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fcda 	bl	8008b00 <VL53L0X_WrByte>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007154:	4313      	orrs	r3, r2
 8007156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fc5c 	bl	8006a18 <VL53L0X_device_read_strobe>
 8007160:	4603      	mov	r3, r0
 8007162:	461a      	mov	r2, r3
 8007164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007168:	4313      	orrs	r3, r2
 800716a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800716e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007172:	461a      	mov	r2, r3
 8007174:	2190      	movs	r1, #144	; 0x90
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fda6 	bl	8008cc8 <VL53L0X_RdDWord>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007184:	4313      	orrs	r3, r2
 8007186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800718e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007190:	4313      	orrs	r3, r2
 8007192:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007194:	2275      	movs	r2, #117	; 0x75
 8007196:	2194      	movs	r1, #148	; 0x94
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fcb1 	bl	8008b00 <VL53L0X_WrByte>
 800719e:	4603      	mov	r3, r0
 80071a0:	461a      	mov	r2, r3
 80071a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fc33 	bl	8006a18 <VL53L0X_device_read_strobe>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80071c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071c4:	461a      	mov	r2, r3
 80071c6:	2190      	movs	r1, #144	; 0x90
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fd7d 	bl	8008cc8 <VL53L0X_RdDWord>
 80071ce:	4603      	mov	r3, r0
 80071d0:	461a      	mov	r2, r3
 80071d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80071e4:	2276      	movs	r2, #118	; 0x76
 80071e6:	2194      	movs	r1, #148	; 0x94
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fc89 	bl	8008b00 <VL53L0X_WrByte>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461a      	mov	r2, r3
 80071f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff fc0b 	bl	8006a18 <VL53L0X_device_read_strobe>
 8007202:	4603      	mov	r3, r0
 8007204:	461a      	mov	r2, r3
 8007206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800720a:	4313      	orrs	r3, r2
 800720c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007214:	461a      	mov	r2, r3
 8007216:	2190      	movs	r1, #144	; 0x90
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 fd55 	bl	8008cc8 <VL53L0X_RdDWord>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007226:	4313      	orrs	r3, r2
 8007228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007232:	4313      	orrs	r3, r2
 8007234:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007236:	2200      	movs	r2, #0
 8007238:	2181      	movs	r1, #129	; 0x81
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fc60 	bl	8008b00 <VL53L0X_WrByte>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007248:	4313      	orrs	r3, r2
 800724a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800724e:	2206      	movs	r2, #6
 8007250:	21ff      	movs	r1, #255	; 0xff
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fc54 	bl	8008b00 <VL53L0X_WrByte>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007260:	4313      	orrs	r3, r2
 8007262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007266:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800726a:	461a      	mov	r2, r3
 800726c:	2183      	movs	r1, #131	; 0x83
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fcc8 	bl	8008c04 <VL53L0X_RdByte>
 8007274:	4603      	mov	r3, r0
 8007276:	461a      	mov	r2, r3
 8007278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800727c:	4313      	orrs	r3, r2
 800727e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007286:	f023 0304 	bic.w	r3, r3, #4
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	2183      	movs	r1, #131	; 0x83
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fc35 	bl	8008b00 <VL53L0X_WrByte>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800729e:	4313      	orrs	r3, r2
 80072a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80072a4:	2201      	movs	r2, #1
 80072a6:	21ff      	movs	r1, #255	; 0xff
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 fc29 	bl	8008b00 <VL53L0X_WrByte>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80072bc:	2201      	movs	r2, #1
 80072be:	2100      	movs	r1, #0
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fc1d 	bl	8008b00 <VL53L0X_WrByte>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072d4:	2200      	movs	r2, #0
 80072d6:	21ff      	movs	r1, #255	; 0xff
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fc11 	bl	8008b00 <VL53L0X_WrByte>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80072ec:	2200      	movs	r2, #0
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fc05 	bl	8008b00 <VL53L0X_WrByte>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072fe:	4313      	orrs	r3, r2
 8007300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007304:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 808f 	bne.w	800742c <VL53L0X_get_info_from_device+0x98e>
 800730e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007312:	2b07      	cmp	r3, #7
 8007314:	f000 808a 	beq.w	800742c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d024      	beq.n	800736c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007322:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007326:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11e      	bne.n	800736c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007334:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800733e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007342:	2300      	movs	r3, #0
 8007344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007346:	e00e      	b.n	8007366 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007348:	f107 0208 	add.w	r2, r7, #8
 800734c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734e:	4413      	add	r3, r2
 8007350:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007356:	4413      	add	r3, r2
 8007358:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800735c:	460a      	mov	r2, r1
 800735e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	3301      	adds	r3, #1
 8007364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007368:	2b05      	cmp	r3, #5
 800736a:	dded      	ble.n	8007348 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d018      	beq.n	80073a8 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007376:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800737a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800737e:	2b00      	cmp	r3, #0
 8007380:	d112      	bne.n	80073a8 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007382:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800738c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	33f3      	adds	r3, #243	; 0xf3
 800739a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	4619      	mov	r1, r3
 80073a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a4:	f002 f8f0 	bl	8009588 <strcpy>

		}

		if (((option & 4) == 4) &&
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d030      	beq.n	8007414 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80073b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073b6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d12a      	bne.n	8007414 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80073ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d0:	025b      	lsls	r3, r3, #9
 80073d2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80073e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d011      	beq.n	800740c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80073e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80073f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80073fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007400:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007404:	425b      	negs	r3, r3
 8007406:	b29b      	uxth	r3, r3
 8007408:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800740c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007414:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	4313      	orrs	r3, r2
 800741c:	b2db      	uxtb	r3, r3
 800741e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007422:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800742c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007430:	4618      	mov	r0, r3
 8007432:	3760      	adds	r7, #96	; 0x60
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007444:	f240 6277 	movw	r2, #1655	; 0x677
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007450:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007454:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	fb02 f303 	mul.w	r3, r2, r3
 8007464:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007466:	68bb      	ldr	r3, [r7, #8]
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr

08007472 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007472:	b480      	push	{r7}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d017      	beq.n	80074bc <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3b01      	subs	r3, #1
 8007490:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007492:	e005      	b.n	80074a0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800749a:	89fb      	ldrh	r3, [r7, #14]
 800749c:	3301      	adds	r3, #1
 800749e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f4      	bne.n	8007494 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80074b8:	4413      	add	r3, r2
 80074ba:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80074bc:	8afb      	ldrh	r3, [r7, #22]

}
 80074be:	4618      	mov	r0, r3
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	0a12      	lsrs	r2, r2, #8
 80074de:	b292      	uxth	r2, r2
 80074e0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074e2:	3301      	adds	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr
	...

080074f4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	4619      	mov	r1, r3
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff ff94 	bl	8007438 <VL53L0X_calc_macro_period_ps>
 8007510:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007518:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <VL53L0X_calc_timeout_mclks+0x50>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	099b      	lsrs	r3, r3, #6
 8007520:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007528:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	441a      	add	r2, r3
	timeout_period_mclks =
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	fbb2 f3f3 	udiv	r3, r2, r3
 8007538:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800753a:	69fb      	ldr	r3, [r7, #28]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	10624dd3 	.word	0x10624dd3

08007548 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	807b      	strh	r3, [r7, #2]
 8007554:	4613      	mov	r3, r2
 8007556:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800755c:	787b      	ldrb	r3, [r7, #1]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ff69 	bl	8007438 <VL53L0X_calc_macro_period_ps>
 8007566:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800756e:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <VL53L0X_calc_timeout_us+0x50>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	099b      	lsrs	r3, r3, #6
 8007576:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007584:	4a04      	ldr	r2, [pc, #16]	; (8007598 <VL53L0X_calc_timeout_us+0x50>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800758e:	697b      	ldr	r3, [r7, #20]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	10624dd3 	.word	0x10624dd3

0800759c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	; 0x30
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	460b      	mov	r3, r1
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <get_sequence_step_timeout+0x38>
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d002      	beq.n	80075d4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d128      	bne.n	8007626 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80075d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80075d8:	461a      	mov	r2, r3
 80075da:	2100      	movs	r1, #0
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7fd fa9c 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80075e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80075f0:	f107 0320 	add.w	r3, r7, #32
 80075f4:	461a      	mov	r2, r3
 80075f6:	2146      	movs	r1, #70	; 0x46
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fb03 	bl	8008c04 <VL53L0X_RdByte>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007604:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007608:	b29b      	uxth	r3, r3
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ff5c 	bl	80074c8 <VL53L0X_decode_timeout>
 8007610:	4603      	mov	r3, r0
 8007612:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007614:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff ff93 	bl	8007548 <VL53L0X_calc_timeout_us>
 8007622:	62b8      	str	r0, [r7, #40]	; 0x28
 8007624:	e092      	b.n	800774c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007626:	7afb      	ldrb	r3, [r7, #11]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d135      	bne.n	8007698 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800762c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007630:	461a      	mov	r2, r3
 8007632:	2100      	movs	r1, #0
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7fd fa70 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007640:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 8081 	bne.w	800774c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800764a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800764e:	461a      	mov	r2, r3
 8007650:	2100      	movs	r1, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7fd fa61 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800765e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007666:	f107 031e 	add.w	r3, r7, #30
 800766a:	461a      	mov	r2, r3
 800766c:	2151      	movs	r1, #81	; 0x51
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f001 faf2 	bl	8008c58 <VL53L0X_RdWord>
 8007674:	4603      	mov	r3, r0
 8007676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800767a:	8bfb      	ldrh	r3, [r7, #30]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff ff23 	bl	80074c8 <VL53L0X_decode_timeout>
 8007682:	4603      	mov	r3, r0
 8007684:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007686:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800768a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800768c:	4619      	mov	r1, r3
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ff5a 	bl	8007548 <VL53L0X_calc_timeout_us>
 8007694:	62b8      	str	r0, [r7, #40]	; 0x28
 8007696:	e059      	b.n	800774c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d156      	bne.n	800774c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800769e:	f107 0314 	add.w	r3, r7, #20
 80076a2:	4619      	mov	r1, r3
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7fd fb41 	bl	8004d2c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01d      	beq.n	80076f0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80076b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80076b8:	461a      	mov	r2, r3
 80076ba:	2100      	movs	r1, #0
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7fd fa2c 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80076c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10f      	bne.n	80076f0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80076d0:	f107 031e 	add.w	r3, r7, #30
 80076d4:	461a      	mov	r2, r3
 80076d6:	2151      	movs	r1, #81	; 0x51
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 fabd 	bl	8008c58 <VL53L0X_RdWord>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80076e4:	8bfb      	ldrh	r3, [r7, #30]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff feee 	bl	80074c8 <VL53L0X_decode_timeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80076f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80076f8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80076fc:	461a      	mov	r2, r3
 80076fe:	2101      	movs	r1, #1
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7fd fa0a 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 8007706:	4603      	mov	r3, r0
 8007708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800770c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007714:	f107 031c 	add.w	r3, r7, #28
 8007718:	461a      	mov	r2, r3
 800771a:	2171      	movs	r1, #113	; 0x71
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f001 fa9b 	bl	8008c58 <VL53L0X_RdWord>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007728:	8bbb      	ldrh	r3, [r7, #28]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fecc 	bl	80074c8 <VL53L0X_decode_timeout>
 8007730:	4603      	mov	r3, r0
 8007732:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007734:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007736:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800773c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007742:	4619      	mov	r1, r3
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff feff 	bl	8007548 <VL53L0X_calc_timeout_us>
 800774a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007750:	601a      	str	r2, [r3, #0]

	return Status;
 8007752:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007756:	4618      	mov	r0, r3
 8007758:	3730      	adds	r7, #48	; 0x30
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b08a      	sub	sp, #40	; 0x28
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	460b      	mov	r3, r1
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <set_sequence_step_timeout+0x26>
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d002      	beq.n	8007784 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d138      	bne.n	80077f6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007784:	f107 031b 	add.w	r3, r7, #27
 8007788:	461a      	mov	r2, r3
 800778a:	2100      	movs	r1, #0
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7fd f9c4 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11a      	bne.n	80077d6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80077a0:	7efb      	ldrb	r3, [r7, #27]
 80077a2:	461a      	mov	r2, r3
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7ff fea4 	bl	80074f4 <VL53L0X_calc_timeout_mclks>
 80077ac:	4603      	mov	r3, r0
 80077ae:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80077b0:	8bbb      	ldrh	r3, [r7, #28]
 80077b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b6:	d903      	bls.n	80077c0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80077b8:	23ff      	movs	r3, #255	; 0xff
 80077ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077be:	e004      	b.n	80077ca <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80077c0:	8bbb      	ldrh	r3, [r7, #28]
 80077c2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80077c4:	3b01      	subs	r3, #1
 80077c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80077ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80077d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 80ab 	bne.w	8007936 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80077e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077e4:	461a      	mov	r2, r3
 80077e6:	2146      	movs	r1, #70	; 0x46
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f001 f989 	bl	8008b00 <VL53L0X_WrByte>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80077f4:	e09f      	b.n	8007936 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d135      	bne.n	8007868 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80077fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11b      	bne.n	800783c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007804:	f107 031b 	add.w	r3, r7, #27
 8007808:	461a      	mov	r2, r3
 800780a:	2100      	movs	r1, #0
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7fd f984 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007818:	7efb      	ldrb	r3, [r7, #27]
 800781a:	461a      	mov	r2, r3
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff fe68 	bl	80074f4 <VL53L0X_calc_timeout_mclks>
 8007824:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007826:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fe21 	bl	8007472 <VL53L0X_encode_timeout>
 8007830:	4603      	mov	r3, r0
 8007832:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007834:	8b3a      	ldrh	r2, [r7, #24]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800783c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007840:	2b00      	cmp	r3, #0
 8007842:	d108      	bne.n	8007856 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007844:	8b3b      	ldrh	r3, [r7, #24]
 8007846:	461a      	mov	r2, r3
 8007848:	2151      	movs	r1, #81	; 0x51
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f001 f97c 	bl	8008b48 <VL53L0X_WrWord>
 8007850:	4603      	mov	r3, r0
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007856:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800785a:	2b00      	cmp	r3, #0
 800785c:	d16b      	bne.n	8007936 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007866:	e066      	b.n	8007936 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	2b04      	cmp	r3, #4
 800786c:	d160      	bne.n	8007930 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800786e:	f107 0310 	add.w	r3, r7, #16
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7fd fa59 	bl	8004d2c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800787e:	7cfb      	ldrb	r3, [r7, #19]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01d      	beq.n	80078c0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007884:	f107 031b 	add.w	r3, r7, #27
 8007888:	461a      	mov	r2, r3
 800788a:	2100      	movs	r1, #0
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7fd f944 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10f      	bne.n	80078c0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80078a0:	f107 0318 	add.w	r3, r7, #24
 80078a4:	461a      	mov	r2, r3
 80078a6:	2151      	movs	r1, #81	; 0x51
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f001 f9d5 	bl	8008c58 <VL53L0X_RdWord>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80078b4:	8b3b      	ldrh	r3, [r7, #24]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fe06 	bl	80074c8 <VL53L0X_decode_timeout>
 80078bc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80078be:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80078c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80078c8:	f107 031b 	add.w	r3, r7, #27
 80078cc:	461a      	mov	r2, r3
 80078ce:	2101      	movs	r1, #1
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7fd f922 	bl	8004b1a <VL53L0X_GetVcselPulsePeriod>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80078dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d128      	bne.n	8007936 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80078e4:	7efb      	ldrb	r3, [r7, #27]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fe02 	bl	80074f4 <VL53L0X_calc_timeout_mclks>
 80078f0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80078f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	4413      	add	r3, r2
 80078f8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80078fa:	6a38      	ldr	r0, [r7, #32]
 80078fc:	f7ff fdb9 	bl	8007472 <VL53L0X_encode_timeout>
 8007900:	4603      	mov	r3, r0
 8007902:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007908:	2b00      	cmp	r3, #0
 800790a:	d108      	bne.n	800791e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800790c:	8bfb      	ldrh	r3, [r7, #30]
 800790e:	461a      	mov	r2, r3
 8007910:	2171      	movs	r1, #113	; 0x71
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f001 f918 	bl	8008b48 <VL53L0X_WrWord>
 8007918:	4603      	mov	r3, r0
 800791a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800791e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800792e:	e002      	b.n	8007936 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007930:	23fc      	movs	r3, #252	; 0xfc
 8007932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	460b      	mov	r3, r1
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007950:	2300      	movs	r3, #0
 8007952:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800795a:	2b01      	cmp	r3, #1
 800795c:	d00a      	beq.n	8007974 <VL53L0X_get_vcsel_pulse_period+0x32>
 800795e:	e013      	b.n	8007988 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007960:	f107 0316 	add.w	r3, r7, #22
 8007964:	461a      	mov	r2, r3
 8007966:	2150      	movs	r1, #80	; 0x50
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f001 f94b 	bl	8008c04 <VL53L0X_RdByte>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007972:	e00b      	b.n	800798c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007974:	f107 0316 	add.w	r3, r7, #22
 8007978:	461a      	mov	r2, r3
 800797a:	2170      	movs	r1, #112	; 0x70
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f001 f941 	bl	8008c04 <VL53L0X_RdByte>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007986:	e001      	b.n	800798c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007988:	23fc      	movs	r3, #252	; 0xfc
 800798a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800798c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d107      	bne.n	80079a4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007994:	7dbb      	ldrb	r3, [r7, #22]
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fff9 	bl	800698e <VL53L0X_decode_vcsel_period>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	701a      	strb	r2, [r3, #0]

	return Status;
 80079a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b092      	sub	sp, #72	; 0x48
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80079c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80079c4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80079c6:	f240 7376 	movw	r3, #1910	; 0x776
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80079cc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80079d2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80079d8:	f240 234e 	movw	r3, #590	; 0x24e
 80079dc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80079de:	f240 23b2 	movw	r3, #690	; 0x2b2
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80079e4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80079e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80079ea:	f240 2326 	movw	r3, #550	; 0x226
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80079f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80079f8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d205      	bcs.n	8007a12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a06:	23fc      	movs	r3, #252	; 0xfc
 8007a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8007a0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007a10:	e0aa      	b.n	8007b68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007a1e:	f107 0314 	add.w	r3, r7, #20
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fd f981 	bl	8004d2c <VL53L0X_GetSequenceStepEnables>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007a30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d15b      	bne.n	8007af0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007a38:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007a3e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007a44:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d052      	beq.n	8007af0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007a4a:	f107 0310 	add.w	r3, r7, #16
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2102      	movs	r1, #2
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fda2 	bl	800759c <get_sequence_step_timeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007a5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007a66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007a6a:	e07d      	b.n	8007b68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007a6c:	7d3b      	ldrb	r3, [r7, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00f      	beq.n	8007a92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007a72:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a76:	4413      	add	r3, r2
 8007a78:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d204      	bcs.n	8007a8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	643b      	str	r3, [r7, #64]	; 0x40
 8007a8a:	e002      	b.n	8007a92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a8c:	23fc      	movs	r3, #252	; 0xfc
 8007a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007a92:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007a9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007a9e:	e063      	b.n	8007b68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007aa0:	7dbb      	ldrb	r3, [r7, #22]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d011      	beq.n	8007aca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	4413      	add	r3, r2
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d204      	bcs.n	8007ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac0:	e016      	b.n	8007af0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ac2:	23fc      	movs	r3, #252	; 0xfc
 8007ac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ac8:	e012      	b.n	8007af0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007aca:	7d7b      	ldrb	r3, [r7, #21]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00f      	beq.n	8007af0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ad4:	4413      	add	r3, r2
 8007ad6:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d204      	bcs.n	8007aea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007ae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ae8:	e002      	b.n	8007af0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007aea:	23fc      	movs	r3, #252	; 0xfc
 8007aec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007af0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007af8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007afc:	e034      	b.n	8007b68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d019      	beq.n	8007b38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff fd45 	bl	800759c <get_sequence_step_timeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1c:	4413      	add	r3, r2
 8007b1e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d204      	bcs.n	8007b32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b30:	e002      	b.n	8007b38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b32:	23fc      	movs	r3, #252	; 0xfc
 8007b34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007b38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d111      	bne.n	8007b64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007b40:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b50:	2104      	movs	r1, #4
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fe03 	bl	800775e <set_sequence_step_timeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007b64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3748      	adds	r7, #72	; 0x48
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b090      	sub	sp, #64	; 0x40
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007b80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007b84:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007b86:	f240 7376 	movw	r3, #1910	; 0x776
 8007b8a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007b8c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007b92:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007b96:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007b98:	f240 234e 	movw	r3, #590	; 0x24e
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007b9e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007ba4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007baa:	f240 2326 	movw	r3, #550	; 0x226
 8007bae:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb8:	441a      	add	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007bbe:	f107 0318 	add.w	r3, r7, #24
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fd f8b1 	bl	8004d2c <VL53L0X_GetSequenceStepEnables>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007bd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007bd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bdc:	e075      	b.n	8007cca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007bde:	7e3b      	ldrb	r3, [r7, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007be4:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007bea:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d030      	beq.n	8007c52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fccf 	bl	800759c <get_sequence_step_timeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007c04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d122      	bne.n	8007c52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007c0c:	7e3b      	ldrb	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007c16:	6939      	ldr	r1, [r7, #16]
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007c1c:	441a      	add	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007c22:	7ebb      	ldrb	r3, [r7, #26]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d009      	beq.n	8007c3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007c2c:	6939      	ldr	r1, [r7, #16]
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	440b      	add	r3, r1
 8007c32:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007c34:	441a      	add	r2, r3
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e00a      	b.n	8007c52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007c3c:	7e7b      	ldrb	r3, [r7, #25]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007c46:	6939      	ldr	r1, [r7, #16]
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007c4c:	441a      	add	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d114      	bne.n	8007c84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007c5a:	7efb      	ldrb	r3, [r7, #27]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d011      	beq.n	8007c84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007c60:	f107 030c 	add.w	r3, r7, #12
 8007c64:	461a      	mov	r2, r3
 8007c66:	2103      	movs	r1, #3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fc97 	bl	800759c <get_sequence_step_timeout>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007c78:	68f9      	ldr	r1, [r7, #12]
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007c7e:	441a      	add	r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d114      	bne.n	8007cb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007c8c:	7f3b      	ldrb	r3, [r7, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d011      	beq.n	8007cb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	461a      	mov	r2, r3
 8007c98:	2104      	movs	r1, #4
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fc7e 	bl	800759c <get_sequence_step_timeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007caa:	6979      	ldr	r1, [r7, #20]
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007cb0:	441a      	add	r2, r3
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3740      	adds	r7, #64	; 0x40
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007ce6:	e0c6      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	4413      	add	r3, r2
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007cf8:	7cfb      	ldrb	r3, [r7, #19]
 8007cfa:	2bff      	cmp	r3, #255	; 0xff
 8007cfc:	f040 808d 	bne.w	8007e1a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	747b      	strb	r3, [r7, #17]
			Index++;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007d10:	7c7b      	ldrb	r3, [r7, #17]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d87e      	bhi.n	8007e14 <VL53L0X_load_tuning_settings+0x140>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <VL53L0X_load_tuning_settings+0x48>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d67 	.word	0x08007d67
 8007d24:	08007da1 	.word	0x08007da1
 8007d28:	08007ddb 	.word	0x08007ddb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	4413      	add	r3, r2
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	743b      	strb	r3, [r7, #16]
				Index++;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4413      	add	r3, r2
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007d4c:	7c3b      	ldrb	r3, [r7, #16]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4413      	add	r3, r2
 8007d5a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	89ba      	ldrh	r2, [r7, #12]
 8007d60:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007d64:	e087      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3301      	adds	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	3301      	adds	r3, #1
 8007d84:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007d86:	7c3b      	ldrb	r3, [r7, #16]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4413      	add	r3, r2
 8007d94:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	89ba      	ldrh	r2, [r7, #12]
 8007d9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007d9e:	e06a      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	743b      	strb	r3, [r7, #16]
				Index++;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	3301      	adds	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007dc0:	7c3b      	ldrb	r3, [r7, #16]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	89ba      	ldrh	r2, [r7, #12]
 8007dd4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007dd8:	e04d      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	4413      	add	r3, r2
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	743b      	strb	r3, [r7, #16]
				Index++;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	3301      	adds	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	4413      	add	r3, r2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	3301      	adds	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007dfa:	7c3b      	ldrb	r3, [r7, #16]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4413      	add	r3, r2
 8007e08:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	89ba      	ldrh	r2, [r7, #12]
 8007e0e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8007e12:	e030      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e14:	23fc      	movs	r3, #252	; 0xfc
 8007e16:	77fb      	strb	r3, [r7, #31]
 8007e18:	e02d      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007e1a:	7cfb      	ldrb	r3, [r7, #19]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d828      	bhi.n	8007e72 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007e30:	2300      	movs	r3, #0
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	e00f      	b.n	8007e56 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	7819      	ldrb	r1, [r3, #0]
 8007e3e:	f107 0208 	add.w	r2, r7, #8
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	4413      	add	r3, r2
 8007e46:	460a      	mov	r2, r1
 8007e48:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	7cfb      	ldrb	r3, [r7, #19]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	dbeb      	blt.n	8007e36 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007e5e:	7cfb      	ldrb	r3, [r7, #19]
 8007e60:	f107 0208 	add.w	r2, r7, #8
 8007e64:	7cb9      	ldrb	r1, [r7, #18]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fdee 	bl	8008a48 <VL53L0X_WriteMulti>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e001      	b.n	8007e76 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e72:	23fc      	movs	r3, #252	; 0xfc
 8007e74:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <VL53L0X_load_tuning_settings+0x1b8>
 8007e82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f43f af2e 	beq.w	8007ce8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007eae:	f107 0313 	add.w	r3, r7, #19
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7fc ffc5 	bl	8004e44 <VL53L0X_GetXTalkCompensationEnable>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007ebe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d111      	bne.n	8007eea <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007ec6:	7cfb      	ldrb	r3, [r7, #19]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	8a9b      	ldrh	r3, [r3, #20]
 8007ed6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	fb02 f303 	mul.w	r3, r2, r3
 8007ede:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3380      	adds	r3, #128	; 0x80
 8007ee4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b086      	sub	sp, #24
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007f0e:	f107 0310 	add.w	r3, r7, #16
 8007f12:	461a      	mov	r2, r3
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff ffbe 	bl	8007e98 <VL53L0X_get_total_xtalk_rate>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d105      	bne.n	8007f34 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	441a      	add	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]

	return Status;
 8007f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b09a      	sub	sp, #104	; 0x68
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007f4e:	2312      	movs	r3, #18
 8007f50:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f56:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007f58:	2342      	movs	r3, #66	; 0x42
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007f5c:	2306      	movs	r3, #6
 8007f5e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007f60:	2307      	movs	r3, #7
 8007f62:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007f78:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f86:	3380      	adds	r3, #128	; 0x80
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f90:	fb02 f303 	mul.w	r3, r2, r3
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01a      	beq.n	8007fd6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fac:	4413      	add	r3, r2
 8007fae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007fb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007fba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	4413      	add	r3, r2
 8007fc2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc6:	fb03 f303 	mul.w	r3, r3, r3
 8007fca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007fd2:	0c1b      	lsrs	r3, r3, #16
 8007fd4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	fb03 f303 	mul.w	r3, r3, r3
 8007ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ffe:	085a      	lsrs	r2, r3, #1
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	441a      	add	r2, r3
 8008004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008010:	fb02 f303 	mul.w	r3, r2, r3
 8008014:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801c:	d302      	bcc.n	8008024 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800801e:	4b54      	ldr	r3, [pc, #336]	; (8008170 <VL53L0X_calc_dmax+0x230>)
 8008020:	663b      	str	r3, [r7, #96]	; 0x60
 8008022:	e015      	b.n	8008050 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008026:	085a      	lsrs	r2, r3, #1
 8008028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800802a:	441a      	add	r2, r3
 800802c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008038:	fb02 f303 	mul.w	r3, r2, r3
 800803c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800803e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008040:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008044:	0c1b      	lsrs	r3, r3, #16
 8008046:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800804a:	fb03 f303 	mul.w	r3, r3, r3
 800804e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008052:	039b      	lsls	r3, r3, #14
 8008054:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008058:	4a46      	ldr	r2, [pc, #280]	; (8008174 <VL53L0X_calc_dmax+0x234>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	099b      	lsrs	r3, r3, #6
 8008060:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	fb03 f303 	mul.w	r3, r3, r3
 8008068:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800806a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806c:	fb03 f303 	mul.w	r3, r3, r3
 8008070:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	3308      	adds	r3, #8
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800807a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008084:	4613      	mov	r3, r2
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	4413      	add	r3, r2
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008094:	0b9b      	lsrs	r3, r3, #14
 8008096:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809c:	4413      	add	r3, r2
 800809e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80080a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080a2:	085b      	lsrs	r3, r3, #1
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	039b      	lsls	r3, r3, #14
 80080b8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	4413      	add	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080de:	4a25      	ldr	r2, [pc, #148]	; (8008174 <VL53L0X_calc_dmax+0x234>)
 80080e0:	fba2 2303 	umull	r2, r3, r2, r3
 80080e4:	099b      	lsrs	r3, r3, #6
 80080e6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080f4:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <VL53L0X_calc_dmax+0x234>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80080fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008100:	3380      	adds	r3, #128	; 0x80
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d008      	beq.n	800811e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	085a      	lsrs	r2, r3, #1
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	441a      	add	r2, r3
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	fbb2 f3f3 	udiv	r3, r2, r3
 800811a:	65bb      	str	r3, [r7, #88]	; 0x58
 800811c:	e001      	b.n	8008122 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008122:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008124:	f7fe fc45 	bl	80069b2 <VL53L0X_isqrt>
 8008128:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	085a      	lsrs	r2, r3, #1
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	441a      	add	r2, r3
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008140:	e001      	b.n	8008146 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008146:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008148:	f7fe fc33 	bl	80069b2 <VL53L0X_isqrt>
 800814c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800814e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008158:	429a      	cmp	r2, r3
 800815a:	d902      	bls.n	8008162 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800815c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800815e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008160:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008162:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008166:	4618      	mov	r0, r3
 8008168:	3768      	adds	r7, #104	; 0x68
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	fff00000 	.word	0xfff00000
 8008174:	10624dd3 	.word	0x10624dd3

08008178 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b0b4      	sub	sp, #208	; 0xd0
 800817c:	af04      	add	r7, sp, #16
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008186:	f44f 7348 	mov.w	r3, #800	; 0x320
 800818a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800818e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008196:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800819a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800819e:	f241 235c 	movw	r3, #4700	; 0x125c
 80081a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80081a6:	4b9e      	ldr	r3, [pc, #632]	; (8008420 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80081a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80081ac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80081b0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80081b2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80081b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80081be:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80081c0:	4b98      	ldr	r3, [pc, #608]	; (8008424 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80081c2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80081c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80081ca:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80081ce:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80081d0:	f240 6377 	movw	r3, #1655	; 0x677
 80081d4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80081f8:	f107 0310 	add.w	r3, r7, #16
 80081fc:	461a      	mov	r2, r3
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fe78 	bl	8007ef6 <VL53L0X_get_total_signal_rate>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	461a      	mov	r2, r3
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fe3f 	bl	8007e98 <VL53L0X_get_total_xtalk_rate>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008226:	fb02 f303 	mul.w	r3, r2, r3
 800822a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800822c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800822e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008232:	0c1b      	lsrs	r3, r3, #16
 8008234:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800823c:	fb02 f303 	mul.w	r3, r2, r3
 8008240:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008244:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824a:	429a      	cmp	r2, r3
 800824c:	d902      	bls.n	8008254 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800824e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008250:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008254:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008258:	2b00      	cmp	r3, #0
 800825a:	d168      	bne.n	800832e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800826c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008270:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008274:	461a      	mov	r2, r3
 8008276:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff f93a 	bl	80074f4 <VL53L0X_calc_timeout_mclks>
 8008280:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008292:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008296:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800829a:	461a      	mov	r2, r3
 800829c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff f927 	bl	80074f4 <VL53L0X_calc_timeout_mclks>
 80082a6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80082a8:	2303      	movs	r3, #3
 80082aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80082ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d102      	bne.n	80082bc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80082b6:	2302      	movs	r3, #2
 80082b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80082bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80082c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	02db      	lsls	r3, r3, #11
 80082cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80082d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80082d8:	4a53      	ldr	r2, [pc, #332]	; (8008428 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80082e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80082f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80082fa:	4a4b      	ldr	r2, [pc, #300]	; (8008428 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80082fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008300:	099b      	lsrs	r3, r3, #6
 8008302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	3380      	adds	r3, #128	; 0x80
 800830a:	0a1b      	lsrs	r3, r3, #8
 800830c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800831c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008320:	3380      	adds	r3, #128	; 0x80
 8008322:	0a1b      	lsrs	r3, r3, #8
 8008324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800832e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008336:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800833a:	e15e      	b.n	80085fa <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800833c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10c      	bne.n	800835c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008348:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008350:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e14c      	b.n	80085f6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800835c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008364:	2301      	movs	r3, #1
 8008366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800836a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800836e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008372:	041a      	lsls	r2, r3, #16
 8008374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800837e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008384:	429a      	cmp	r2, r3
 8008386:	d902      	bls.n	800838e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800838a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800838e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008392:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008396:	fb02 f303 	mul.w	r3, r2, r3
 800839a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800839e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083a2:	4613      	mov	r3, r2
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fb01 	bl	80069b2 <VL53L0X_isqrt>
 80083b0:	4603      	mov	r3, r0
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	891b      	ldrh	r3, [r3, #8]
 80083ba:	461a      	mov	r2, r3
 80083bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80083c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80083c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083cc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80083ce:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80083d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80083d4:	4a14      	ldr	r2, [pc, #80]	; (8008428 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80083d6:	fba2 2303 	umull	r2, r3, r2, r3
 80083da:	099b      	lsrs	r3, r3, #6
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80083de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e0:	041b      	lsls	r3, r3, #16
 80083e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80083e6:	4a10      	ldr	r2, [pc, #64]	; (8008428 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80083e8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ec:	099b      	lsrs	r3, r3, #6
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80083f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfb8      	it	lt
 8008402:	425b      	neglt	r3, r3
 8008404:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	7e1b      	ldrb	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800841c:	e033      	b.n	8008486 <VL53L0X_calc_sigma_estimate+0x30e>
 800841e:	bf00      	nop
 8008420:	028f87ae 	.word	0x028f87ae
 8008424:	0006999a 	.word	0x0006999a
 8008428:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800842c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800842e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008432:	fbb2 f3f3 	udiv	r3, r2, r3
 8008436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008444:	fb02 f303 	mul.w	r3, r2, r3
 8008448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800844c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008452:	4413      	add	r3, r2
 8008454:	0c1b      	lsrs	r3, r3, #16
 8008456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800845a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800845e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008474:	fb03 f303 	mul.w	r3, r3, r3
 8008478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800847c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008480:	0b9b      	lsrs	r3, r3, #14
 8008482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848c:	fb02 f303 	mul.w	r3, r2, r3
 8008490:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008498:	0c1b      	lsrs	r3, r3, #16
 800849a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	fb03 f303 	mul.w	r3, r3, r3
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80084a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80084b0:	0c1b      	lsrs	r3, r3, #16
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	fb03 f303 	mul.w	r3, r3, r3
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80084bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	4413      	add	r3, r2
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80084c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c6:	f7fe fa74 	bl	80069b2 <VL53L0X_isqrt>
 80084ca:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	041b      	lsls	r3, r3, #16
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	3332      	adds	r3, #50	; 0x32
 80084d6:	4a4b      	ldr	r2, [pc, #300]	; (8008604 <VL53L0X_calc_sigma_estimate+0x48c>)
 80084d8:	fba2 2303 	umull	r2, r3, r2, r3
 80084dc:	095a      	lsrs	r2, r3, #5
 80084de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80084e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084ec:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80084f0:	fb02 f303 	mul.w	r3, r2, r3
 80084f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80084f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084fc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008500:	3308      	adds	r3, #8
 8008502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800850a:	4a3f      	ldr	r2, [pc, #252]	; (8008608 <VL53L0X_calc_sigma_estimate+0x490>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	0b5b      	lsrs	r3, r3, #13
 8008512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800851a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800851c:	429a      	cmp	r2, r3
 800851e:	d902      	bls.n	8008526 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008520:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800852a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800852e:	4413      	add	r3, r2
 8008530:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008534:	4a35      	ldr	r2, [pc, #212]	; (800860c <VL53L0X_calc_sigma_estimate+0x494>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	099b      	lsrs	r3, r3, #6
 800853c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008546:	441a      	add	r2, r3
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	fbb2 f3f3 	udiv	r3, r2, r3
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fa2f 	bl	80069b2 <VL53L0X_isqrt>
 8008554:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008562:	4a2a      	ldr	r2, [pc, #168]	; (800860c <VL53L0X_calc_sigma_estimate+0x494>)
 8008564:	fba2 2303 	umull	r2, r3, r2, r3
 8008568:	099b      	lsrs	r3, r3, #6
 800856a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800856c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008570:	fb03 f303 	mul.w	r3, r3, r3
 8008574:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	fb03 f303 	mul.w	r3, r3, r3
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800857e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	4413      	add	r3, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fa14 	bl	80069b2 <VL53L0X_isqrt>
 800858a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800859a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <VL53L0X_calc_sigma_estimate+0x43c>
 80085a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <VL53L0X_calc_sigma_estimate+0x43c>
 80085a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80085ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d903      	bls.n	80085bc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80085b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80085c2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80085ce:	6939      	ldr	r1, [r7, #16]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fca8 	bl	8007f40 <VL53L0X_calc_dmax>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085f6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	37c0      	adds	r7, #192	; 0xc0
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	51eb851f 	.word	0x51eb851f
 8008608:	d1b71759 	.word	0xd1b71759
 800860c:	10624dd3 	.word	0x10624dd3

08008610 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b090      	sub	sp, #64	; 0x40
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	461a      	mov	r2, r3
 800861c:	460b      	mov	r3, r1
 800861e:	72fb      	strb	r3, [r7, #11]
 8008620:	4613      	mov	r3, r2
 8008622:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008624:	2300      	movs	r3, #0
 8008626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	10db      	asrs	r3, r3, #3
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008670:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d017      	beq.n	80086a8 <VL53L0X_get_pal_range_status+0x98>
 8008678:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800867c:	2b05      	cmp	r3, #5
 800867e:	d013      	beq.n	80086a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008680:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008684:	2b07      	cmp	r3, #7
 8008686:	d00f      	beq.n	80086a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008688:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d00b      	beq.n	80086a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008690:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008694:	2b0d      	cmp	r3, #13
 8008696:	d007      	beq.n	80086a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008698:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800869c:	2b0e      	cmp	r3, #14
 800869e:	d003      	beq.n	80086a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80086a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086a4:	2b0f      	cmp	r3, #15
 80086a6:	d103      	bne.n	80086b0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80086ae:	e002      	b.n	80086b6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80086b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80086be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80086c2:	461a      	mov	r2, r3
 80086c4:	2100      	movs	r1, #0
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7fc fc90 	bl	8004fec <VL53L0X_GetLimitCheckEnable>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80086d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d02e      	beq.n	8008738 <VL53L0X_get_pal_range_status+0x128>
 80086da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12a      	bne.n	8008738 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80086e2:	f107 0310 	add.w	r3, r7, #16
 80086e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff fd43 	bl	8008178 <VL53L0X_calc_sigma_estimate>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80086f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	b29a      	uxth	r2, r3
 8008704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008706:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008708:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800870c:	2b00      	cmp	r3, #0
 800870e:	d113      	bne.n	8008738 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008710:	f107 0320 	add.w	r3, r7, #32
 8008714:	461a      	mov	r2, r3
 8008716:	2100      	movs	r1, #0
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7fc fceb 	bl	80050f4 <VL53L0X_GetLimitCheckValue>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d006      	beq.n	8008738 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800872a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800872e:	429a      	cmp	r2, r3
 8008730:	d902      	bls.n	8008738 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008738:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008740:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008744:	461a      	mov	r2, r3
 8008746:	2102      	movs	r1, #2
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7fc fc4f 	bl	8004fec <VL53L0X_GetLimitCheckEnable>
 800874e:	4603      	mov	r3, r0
 8008750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008754:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008758:	2b00      	cmp	r3, #0
 800875a:	d044      	beq.n	80087e6 <VL53L0X_get_pal_range_status+0x1d6>
 800875c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008760:	2b00      	cmp	r3, #0
 8008762:	d140      	bne.n	80087e6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008764:	f107 031c 	add.w	r3, r7, #28
 8008768:	461a      	mov	r2, r3
 800876a:	2102      	movs	r1, #2
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7fc fcc1 	bl	80050f4 <VL53L0X_GetLimitCheckValue>
 8008772:	4603      	mov	r3, r0
 8008774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008778:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800877c:	2b00      	cmp	r3, #0
 800877e:	d107      	bne.n	8008790 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008780:	2201      	movs	r2, #1
 8008782:	21ff      	movs	r1, #255	; 0xff
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f9bb 	bl	8008b00 <VL53L0X_WrByte>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008798:	f107 0316 	add.w	r3, r7, #22
 800879c:	461a      	mov	r2, r3
 800879e:	21b6      	movs	r1, #182	; 0xb6
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fa59 	bl	8008c58 <VL53L0X_RdWord>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80087ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d107      	bne.n	80087c4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80087b4:	2200      	movs	r2, #0
 80087b6:	21ff      	movs	r1, #255	; 0xff
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 f9a1 	bl	8008b00 <VL53L0X_WrByte>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80087c4:	8afb      	ldrh	r3, [r7, #22]
 80087c6:	025b      	lsls	r3, r3, #9
 80087c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d006      	beq.n	80087e6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80087d8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80087da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087dc:	429a      	cmp	r2, r3
 80087de:	d902      	bls.n	80087e6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80087e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d109      	bne.n	8008802 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80087ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087f2:	461a      	mov	r2, r3
 80087f4:	2103      	movs	r1, #3
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7fc fbf8 	bl	8004fec <VL53L0X_GetLimitCheckEnable>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d023      	beq.n	8008852 <VL53L0X_get_pal_range_status+0x242>
 800880a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800880e:	2b00      	cmp	r3, #0
 8008810:	d11f      	bne.n	8008852 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008812:	893b      	ldrh	r3, [r7, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	637b      	str	r3, [r7, #52]	; 0x34
 800881c:	e005      	b.n	800882a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	021a      	lsls	r2, r3, #8
 8008822:	893b      	ldrh	r3, [r7, #8]
 8008824:	fbb2 f3f3 	udiv	r3, r2, r3
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800882a:	f107 0318 	add.w	r3, r7, #24
 800882e:	461a      	mov	r2, r3
 8008830:	2103      	movs	r1, #3
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f7fc fc5e 	bl	80050f4 <VL53L0X_GetLimitCheckValue>
 8008838:	4603      	mov	r3, r0
 800883a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d006      	beq.n	8008852 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008844:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008848:	429a      	cmp	r2, r3
 800884a:	d202      	bcs.n	8008852 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008852:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008856:	2b00      	cmp	r3, #0
 8008858:	d14a      	bne.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800885a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800885e:	2b01      	cmp	r3, #1
 8008860:	d103      	bne.n	800886a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	22ff      	movs	r2, #255	; 0xff
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e042      	b.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800886a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800886e:	2b01      	cmp	r3, #1
 8008870:	d007      	beq.n	8008882 <VL53L0X_get_pal_range_status+0x272>
 8008872:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008876:	2b02      	cmp	r3, #2
 8008878:	d003      	beq.n	8008882 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800887a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800887e:	2b03      	cmp	r3, #3
 8008880:	d103      	bne.n	800888a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008884:	2205      	movs	r2, #5
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e032      	b.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800888a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800888e:	2b06      	cmp	r3, #6
 8008890:	d003      	beq.n	800889a <VL53L0X_get_pal_range_status+0x28a>
 8008892:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008896:	2b09      	cmp	r3, #9
 8008898:	d103      	bne.n	80088a2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800889a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800889c:	2204      	movs	r2, #4
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	e026      	b.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80088a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d007      	beq.n	80088ba <VL53L0X_get_pal_range_status+0x2aa>
 80088aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088ae:	2b0a      	cmp	r3, #10
 80088b0:	d003      	beq.n	80088ba <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80088b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d103      	bne.n	80088c2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80088ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088bc:	2203      	movs	r2, #3
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	e016      	b.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80088c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d003      	beq.n	80088d2 <VL53L0X_get_pal_range_status+0x2c2>
 80088ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d103      	bne.n	80088da <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80088d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d4:	2202      	movs	r2, #2
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	e00a      	b.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80088da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d103      	bne.n	80088ea <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80088e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e4:	2201      	movs	r2, #1
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	e002      	b.n	80088f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80088ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ec:	2200      	movs	r2, #0
 80088ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80088f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80088f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088fa:	2200      	movs	r2, #0
 80088fc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80088fe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008902:	461a      	mov	r2, r3
 8008904:	2101      	movs	r1, #1
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7fc fb70 	bl	8004fec <VL53L0X_GetLimitCheckEnable>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008912:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008916:	2b00      	cmp	r3, #0
 8008918:	d14f      	bne.n	80089ba <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800891a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <VL53L0X_get_pal_range_status+0x31a>
 8008922:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008926:	2b01      	cmp	r3, #1
 8008928:	d103      	bne.n	8008932 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800892a:	2301      	movs	r3, #1
 800892c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008930:	e002      	b.n	8008938 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800893e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008942:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008946:	2b04      	cmp	r3, #4
 8008948:	d003      	beq.n	8008952 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800894a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800894e:	2b00      	cmp	r3, #0
 8008950:	d103      	bne.n	800895a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008952:	2301      	movs	r3, #1
 8008954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008958:	e002      	b.n	8008960 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008966:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800896a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <VL53L0X_get_pal_range_status+0x36a>
 8008972:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d103      	bne.n	8008982 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008980:	e002      	b.n	8008988 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800898e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <VL53L0X_get_pal_range_status+0x392>
 800899a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d103      	bne.n	80089aa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a8:	e002      	b.n	80089b0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80089b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80089be:	4618      	mov	r0, r3
 80089c0:	3740      	adds	r7, #64	; 0x40
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b088      	sub	sp, #32
 80089ca:	af02      	add	r7, sp, #8
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	330a      	adds	r3, #10
 80089d6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80089e4:	b299      	uxth	r1, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4613      	mov	r3, r2
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	f7f8 fe2d 	bl	8001650 <HAL_I2C_Master_Transmit>
 80089f6:	4603      	mov	r3, r0
 80089f8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80089fa:	693b      	ldr	r3, [r7, #16]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	330a      	adds	r3, #10
 8008a14:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	b299      	uxth	r1, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	f7f8 ff09 	bl	800184c <HAL_I2C_Master_Receive>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008a3e:	693b      	ldr	r3, [r7, #16]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	460b      	mov	r3, r1
 8008a56:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8008a60:	d902      	bls.n	8008a68 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008a62:	f06f 0303 	mvn.w	r3, #3
 8008a66:	e016      	b.n	8008a96 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008a68:	4a0d      	ldr	r2, [pc, #52]	; (8008aa0 <VL53L0X_WriteMulti+0x58>)
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	480c      	ldr	r0, [pc, #48]	; (8008aa4 <VL53L0X_WriteMulti+0x5c>)
 8008a74:	f000 fd90 	bl	8009598 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4908      	ldr	r1, [pc, #32]	; (8008aa0 <VL53L0X_WriteMulti+0x58>)
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7ff ffa0 	bl	80089c6 <_I2CWrite>
 8008a86:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008a8e:	23ec      	movs	r3, #236	; 0xec
 8008a90:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000478 	.word	0x20000478
 8008aa4:	20000479 	.word	0x20000479

08008aa8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008abc:	f107 030b 	add.w	r3, r7, #11
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7ff ff7e 	bl	80089c6 <_I2CWrite>
 8008aca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008ad2:	23ec      	movs	r3, #236	; 0xec
 8008ad4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008ad6:	e00c      	b.n	8008af2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7ff ff91 	bl	8008a04 <_I2CRead>
 8008ae2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008aea:	23ec      	movs	r3, #236	; 0xec
 8008aec:	75fb      	strb	r3, [r7, #23]
 8008aee:	e000      	b.n	8008af2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008af0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008b14:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <VL53L0X_WrByte+0x44>)
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <VL53L0X_WrByte+0x44>)
 8008b1c:	78bb      	ldrb	r3, [r7, #2]
 8008b1e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008b20:	2202      	movs	r2, #2
 8008b22:	4908      	ldr	r1, [pc, #32]	; (8008b44 <VL53L0X_WrByte+0x44>)
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff ff4e 	bl	80089c6 <_I2CWrite>
 8008b2a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008b32:	23ec      	movs	r3, #236	; 0xec
 8008b34:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20000478 	.word	0x20000478

08008b48 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
 8008b54:	4613      	mov	r3, r2
 8008b56:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008b5c:	4a0e      	ldr	r2, [pc, #56]	; (8008b98 <VL53L0X_WrWord+0x50>)
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008b62:	883b      	ldrh	r3, [r7, #0]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <VL53L0X_WrWord+0x50>)
 8008b6c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008b6e:	883b      	ldrh	r3, [r7, #0]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <VL53L0X_WrWord+0x50>)
 8008b74:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008b76:	2203      	movs	r2, #3
 8008b78:	4907      	ldr	r1, [pc, #28]	; (8008b98 <VL53L0X_WrWord+0x50>)
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff ff23 	bl	80089c6 <_I2CWrite>
 8008b80:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008b88:	23ec      	movs	r3, #236	; 0xec
 8008b8a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20000478 	.word	0x20000478

08008b9c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	70fb      	strb	r3, [r7, #3]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70bb      	strb	r3, [r7, #2]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008bba:	f107 020e 	add.w	r2, r7, #14
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f81e 	bl	8008c04 <VL53L0X_RdByte>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8008bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d110      	bne.n	8008bf6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008bd4:	7bba      	ldrb	r2, [r7, #14]
 8008bd6:	78bb      	ldrb	r3, [r7, #2]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	787b      	ldrb	r3, [r7, #1]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008be4:	7bba      	ldrb	r2, [r7, #14]
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff ff88 	bl	8008b00 <VL53L0X_WrByte>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]
 8008bf4:	e000      	b.n	8008bf8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008bf6:	bf00      	nop
done:
    return Status;
 8008bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008c16:	f107 030b 	add.w	r3, r7, #11
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fed1 	bl	80089c6 <_I2CWrite>
 8008c24:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008c2c:	23ec      	movs	r3, #236	; 0xec
 8008c2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008c30:	e00c      	b.n	8008c4c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008c32:	2201      	movs	r2, #1
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff fee4 	bl	8008a04 <_I2CRead>
 8008c3c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008c44:	23ec      	movs	r3, #236	; 0xec
 8008c46:	75fb      	strb	r3, [r7, #23]
 8008c48:	e000      	b.n	8008c4c <VL53L0X_RdByte+0x48>
    }
done:
 8008c4a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	460b      	mov	r3, r1
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008c6a:	f107 030b 	add.w	r3, r7, #11
 8008c6e:	2201      	movs	r2, #1
 8008c70:	4619      	mov	r1, r3
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fea7 	bl	80089c6 <_I2CWrite>
 8008c78:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008c80:	23ec      	movs	r3, #236	; 0xec
 8008c82:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008c84:	e017      	b.n	8008cb6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008c86:	2202      	movs	r2, #2
 8008c88:	490e      	ldr	r1, [pc, #56]	; (8008cc4 <VL53L0X_RdWord+0x6c>)
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff feba 	bl	8008a04 <_I2CRead>
 8008c90:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008c98:	23ec      	movs	r3, #236	; 0xec
 8008c9a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008c9c:	e00b      	b.n	8008cb6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <VL53L0X_RdWord+0x6c>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <VL53L0X_RdWord+0x6c>)
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4413      	add	r3, r2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8008cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000478 	.word	0x20000478

08008cc8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008cda:	f107 030b 	add.w	r3, r7, #11
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f7ff fe6f 	bl	80089c6 <_I2CWrite>
 8008ce8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008cf0:	23ec      	movs	r3, #236	; 0xec
 8008cf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008cf4:	e01b      	b.n	8008d2e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	4910      	ldr	r1, [pc, #64]	; (8008d3c <VL53L0X_RdDWord+0x74>)
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fe82 	bl	8008a04 <_I2CRead>
 8008d00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d08:	23ec      	movs	r3, #236	; 0xec
 8008d0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008d0c:	e00f      	b.n	8008d2e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <VL53L0X_RdDWord+0x74>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	061a      	lsls	r2, r3, #24
 8008d14:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <VL53L0X_RdDWord+0x74>)
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	441a      	add	r2, r3
 8008d1c:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <VL53L0X_RdDWord+0x74>)
 8008d1e:	789b      	ldrb	r3, [r3, #2]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	4413      	add	r3, r2
 8008d24:	4a05      	ldr	r2, [pc, #20]	; (8008d3c <VL53L0X_RdDWord+0x74>)
 8008d26:	78d2      	ldrb	r2, [r2, #3]
 8008d28:	441a      	add	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8008d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000478 	.word	0x20000478

08008d40 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008d4c:	2002      	movs	r0, #2
 8008d4e:	f7f7 ff57 	bl	8000c00 <HAL_Delay>
    return status;
 8008d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	4603      	mov	r3, r0
 8008d66:	460a      	mov	r2, r1
 8008d68:	80fb      	strh	r3, [r7, #6]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	88bb      	ldrh	r3, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	2b3f      	cmp	r3, #63	; 0x3f
 8008d76:	dc01      	bgt.n	8008d7c <bytestowrite+0x1e>
 8008d78:	88fb      	ldrh	r3, [r7, #6]
 8008d7a:	e003      	b.n	8008d84 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8008d7c:	88bb      	ldrh	r3, [r7, #4]
 8008d7e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008d82:	b29b      	uxth	r3, r3
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr
	...

08008d90 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	60ba      	str	r2, [r7, #8]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	81fb      	strh	r3, [r7, #14]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	81bb      	strh	r3, [r7, #12]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8008da6:	2306      	movs	r3, #6
 8008da8:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8008daa:	89fb      	ldrh	r3, [r7, #14]
 8008dac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	89bb      	ldrh	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da00      	bge.n	8008dba <EEPROM_Write+0x2a>
 8008db8:	333f      	adds	r3, #63	; 0x3f
 8008dba:	119b      	asrs	r3, r3, #6
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	89fb      	ldrh	r3, [r7, #14]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8008dc4:	8b7a      	ldrh	r2, [r7, #26]
 8008dc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	3301      	adds	r3, #1
 8008dce:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	623b      	str	r3, [r7, #32]
 8008dd8:	e034      	b.n	8008e44 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8008dda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	b21a      	sxth	r2, r3
 8008de4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	b21b      	sxth	r3, r3
 8008dec:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8008dee:	89ba      	ldrh	r2, [r7, #12]
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	4611      	mov	r1, r2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff ffb2 	bl	8008d5e <bytestowrite>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8008dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	4413      	add	r3, r2
 8008e04:	8af9      	ldrh	r1, [r7, #22]
 8008e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e0a:	9202      	str	r2, [sp, #8]
 8008e0c:	8aba      	ldrh	r2, [r7, #20]
 8008e0e:	9201      	str	r2, [sp, #4]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	2302      	movs	r3, #2
 8008e14:	460a      	mov	r2, r1
 8008e16:	21a0      	movs	r1, #160	; 0xa0
 8008e18:	480f      	ldr	r0, [pc, #60]	; (8008e58 <EEPROM_Write+0xc8>)
 8008e1a:	f7f8 ff83 	bl	8001d24 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8008e1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e20:	3301      	adds	r3, #1
 8008e22:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8008e24:	2300      	movs	r3, #0
 8008e26:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8008e28:	88fa      	ldrh	r2, [r7, #6]
 8008e2a:	8abb      	ldrh	r3, [r7, #20]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8008e30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e32:	8abb      	ldrh	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8008e38:	2005      	movs	r0, #5
 8008e3a:	f7f7 fee1 	bl	8000c00 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	3301      	adds	r3, #1
 8008e42:	623b      	str	r3, [r7, #32]
 8008e44:	8b3b      	ldrh	r3, [r7, #24]
 8008e46:	6a3a      	ldr	r2, [r7, #32]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	dbc6      	blt.n	8008dda <EEPROM_Write+0x4a>
	}
}
 8008e4c:	bf00      	nop
 8008e4e:	bf00      	nop
 8008e50:	3728      	adds	r7, #40	; 0x28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	2000038c 	.word	0x2000038c

08008e5c <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	e00b      	b.n	8008e88 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8008e70:	7bfa      	ldrb	r2, [r7, #15]
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	6879      	ldr	r1, [r7, #4]
 8008e76:	440b      	add	r3, r1
 8008e78:	3210      	adds	r2, #16
 8008e7a:	443a      	add	r2, r7
 8008e7c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8008e80:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	3301      	adds	r3, #1
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d9f0      	bls.n	8008e70 <float2Bytes+0x14>
    }

}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr
	...

08008e9c <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	603a      	str	r2, [r7, #0]
 8008ea6:	80fb      	strh	r3, [r7, #6]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	4806      	ldr	r0, [pc, #24]	; (8008ec8 <EEPROM_Write_NUM+0x2c>)
 8008eb0:	f7ff ffd4 	bl	8008e5c <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8008eb4:	88b9      	ldrh	r1, [r7, #4]
 8008eb6:	88f8      	ldrh	r0, [r7, #6]
 8008eb8:	2304      	movs	r3, #4
 8008eba:	4a03      	ldr	r2, [pc, #12]	; (8008ec8 <EEPROM_Write_NUM+0x2c>)
 8008ebc:	f7ff ff68 	bl	8008d90 <EEPROM_Write>
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	200004b8 	.word	0x200004b8

08008ecc <peripherialsInit>:
uint8_t state_flag[3] = {0, 0, 0}; // variable that tells if the full cycle of measurement was finnished
//full cycle is considered as finnished when state_flag = {1, 1, 1} after cycle they will be reseted to 0
// {0,0,0} <==> {measurement, write to EEPROM, display}

void peripherialsInit()
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  TM1637_SetBrightness(3);
 8008ed0:	2003      	movs	r0, #3
 8008ed2:	f000 f9fd 	bl	80092d0 <TM1637_SetBrightness>
  VL53_init();
 8008ed6:	f000 fa89 	bl	80093ec <VL53_init>
  HAL_TIM_Base_Start_IT(&htim1);
 8008eda:	4805      	ldr	r0, [pc, #20]	; (8008ef0 <peripherialsInit+0x24>)
 8008edc:	f7fa f898 	bl	8003010 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	4904      	ldr	r1, [pc, #16]	; (8008ef4 <peripherialsInit+0x28>)
 8008ee4:	4804      	ldr	r0, [pc, #16]	; (8008ef8 <peripherialsInit+0x2c>)
 8008ee6:	f7fa fcc6 	bl	8003876 <HAL_UART_Receive_IT>
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200003e4 	.word	0x200003e4
 8008ef4:	200004c2 	.word	0x200004c2
 8008ef8:	2000042c 	.word	0x2000042c

08008efc <switchMode>:

void switchMode()
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
	/* Function that switches mode from 0 = single to 1 = cont*/
	if(mode == 0)
 8008f00:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <switchMode+0x2c>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d103      	bne.n	8008f10 <switchMode+0x14>
	{
		mode = 1;
 8008f08:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <switchMode+0x2c>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
	}
	else if (mode == 1)
	{
		mode = 0;
	}
}
 8008f0e:	e006      	b.n	8008f1e <switchMode+0x22>
	else if (mode == 1)
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <switchMode+0x2c>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d102      	bne.n	8008f1e <switchMode+0x22>
		mode = 0;
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <switchMode+0x2c>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	200004bd 	.word	0x200004bd

08008f2c <Compute>:

void Compute(uint8_t mode, uint8_t status)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	460a      	mov	r2, r1
 8008f36:	71fb      	strb	r3, [r7, #7]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	71bb      	strb	r3, [r7, #6]
	if (mode == 0)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <Compute+0x20>
	{
		singleMode(status);
 8008f42:	79bb      	ldrb	r3, [r7, #6]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f80d 	bl	8008f64 <singleMode>
//	  	}
//	  	else if (state_flag[i] == 1)
//	  	{
//	  		cycleEnd();
//	  	}
}
 8008f4a:	e006      	b.n	8008f5a <Compute+0x2e>
	else if (mode == 1)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d103      	bne.n	8008f5a <Compute+0x2e>
		continuousMode(status);
 8008f52:	79bb      	ldrb	r3, [r7, #6]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f81f 	bl	8008f98 <continuousMode>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <singleMode>:
 * status = 3 timer
 *
 *  */

void singleMode(uint8_t status)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	71fb      	strb	r3, [r7, #7]
	if (status == 2)
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d10b      	bne.n	8008f8c <singleMode+0x28>
	{
		readMeasure();
 8008f74:	f000 f832 	bl	8008fdc <readMeasure>
		Display(Measure);
 8008f78:	4b06      	ldr	r3, [pc, #24]	; (8008f94 <singleMode+0x30>)
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f851 	bl	8009024 <Display>
		saveToMem(Measure);
 8008f82:	4b04      	ldr	r3, [pc, #16]	; (8008f94 <singleMode+0x30>)
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f860 	bl	800904c <saveToMem>
	}
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	200004c0 	.word	0x200004c0

08008f98 <continuousMode>:
void continuousMode(uint8_t status)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d102      	bne.n	8008fae <continuousMode+0x16>
	{
		readMeasure();
 8008fa8:	f000 f818 	bl	8008fdc <readMeasure>
	}
	else if (status == 3)
	{
		Display(Measure);
	}
}
 8008fac:	e010      	b.n	8008fd0 <continuousMode+0x38>
	else if (status == 2)
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d105      	bne.n	8008fc0 <continuousMode+0x28>
		saveToMem(Measure);
 8008fb4:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <continuousMode+0x40>)
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f847 	bl	800904c <saveToMem>
}
 8008fbe:	e007      	b.n	8008fd0 <continuousMode+0x38>
	else if (status == 3)
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d104      	bne.n	8008fd0 <continuousMode+0x38>
		Display(Measure);
 8008fc6:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <continuousMode+0x40>)
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f82a 	bl	8009024 <Display>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	200004c0 	.word	0x200004c0

08008fdc <readMeasure>:
//		state_flag[i] = 0;
//	}
//}

void readMeasure()
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
	/*Function that reads distance from VL530L0X and returns as uint8_t */
	//measure if data is ready
	if(TofDataRead == 1)
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <readMeasure+0x3c>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d108      	bne.n	8008ffa <readMeasure+0x1e>
		{
			Measure = VL53_MEASURE();
 8008fe8:	f000 fa58 	bl	800949c <VL53_MEASURE>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <readMeasure+0x40>)
 8008ff2:	801a      	strh	r2, [r3, #0]
			TofDataRead = 0;
 8008ff4:	4b08      	ldr	r3, [pc, #32]	; (8009018 <readMeasure+0x3c>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
		}
		//data limit
	if (Measure > 1250)
 8008ffa:	4b08      	ldr	r3, [pc, #32]	; (800901c <readMeasure+0x40>)
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8009002:	4293      	cmp	r3, r2
 8009004:	d903      	bls.n	800900e <readMeasure+0x32>
		{
			Measure = 1250;
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <readMeasure+0x40>)
 8009008:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800900c:	801a      	strh	r2, [r3, #0]
		}
	state_flag[0] = 1; //Change temporary progress flag to 1 (1 = task done)
 800900e:	4b04      	ldr	r3, [pc, #16]	; (8009020 <readMeasure+0x44>)
 8009010:	2201      	movs	r2, #1
 8009012:	701a      	strb	r2, [r3, #0]
}
 8009014:	bf00      	nop
 8009016:	bd80      	pop	{r7, pc}
 8009018:	200004be 	.word	0x200004be
 800901c:	200004c0 	.word	0x200004c0
 8009020:	200004d8 	.word	0x200004d8

08009024 <Display>:

void Display(uint16_t measure)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	80fb      	strh	r3, [r7, #6]
	TM1637_DisplayDecimal(measure, 0);
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f000 f8de 	bl	80091f4 <TM1637_DisplayDecimal>
	state_flag[2] = 1; //Change temporary progress flag to 1 (1 = task done)
 8009038:	4b03      	ldr	r3, [pc, #12]	; (8009048 <Display+0x24>)
 800903a:	2201      	movs	r2, #1
 800903c:	709a      	strb	r2, [r3, #2]
}
 800903e:	bf00      	nop
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200004d8 	.word	0x200004d8

0800904c <saveToMem>:

void saveToMem(uint16_t measure)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	80fb      	strh	r3, [r7, #6]
	EEPROM_Write_NUM(EEPROM_PAGE, EEPROM_OFFSET, measure);
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	4618      	mov	r0, r3
 800905a:	f7f7 f92d 	bl	80002b8 <__aeabi_ui2f>
 800905e:	4603      	mov	r3, r0
 8009060:	461a      	mov	r2, r3
 8009062:	2101      	movs	r1, #1
 8009064:	2003      	movs	r0, #3
 8009066:	f7ff ff19 	bl	8008e9c <EEPROM_Write_NUM>
	state_flag[1] = 1; //Change temporary progress flag to 1 (1 = task done)
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <saveToMem+0x2c>)
 800906c:	2201      	movs	r2, #1
 800906e:	705a      	strb	r2, [r3, #1]
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200004d8 	.word	0x200004d8

0800907c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	80fb      	strh	r3, [r7, #6]
	//save button
	if (GPIO_Pin == B2_Pin)
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800908c:	d106      	bne.n	800909c <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800908e:	2120      	movs	r1, #32
 8009090:	480f      	ldr	r0, [pc, #60]	; (80090d0 <HAL_GPIO_EXTI_Callback+0x54>)
 8009092:	f7f8 f967 	bl	8001364 <HAL_GPIO_TogglePin>
		status = 2;
 8009096:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <HAL_GPIO_EXTI_Callback+0x58>)
 8009098:	2202      	movs	r2, #2
 800909a:	701a      	strb	r2, [r3, #0]
	}
	//change state button
	if (GPIO_Pin == B1_Pin)
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a2:	d105      	bne.n	80090b0 <HAL_GPIO_EXTI_Callback+0x34>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80090a4:	2120      	movs	r1, #32
 80090a6:	480a      	ldr	r0, [pc, #40]	; (80090d0 <HAL_GPIO_EXTI_Callback+0x54>)
 80090a8:	f7f8 f95c 	bl	8001364 <HAL_GPIO_TogglePin>
		switchMode();
 80090ac:	f7ff ff26 	bl	8008efc <switchMode>
	}
	if(GPIO_Pin == TOF_INT_Pin)
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d107      	bne.n	80090c6 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		VL53_CLEAR_INTERRUPT_DATA();
 80090b6:	f000 f9ff 	bl	80094b8 <VL53_CLEAR_INTERRUPT_DATA>
		TofDataRead = 1;
 80090ba:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80090bc:	2201      	movs	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
		status = 1;
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	701a      	strb	r2, [r3, #0]
	}
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40010800 	.word	0x40010800
 80090d4:	200004bc 	.word	0x200004bc
 80090d8:	200004be 	.word	0x200004be

080090dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a06      	ldr	r2, [pc, #24]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d106      	bne.n	80090fc <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80090ee:	2120      	movs	r1, #32
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80090f2:	f7f8 f937 	bl	8001364 <HAL_GPIO_TogglePin>
		status = 3;
 80090f6:	4b05      	ldr	r3, [pc, #20]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80090f8:	2203      	movs	r2, #3
 80090fa:	701a      	strb	r2, [r3, #0]
	}
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40012c00 	.word	0x40012c00
 8009108:	40010800 	.word	0x40010800
 800910c:	200004bc 	.word	0x200004bc

08009110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a16      	ldr	r2, [pc, #88]	; (8009178 <HAL_UART_RxCpltCallback+0x68>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d126      	bne.n	8009170 <HAL_UART_RxCpltCallback+0x60>
	{
		uint16_t dl_kom;
		if(znak == 'e')
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <HAL_UART_RxCpltCallback+0x6c>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b65      	cmp	r3, #101	; 0x65
 8009128:	d106      	bne.n	8009138 <HAL_UART_RxCpltCallback+0x28>
		{
			dl_kom = sprintf((char *)komunikat, "First data\n");
 800912a:	4915      	ldr	r1, [pc, #84]	; (8009180 <HAL_UART_RxCpltCallback+0x70>)
 800912c:	4815      	ldr	r0, [pc, #84]	; (8009184 <HAL_UART_RxCpltCallback+0x74>)
 800912e:	f000 f9d7 	bl	80094e0 <siprintf>
 8009132:	4603      	mov	r3, r0
 8009134:	81fb      	strh	r3, [r7, #14]
 8009136:	e010      	b.n	800915a <HAL_UART_RxCpltCallback+0x4a>
		}
		else if(znak == 'd')
 8009138:	4b10      	ldr	r3, [pc, #64]	; (800917c <HAL_UART_RxCpltCallback+0x6c>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b64      	cmp	r3, #100	; 0x64
 800913e:	d106      	bne.n	800914e <HAL_UART_RxCpltCallback+0x3e>
		{
			dl_kom = sprintf((char *)komunikat, "Another data\n");
 8009140:	4911      	ldr	r1, [pc, #68]	; (8009188 <HAL_UART_RxCpltCallback+0x78>)
 8009142:	4810      	ldr	r0, [pc, #64]	; (8009184 <HAL_UART_RxCpltCallback+0x74>)
 8009144:	f000 f9cc 	bl	80094e0 <siprintf>
 8009148:	4603      	mov	r3, r0
 800914a:	81fb      	strh	r3, [r7, #14]
 800914c:	e005      	b.n	800915a <HAL_UART_RxCpltCallback+0x4a>
		}
		else
		{
			dl_kom = sprintf((char *)komunikat, "Wrong char\n");
 800914e:	490f      	ldr	r1, [pc, #60]	; (800918c <HAL_UART_RxCpltCallback+0x7c>)
 8009150:	480c      	ldr	r0, [pc, #48]	; (8009184 <HAL_UART_RxCpltCallback+0x74>)
 8009152:	f000 f9c5 	bl	80094e0 <siprintf>
 8009156:	4603      	mov	r3, r0
 8009158:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_IT(&huart2, komunikat, dl_kom);
 800915a:	89fb      	ldrh	r3, [r7, #14]
 800915c:	461a      	mov	r2, r3
 800915e:	4909      	ldr	r1, [pc, #36]	; (8009184 <HAL_UART_RxCpltCallback+0x74>)
 8009160:	480b      	ldr	r0, [pc, #44]	; (8009190 <HAL_UART_RxCpltCallback+0x80>)
 8009162:	f7fa fb53 	bl	800380c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 8009166:	2201      	movs	r2, #1
 8009168:	4904      	ldr	r1, [pc, #16]	; (800917c <HAL_UART_RxCpltCallback+0x6c>)
 800916a:	4809      	ldr	r0, [pc, #36]	; (8009190 <HAL_UART_RxCpltCallback+0x80>)
 800916c:	f7fa fb83 	bl	8003876 <HAL_UART_Receive_IT>
	}
}
 8009170:	bf00      	nop
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	40004400 	.word	0x40004400
 800917c:	200004c2 	.word	0x200004c2
 8009180:	08009e6c 	.word	0x08009e6c
 8009184:	200004c4 	.word	0x200004c4
 8009188:	08009e78 	.word	0x08009e78
 800918c:	08009e88 	.word	0x08009e88
 8009190:	2000042c 	.word	0x2000042c

08009194 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8009198:	2201      	movs	r2, #1
 800919a:	2180      	movs	r1, #128	; 0x80
 800919c:	4802      	ldr	r0, [pc, #8]	; (80091a8 <TM1637_ClkHigh+0x14>)
 800919e:	f7f8 f8c9 	bl	8001334 <HAL_GPIO_WritePin>
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	40011000 	.word	0x40011000

080091ac <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80091b0:	2200      	movs	r2, #0
 80091b2:	2180      	movs	r1, #128	; 0x80
 80091b4:	4802      	ldr	r0, [pc, #8]	; (80091c0 <TM1637_ClkLow+0x14>)
 80091b6:	f7f8 f8bd 	bl	8001334 <HAL_GPIO_WritePin>
}
 80091ba:	bf00      	nop
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40011000 	.word	0x40011000

080091c4 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 80091c8:	2201      	movs	r2, #1
 80091ca:	2101      	movs	r1, #1
 80091cc:	4802      	ldr	r0, [pc, #8]	; (80091d8 <TM1637_DataHigh+0x14>)
 80091ce:	f7f8 f8b1 	bl	8001334 <HAL_GPIO_WritePin>
}
 80091d2:	bf00      	nop
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40010c00 	.word	0x40010c00

080091dc <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2101      	movs	r1, #1
 80091e4:	4802      	ldr	r0, [pc, #8]	; (80091f0 <TM1637_DataLow+0x14>)
 80091e6:	f7f8 f8a5 	bl	8001334 <HAL_GPIO_WritePin>
}
 80091ea:	bf00      	nop
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	40010c00 	.word	0x40010c00

080091f4 <TM1637_DisplayDecimal>:
		TM1637_DisplayDecimal(i++, 0);
	}
}

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	e032      	b.n	800926a <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4b30      	ldr	r3, [pc, #192]	; (80092c8 <TM1637_DisplayDecimal+0xd4>)
 8009208:	fb83 2301 	smull	r2, r3, r3, r1
 800920c:	109a      	asrs	r2, r3, #2
 800920e:	17cb      	asrs	r3, r1, #31
 8009210:	1ad2      	subs	r2, r2, r3
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	1aca      	subs	r2, r1, r3
 800921c:	4b2b      	ldr	r3, [pc, #172]	; (80092cc <TM1637_DisplayDecimal+0xd8>)
 800921e:	5c99      	ldrb	r1, [r3, r2]
 8009220:	f107 020c 	add.w	r2, r7, #12
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	4413      	add	r3, r2
 8009228:	460a      	mov	r2, r1
 800922a:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d110      	bne.n	8009254 <TM1637_DisplayDecimal+0x60>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00d      	beq.n	8009254 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8009238:	f107 020c 	add.w	r2, r7, #12
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	4413      	add	r3, r2
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009246:	b2d9      	uxtb	r1, r3
 8009248:	f107 020c 	add.w	r2, r7, #12
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	4413      	add	r3, r2
 8009250:	460a      	mov	r2, r1
 8009252:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <TM1637_DisplayDecimal+0xd4>)
 8009258:	fb82 1203 	smull	r1, r2, r2, r3
 800925c:	1092      	asrs	r2, r2, #2
 800925e:	17db      	asrs	r3, r3, #31
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3301      	adds	r3, #1
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b03      	cmp	r3, #3
 800926e:	ddc9      	ble.n	8009204 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8009270:	f000 f843 	bl	80092fa <TM1637_Start>
    TM1637_WriteByte(0x40);
 8009274:	2040      	movs	r0, #64	; 0x40
 8009276:	f000 f872 	bl	800935e <TM1637_WriteByte>
    TM1637_ReadResult();
 800927a:	f000 f860 	bl	800933e <TM1637_ReadResult>
    TM1637_Stop();
 800927e:	f000 f849 	bl	8009314 <TM1637_Stop>

    TM1637_Start();
 8009282:	f000 f83a 	bl	80092fa <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8009286:	20c0      	movs	r0, #192	; 0xc0
 8009288:	f000 f869 	bl	800935e <TM1637_WriteByte>
    TM1637_ReadResult();
 800928c:	f000 f857 	bl	800933e <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8009290:	2300      	movs	r3, #0
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	e00e      	b.n	80092b4 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f1c3 0303 	rsb	r3, r3, #3
 800929c:	3318      	adds	r3, #24
 800929e:	443b      	add	r3, r7
 80092a0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f85a 	bl	800935e <TM1637_WriteByte>
        TM1637_ReadResult();
 80092aa:	f000 f848 	bl	800933e <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	dded      	ble.n	8009296 <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 80092ba:	f000 f82b 	bl	8009314 <TM1637_Stop>
}
 80092be:	bf00      	nop
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	66666667 	.word	0x66666667
 80092cc:	08009ec0 	.word	0x08009ec0

080092d0 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 80092da:	f000 f80e 	bl	80092fa <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	3b79      	subs	r3, #121	; 0x79
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f83a 	bl	800935e <TM1637_WriteByte>
    TM1637_ReadResult();
 80092ea:	f000 f828 	bl	800933e <TM1637_ReadResult>
    TM1637_Stop();
 80092ee:	f000 f811 	bl	8009314 <TM1637_Stop>
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <TM1637_Start>:

void TM1637_Start(void)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80092fe:	f7ff ff49 	bl	8009194 <TM1637_ClkHigh>
    TM1637_DataHigh();
 8009302:	f7ff ff5f 	bl	80091c4 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 8009306:	2002      	movs	r0, #2
 8009308:	f000 f853 	bl	80093b2 <TM1637_DelayUsec>
    TM1637_DataLow();
 800930c:	f7ff ff66 	bl	80091dc <TM1637_DataLow>
}
 8009310:	bf00      	nop
 8009312:	bd80      	pop	{r7, pc}

08009314 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8009318:	f7ff ff48 	bl	80091ac <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 800931c:	2002      	movs	r0, #2
 800931e:	f000 f848 	bl	80093b2 <TM1637_DelayUsec>
    TM1637_DataLow();
 8009322:	f7ff ff5b 	bl	80091dc <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8009326:	2002      	movs	r0, #2
 8009328:	f000 f843 	bl	80093b2 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 800932c:	f7ff ff32 	bl	8009194 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8009330:	2002      	movs	r0, #2
 8009332:	f000 f83e 	bl	80093b2 <TM1637_DelayUsec>
    TM1637_DataHigh();
 8009336:	f7ff ff45 	bl	80091c4 <TM1637_DataHigh>
}
 800933a:	bf00      	nop
 800933c:	bd80      	pop	{r7, pc}

0800933e <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8009342:	f7ff ff33 	bl	80091ac <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8009346:	2005      	movs	r0, #5
 8009348:	f000 f833 	bl	80093b2 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 800934c:	f7ff ff22 	bl	8009194 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8009350:	2002      	movs	r0, #2
 8009352:	f000 f82e 	bl	80093b2 <TM1637_DelayUsec>
    TM1637_ClkLow();
 8009356:	f7ff ff29 	bl	80091ac <TM1637_ClkLow>
}
 800935a:	bf00      	nop
 800935c:	bd80      	pop	{r7, pc}

0800935e <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	4603      	mov	r3, r0
 8009366:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e019      	b.n	80093a2 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 800936e:	f7ff ff1d 	bl	80091ac <TM1637_ClkLow>
		if (b & 0x01) {
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 800937c:	f7ff ff22 	bl	80091c4 <TM1637_DataHigh>
 8009380:	e001      	b.n	8009386 <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8009382:	f7ff ff2b 	bl	80091dc <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8009386:	2003      	movs	r0, #3
 8009388:	f000 f813 	bl	80093b2 <TM1637_DelayUsec>
		b >>= 1;
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8009392:	f7ff feff 	bl	8009194 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8009396:	2003      	movs	r0, #3
 8009398:	f000 f80b 	bl	80093b2 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3301      	adds	r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b07      	cmp	r3, #7
 80093a6:	dde2      	ble.n	800936e <TM1637_WriteByte+0x10>
	}
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 80093ba:	e00d      	b.n	80093d8 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	e003      	b.n	80093ca <TM1637_DelayUsec+0x18>
					__NOP();
 80093c2:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80093d0:	dbf7      	blt.n	80093c2 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	607b      	str	r3, [r7, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1ee      	bne.n	80093bc <TM1637_DelayUsec+0xa>
        }
    }
}
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
	...

080093ec <VL53_init>:
VL53L0X_RangingMeasurementData_t RangingData;
VL53L0X_Dev_t  vl53l0x_c; // center module
VL53L0X_DEV    Dev = &vl53l0x_c;

void VL53_init()
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c2;
 80093f2:	4b27      	ldr	r3, [pc, #156]	; (8009490 <VL53_init+0xa4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a27      	ldr	r2, [pc, #156]	; (8009494 <VL53_init+0xa8>)
 80093f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80093fc:	4b24      	ldr	r3, [pc, #144]	; (8009490 <VL53_init+0xa4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2252      	movs	r2, #82	; 0x52
 8009402:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8009406:	2200      	movs	r2, #0
 8009408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800940c:	4822      	ldr	r0, [pc, #136]	; (8009498 <VL53_init+0xac>)
 800940e:	f7f7 ff91 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8009412:	2014      	movs	r0, #20
 8009414:	f7f7 fbf4 	bl	8000c00 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8009418:	2201      	movs	r2, #1
 800941a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800941e:	481e      	ldr	r0, [pc, #120]	; (8009498 <VL53_init+0xac>)
 8009420:	f7f7 ff88 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8009424:	2014      	movs	r0, #20
 8009426:	f7f7 fbeb 	bl	8000c00 <HAL_Delay>

	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800942a:	2007      	movs	r0, #7
 800942c:	f7f7 fd31 	bl	8000e92 <HAL_NVIC_DisableIRQ>

	VL53L0X_WaitDeviceBooted( Dev );
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <VL53_init+0xa4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f7fb fa4f 	bl	80048d8 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 800943a:	4b15      	ldr	r3, [pc, #84]	; (8009490 <VL53_init+0xa4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f7fa ff64 	bl	800430c <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8009444:	4b12      	ldr	r3, [pc, #72]	; (8009490 <VL53_init+0xa4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f7fb f8c3 	bl	80045d4 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800944e:	4b10      	ldr	r3, [pc, #64]	; (8009490 <VL53_init+0xa4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	1c7a      	adds	r2, r7, #1
 8009454:	1cb9      	adds	r1, r7, #2
 8009456:	4618      	mov	r0, r3
 8009458:	f7fb ff40 	bl	80052dc <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800945c:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <VL53_init+0xa4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	1cfa      	adds	r2, r7, #3
 8009462:	1d39      	adds	r1, r7, #4
 8009464:	4618      	mov	r0, r3
 8009466:	f7fc fbc5 	bl	8005bf4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <VL53_init+0xa4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2101      	movs	r1, #1
 8009470:	4618      	mov	r0, r3
 8009472:	f7fb facf 	bl	8004a14 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(Dev);
 8009476:	4b06      	ldr	r3, [pc, #24]	; (8009490 <VL53_init+0xa4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f7fb ffaa 	bl	80053d4 <VL53L0X_StartMeasurement>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8009480:	2007      	movs	r0, #7
 8009482:	f7f7 fcf8 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8009486:	bf00      	nop
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200002c8 	.word	0x200002c8
 8009494:	2000038c 	.word	0x2000038c
 8009498:	40010800 	.word	0x40010800

0800949c <VL53_MEASURE>:

uint16_t VL53_MEASURE()
{	uint16_t Measure = RangingData.RangeMilliMeter;
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <VL53_MEASURE+0x18>)
 80094a4:	891b      	ldrh	r3, [r3, #8]
 80094a6:	80fb      	strh	r3, [r7, #6]
	return Measure;
 80094a8:	88fb      	ldrh	r3, [r7, #6]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bc80      	pop	{r7}
 80094b2:	4770      	bx	lr
 80094b4:	200004dc 	.word	0x200004dc

080094b8 <VL53_CLEAR_INTERRUPT_DATA>:

void VL53_CLEAR_INTERRUPT_DATA()
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
	VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4906      	ldr	r1, [pc, #24]	; (80094dc <VL53_CLEAR_INTERRUPT_DATA+0x24>)
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fc f888 	bl	80055d8 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80094c8:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2104      	movs	r1, #4
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fc fb2e 	bl	8005b30 <VL53L0X_ClearInterruptMask>
}
 80094d4:	bf00      	nop
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	200002c8 	.word	0x200002c8
 80094dc:	200004dc 	.word	0x200004dc

080094e0 <siprintf>:
 80094e0:	b40e      	push	{r1, r2, r3}
 80094e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e6:	b500      	push	{lr}
 80094e8:	b09c      	sub	sp, #112	; 0x70
 80094ea:	ab1d      	add	r3, sp, #116	; 0x74
 80094ec:	9002      	str	r0, [sp, #8]
 80094ee:	9006      	str	r0, [sp, #24]
 80094f0:	9107      	str	r1, [sp, #28]
 80094f2:	9104      	str	r1, [sp, #16]
 80094f4:	4808      	ldr	r0, [pc, #32]	; (8009518 <siprintf+0x38>)
 80094f6:	4909      	ldr	r1, [pc, #36]	; (800951c <siprintf+0x3c>)
 80094f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fc:	9105      	str	r1, [sp, #20]
 80094fe:	6800      	ldr	r0, [r0, #0]
 8009500:	a902      	add	r1, sp, #8
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	f000 f9a4 	bl	8009850 <_svfiprintf_r>
 8009508:	2200      	movs	r2, #0
 800950a:	9b02      	ldr	r3, [sp, #8]
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	b01c      	add	sp, #112	; 0x70
 8009510:	f85d eb04 	ldr.w	lr, [sp], #4
 8009514:	b003      	add	sp, #12
 8009516:	4770      	bx	lr
 8009518:	20000318 	.word	0x20000318
 800951c:	ffff0208 	.word	0xffff0208

08009520 <memset>:
 8009520:	4603      	mov	r3, r0
 8009522:	4402      	add	r2, r0
 8009524:	4293      	cmp	r3, r2
 8009526:	d100      	bne.n	800952a <memset+0xa>
 8009528:	4770      	bx	lr
 800952a:	f803 1b01 	strb.w	r1, [r3], #1
 800952e:	e7f9      	b.n	8009524 <memset+0x4>

08009530 <__errno>:
 8009530:	4b01      	ldr	r3, [pc, #4]	; (8009538 <__errno+0x8>)
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20000318 	.word	0x20000318

0800953c <__libc_init_array>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	2600      	movs	r6, #0
 8009540:	4d0c      	ldr	r5, [pc, #48]	; (8009574 <__libc_init_array+0x38>)
 8009542:	4c0d      	ldr	r4, [pc, #52]	; (8009578 <__libc_init_array+0x3c>)
 8009544:	1b64      	subs	r4, r4, r5
 8009546:	10a4      	asrs	r4, r4, #2
 8009548:	42a6      	cmp	r6, r4
 800954a:	d109      	bne.n	8009560 <__libc_init_array+0x24>
 800954c:	f000 fc82 	bl	8009e54 <_init>
 8009550:	2600      	movs	r6, #0
 8009552:	4d0a      	ldr	r5, [pc, #40]	; (800957c <__libc_init_array+0x40>)
 8009554:	4c0a      	ldr	r4, [pc, #40]	; (8009580 <__libc_init_array+0x44>)
 8009556:	1b64      	subs	r4, r4, r5
 8009558:	10a4      	asrs	r4, r4, #2
 800955a:	42a6      	cmp	r6, r4
 800955c:	d105      	bne.n	800956a <__libc_init_array+0x2e>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	f855 3b04 	ldr.w	r3, [r5], #4
 8009564:	4798      	blx	r3
 8009566:	3601      	adds	r6, #1
 8009568:	e7ee      	b.n	8009548 <__libc_init_array+0xc>
 800956a:	f855 3b04 	ldr.w	r3, [r5], #4
 800956e:	4798      	blx	r3
 8009570:	3601      	adds	r6, #1
 8009572:	e7f2      	b.n	800955a <__libc_init_array+0x1e>
 8009574:	08009f04 	.word	0x08009f04
 8009578:	08009f04 	.word	0x08009f04
 800957c:	08009f04 	.word	0x08009f04
 8009580:	08009f08 	.word	0x08009f08

08009584 <__retarget_lock_acquire_recursive>:
 8009584:	4770      	bx	lr

08009586 <__retarget_lock_release_recursive>:
 8009586:	4770      	bx	lr

08009588 <strcpy>:
 8009588:	4603      	mov	r3, r0
 800958a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800958e:	f803 2b01 	strb.w	r2, [r3], #1
 8009592:	2a00      	cmp	r2, #0
 8009594:	d1f9      	bne.n	800958a <strcpy+0x2>
 8009596:	4770      	bx	lr

08009598 <memcpy>:
 8009598:	440a      	add	r2, r1
 800959a:	4291      	cmp	r1, r2
 800959c:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a0:	d100      	bne.n	80095a4 <memcpy+0xc>
 80095a2:	4770      	bx	lr
 80095a4:	b510      	push	{r4, lr}
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b0:	d1f9      	bne.n	80095a6 <memcpy+0xe>
 80095b2:	bd10      	pop	{r4, pc}

080095b4 <_free_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4605      	mov	r5, r0
 80095b8:	2900      	cmp	r1, #0
 80095ba:	d040      	beq.n	800963e <_free_r+0x8a>
 80095bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c0:	1f0c      	subs	r4, r1, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bfb8      	it	lt
 80095c6:	18e4      	addlt	r4, r4, r3
 80095c8:	f000 f8dc 	bl	8009784 <__malloc_lock>
 80095cc:	4a1c      	ldr	r2, [pc, #112]	; (8009640 <_free_r+0x8c>)
 80095ce:	6813      	ldr	r3, [r2, #0]
 80095d0:	b933      	cbnz	r3, 80095e0 <_free_r+0x2c>
 80095d2:	6063      	str	r3, [r4, #4]
 80095d4:	6014      	str	r4, [r2, #0]
 80095d6:	4628      	mov	r0, r5
 80095d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095dc:	f000 b8d8 	b.w	8009790 <__malloc_unlock>
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d908      	bls.n	80095f6 <_free_r+0x42>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf01      	itttt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	1809      	addeq	r1, r1, r0
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	e7ed      	b.n	80095d2 <_free_r+0x1e>
 80095f6:	461a      	mov	r2, r3
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b10b      	cbz	r3, 8009600 <_free_r+0x4c>
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d9fa      	bls.n	80095f6 <_free_r+0x42>
 8009600:	6811      	ldr	r1, [r2, #0]
 8009602:	1850      	adds	r0, r2, r1
 8009604:	42a0      	cmp	r0, r4
 8009606:	d10b      	bne.n	8009620 <_free_r+0x6c>
 8009608:	6820      	ldr	r0, [r4, #0]
 800960a:	4401      	add	r1, r0
 800960c:	1850      	adds	r0, r2, r1
 800960e:	4283      	cmp	r3, r0
 8009610:	6011      	str	r1, [r2, #0]
 8009612:	d1e0      	bne.n	80095d6 <_free_r+0x22>
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4408      	add	r0, r1
 800961a:	6010      	str	r0, [r2, #0]
 800961c:	6053      	str	r3, [r2, #4]
 800961e:	e7da      	b.n	80095d6 <_free_r+0x22>
 8009620:	d902      	bls.n	8009628 <_free_r+0x74>
 8009622:	230c      	movs	r3, #12
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	e7d6      	b.n	80095d6 <_free_r+0x22>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	1821      	adds	r1, r4, r0
 800962c:	428b      	cmp	r3, r1
 800962e:	bf01      	itttt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	1809      	addeq	r1, r1, r0
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	6054      	str	r4, [r2, #4]
 800963c:	e7cb      	b.n	80095d6 <_free_r+0x22>
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	200007c8 	.word	0x200007c8

08009644 <sbrk_aligned>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4e0e      	ldr	r6, [pc, #56]	; (8009680 <sbrk_aligned+0x3c>)
 8009648:	460c      	mov	r4, r1
 800964a:	6831      	ldr	r1, [r6, #0]
 800964c:	4605      	mov	r5, r0
 800964e:	b911      	cbnz	r1, 8009656 <sbrk_aligned+0x12>
 8009650:	f000 fbaa 	bl	8009da8 <_sbrk_r>
 8009654:	6030      	str	r0, [r6, #0]
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f000 fba5 	bl	8009da8 <_sbrk_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d00a      	beq.n	8009678 <sbrk_aligned+0x34>
 8009662:	1cc4      	adds	r4, r0, #3
 8009664:	f024 0403 	bic.w	r4, r4, #3
 8009668:	42a0      	cmp	r0, r4
 800966a:	d007      	beq.n	800967c <sbrk_aligned+0x38>
 800966c:	1a21      	subs	r1, r4, r0
 800966e:	4628      	mov	r0, r5
 8009670:	f000 fb9a 	bl	8009da8 <_sbrk_r>
 8009674:	3001      	adds	r0, #1
 8009676:	d101      	bne.n	800967c <sbrk_aligned+0x38>
 8009678:	f04f 34ff 	mov.w	r4, #4294967295
 800967c:	4620      	mov	r0, r4
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	200007cc 	.word	0x200007cc

08009684 <_malloc_r>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	1ccd      	adds	r5, r1, #3
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	2d00      	cmp	r5, #0
 8009698:	4607      	mov	r7, r0
 800969a:	db01      	blt.n	80096a0 <_malloc_r+0x1c>
 800969c:	42a9      	cmp	r1, r5
 800969e:	d905      	bls.n	80096ac <_malloc_r+0x28>
 80096a0:	230c      	movs	r3, #12
 80096a2:	2600      	movs	r6, #0
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	4630      	mov	r0, r6
 80096a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009780 <_malloc_r+0xfc>
 80096b0:	f000 f868 	bl	8009784 <__malloc_lock>
 80096b4:	f8d8 3000 	ldr.w	r3, [r8]
 80096b8:	461c      	mov	r4, r3
 80096ba:	bb5c      	cbnz	r4, 8009714 <_malloc_r+0x90>
 80096bc:	4629      	mov	r1, r5
 80096be:	4638      	mov	r0, r7
 80096c0:	f7ff ffc0 	bl	8009644 <sbrk_aligned>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	4604      	mov	r4, r0
 80096c8:	d155      	bne.n	8009776 <_malloc_r+0xf2>
 80096ca:	f8d8 4000 	ldr.w	r4, [r8]
 80096ce:	4626      	mov	r6, r4
 80096d0:	2e00      	cmp	r6, #0
 80096d2:	d145      	bne.n	8009760 <_malloc_r+0xdc>
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	d048      	beq.n	800976a <_malloc_r+0xe6>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	4631      	mov	r1, r6
 80096dc:	4638      	mov	r0, r7
 80096de:	eb04 0903 	add.w	r9, r4, r3
 80096e2:	f000 fb61 	bl	8009da8 <_sbrk_r>
 80096e6:	4581      	cmp	r9, r0
 80096e8:	d13f      	bne.n	800976a <_malloc_r+0xe6>
 80096ea:	6821      	ldr	r1, [r4, #0]
 80096ec:	4638      	mov	r0, r7
 80096ee:	1a6d      	subs	r5, r5, r1
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7ff ffa7 	bl	8009644 <sbrk_aligned>
 80096f6:	3001      	adds	r0, #1
 80096f8:	d037      	beq.n	800976a <_malloc_r+0xe6>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	442b      	add	r3, r5
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	f8d8 3000 	ldr.w	r3, [r8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d038      	beq.n	800977a <_malloc_r+0xf6>
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	42a2      	cmp	r2, r4
 800970c:	d12b      	bne.n	8009766 <_malloc_r+0xe2>
 800970e:	2200      	movs	r2, #0
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	e00f      	b.n	8009734 <_malloc_r+0xb0>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	1b52      	subs	r2, r2, r5
 8009718:	d41f      	bmi.n	800975a <_malloc_r+0xd6>
 800971a:	2a0b      	cmp	r2, #11
 800971c:	d917      	bls.n	800974e <_malloc_r+0xca>
 800971e:	1961      	adds	r1, r4, r5
 8009720:	42a3      	cmp	r3, r4
 8009722:	6025      	str	r5, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	6059      	strne	r1, [r3, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	bf08      	it	eq
 800972c:	f8c8 1000 	streq.w	r1, [r8]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4638      	mov	r0, r7
 8009736:	f104 060b 	add.w	r6, r4, #11
 800973a:	f000 f829 	bl	8009790 <__malloc_unlock>
 800973e:	f026 0607 	bic.w	r6, r6, #7
 8009742:	1d23      	adds	r3, r4, #4
 8009744:	1af2      	subs	r2, r6, r3
 8009746:	d0ae      	beq.n	80096a6 <_malloc_r+0x22>
 8009748:	1b9b      	subs	r3, r3, r6
 800974a:	50a3      	str	r3, [r4, r2]
 800974c:	e7ab      	b.n	80096a6 <_malloc_r+0x22>
 800974e:	42a3      	cmp	r3, r4
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	d1dd      	bne.n	8009710 <_malloc_r+0x8c>
 8009754:	f8c8 2000 	str.w	r2, [r8]
 8009758:	e7ec      	b.n	8009734 <_malloc_r+0xb0>
 800975a:	4623      	mov	r3, r4
 800975c:	6864      	ldr	r4, [r4, #4]
 800975e:	e7ac      	b.n	80096ba <_malloc_r+0x36>
 8009760:	4634      	mov	r4, r6
 8009762:	6876      	ldr	r6, [r6, #4]
 8009764:	e7b4      	b.n	80096d0 <_malloc_r+0x4c>
 8009766:	4613      	mov	r3, r2
 8009768:	e7cc      	b.n	8009704 <_malloc_r+0x80>
 800976a:	230c      	movs	r3, #12
 800976c:	4638      	mov	r0, r7
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	f000 f80e 	bl	8009790 <__malloc_unlock>
 8009774:	e797      	b.n	80096a6 <_malloc_r+0x22>
 8009776:	6025      	str	r5, [r4, #0]
 8009778:	e7dc      	b.n	8009734 <_malloc_r+0xb0>
 800977a:	605b      	str	r3, [r3, #4]
 800977c:	deff      	udf	#255	; 0xff
 800977e:	bf00      	nop
 8009780:	200007c8 	.word	0x200007c8

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_lock+0x8>)
 8009786:	f7ff befd 	b.w	8009584 <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	200007c4 	.word	0x200007c4

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	; (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff bef8 	b.w	8009586 <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	200007c4 	.word	0x200007c4

0800979c <__ssputs_r>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	461f      	mov	r7, r3
 80097a2:	688e      	ldr	r6, [r1, #8]
 80097a4:	4682      	mov	sl, r0
 80097a6:	42be      	cmp	r6, r7
 80097a8:	460c      	mov	r4, r1
 80097aa:	4690      	mov	r8, r2
 80097ac:	680b      	ldr	r3, [r1, #0]
 80097ae:	d82c      	bhi.n	800980a <__ssputs_r+0x6e>
 80097b0:	898a      	ldrh	r2, [r1, #12]
 80097b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097b6:	d026      	beq.n	8009806 <__ssputs_r+0x6a>
 80097b8:	6965      	ldr	r5, [r4, #20]
 80097ba:	6909      	ldr	r1, [r1, #16]
 80097bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097c0:	eba3 0901 	sub.w	r9, r3, r1
 80097c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097c8:	1c7b      	adds	r3, r7, #1
 80097ca:	444b      	add	r3, r9
 80097cc:	106d      	asrs	r5, r5, #1
 80097ce:	429d      	cmp	r5, r3
 80097d0:	bf38      	it	cc
 80097d2:	461d      	movcc	r5, r3
 80097d4:	0553      	lsls	r3, r2, #21
 80097d6:	d527      	bpl.n	8009828 <__ssputs_r+0x8c>
 80097d8:	4629      	mov	r1, r5
 80097da:	f7ff ff53 	bl	8009684 <_malloc_r>
 80097de:	4606      	mov	r6, r0
 80097e0:	b360      	cbz	r0, 800983c <__ssputs_r+0xa0>
 80097e2:	464a      	mov	r2, r9
 80097e4:	6921      	ldr	r1, [r4, #16]
 80097e6:	f7ff fed7 	bl	8009598 <memcpy>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	6126      	str	r6, [r4, #16]
 80097f8:	444e      	add	r6, r9
 80097fa:	6026      	str	r6, [r4, #0]
 80097fc:	463e      	mov	r6, r7
 80097fe:	6165      	str	r5, [r4, #20]
 8009800:	eba5 0509 	sub.w	r5, r5, r9
 8009804:	60a5      	str	r5, [r4, #8]
 8009806:	42be      	cmp	r6, r7
 8009808:	d900      	bls.n	800980c <__ssputs_r+0x70>
 800980a:	463e      	mov	r6, r7
 800980c:	4632      	mov	r2, r6
 800980e:	4641      	mov	r1, r8
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	f000 faaf 	bl	8009d74 <memmove>
 8009816:	2000      	movs	r0, #0
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	1b9b      	subs	r3, r3, r6
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	4433      	add	r3, r6
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009828:	462a      	mov	r2, r5
 800982a:	f000 fadb 	bl	8009de4 <_realloc_r>
 800982e:	4606      	mov	r6, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	d1e0      	bne.n	80097f6 <__ssputs_r+0x5a>
 8009834:	4650      	mov	r0, sl
 8009836:	6921      	ldr	r1, [r4, #16]
 8009838:	f7ff febc 	bl	80095b4 <_free_r>
 800983c:	230c      	movs	r3, #12
 800983e:	f8ca 3000 	str.w	r3, [sl]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	e7e9      	b.n	8009824 <__ssputs_r+0x88>

08009850 <_svfiprintf_r>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	4698      	mov	r8, r3
 8009856:	898b      	ldrh	r3, [r1, #12]
 8009858:	4607      	mov	r7, r0
 800985a:	061b      	lsls	r3, r3, #24
 800985c:	460d      	mov	r5, r1
 800985e:	4614      	mov	r4, r2
 8009860:	b09d      	sub	sp, #116	; 0x74
 8009862:	d50e      	bpl.n	8009882 <_svfiprintf_r+0x32>
 8009864:	690b      	ldr	r3, [r1, #16]
 8009866:	b963      	cbnz	r3, 8009882 <_svfiprintf_r+0x32>
 8009868:	2140      	movs	r1, #64	; 0x40
 800986a:	f7ff ff0b 	bl	8009684 <_malloc_r>
 800986e:	6028      	str	r0, [r5, #0]
 8009870:	6128      	str	r0, [r5, #16]
 8009872:	b920      	cbnz	r0, 800987e <_svfiprintf_r+0x2e>
 8009874:	230c      	movs	r3, #12
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e0d0      	b.n	8009a20 <_svfiprintf_r+0x1d0>
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	616b      	str	r3, [r5, #20]
 8009882:	2300      	movs	r3, #0
 8009884:	9309      	str	r3, [sp, #36]	; 0x24
 8009886:	2320      	movs	r3, #32
 8009888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800988c:	2330      	movs	r3, #48	; 0x30
 800988e:	f04f 0901 	mov.w	r9, #1
 8009892:	f8cd 800c 	str.w	r8, [sp, #12]
 8009896:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009a38 <_svfiprintf_r+0x1e8>
 800989a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800989e:	4623      	mov	r3, r4
 80098a0:	469a      	mov	sl, r3
 80098a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a6:	b10a      	cbz	r2, 80098ac <_svfiprintf_r+0x5c>
 80098a8:	2a25      	cmp	r2, #37	; 0x25
 80098aa:	d1f9      	bne.n	80098a0 <_svfiprintf_r+0x50>
 80098ac:	ebba 0b04 	subs.w	fp, sl, r4
 80098b0:	d00b      	beq.n	80098ca <_svfiprintf_r+0x7a>
 80098b2:	465b      	mov	r3, fp
 80098b4:	4622      	mov	r2, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	4638      	mov	r0, r7
 80098ba:	f7ff ff6f 	bl	800979c <__ssputs_r>
 80098be:	3001      	adds	r0, #1
 80098c0:	f000 80a9 	beq.w	8009a16 <_svfiprintf_r+0x1c6>
 80098c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c6:	445a      	add	r2, fp
 80098c8:	9209      	str	r2, [sp, #36]	; 0x24
 80098ca:	f89a 3000 	ldrb.w	r3, [sl]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 80a1 	beq.w	8009a16 <_svfiprintf_r+0x1c6>
 80098d4:	2300      	movs	r3, #0
 80098d6:	f04f 32ff 	mov.w	r2, #4294967295
 80098da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098de:	f10a 0a01 	add.w	sl, sl, #1
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	9307      	str	r3, [sp, #28]
 80098e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ea:	931a      	str	r3, [sp, #104]	; 0x68
 80098ec:	4654      	mov	r4, sl
 80098ee:	2205      	movs	r2, #5
 80098f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f4:	4850      	ldr	r0, [pc, #320]	; (8009a38 <_svfiprintf_r+0x1e8>)
 80098f6:	f000 fa67 	bl	8009dc8 <memchr>
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	b9d8      	cbnz	r0, 8009936 <_svfiprintf_r+0xe6>
 80098fe:	06d0      	lsls	r0, r2, #27
 8009900:	bf44      	itt	mi
 8009902:	2320      	movmi	r3, #32
 8009904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009908:	0711      	lsls	r1, r2, #28
 800990a:	bf44      	itt	mi
 800990c:	232b      	movmi	r3, #43	; 0x2b
 800990e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009912:	f89a 3000 	ldrb.w	r3, [sl]
 8009916:	2b2a      	cmp	r3, #42	; 0x2a
 8009918:	d015      	beq.n	8009946 <_svfiprintf_r+0xf6>
 800991a:	4654      	mov	r4, sl
 800991c:	2000      	movs	r0, #0
 800991e:	f04f 0c0a 	mov.w	ip, #10
 8009922:	9a07      	ldr	r2, [sp, #28]
 8009924:	4621      	mov	r1, r4
 8009926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800992a:	3b30      	subs	r3, #48	; 0x30
 800992c:	2b09      	cmp	r3, #9
 800992e:	d94d      	bls.n	80099cc <_svfiprintf_r+0x17c>
 8009930:	b1b0      	cbz	r0, 8009960 <_svfiprintf_r+0x110>
 8009932:	9207      	str	r2, [sp, #28]
 8009934:	e014      	b.n	8009960 <_svfiprintf_r+0x110>
 8009936:	eba0 0308 	sub.w	r3, r0, r8
 800993a:	fa09 f303 	lsl.w	r3, r9, r3
 800993e:	4313      	orrs	r3, r2
 8009940:	46a2      	mov	sl, r4
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	e7d2      	b.n	80098ec <_svfiprintf_r+0x9c>
 8009946:	9b03      	ldr	r3, [sp, #12]
 8009948:	1d19      	adds	r1, r3, #4
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	9103      	str	r1, [sp, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	bfbb      	ittet	lt
 8009952:	425b      	neglt	r3, r3
 8009954:	f042 0202 	orrlt.w	r2, r2, #2
 8009958:	9307      	strge	r3, [sp, #28]
 800995a:	9307      	strlt	r3, [sp, #28]
 800995c:	bfb8      	it	lt
 800995e:	9204      	strlt	r2, [sp, #16]
 8009960:	7823      	ldrb	r3, [r4, #0]
 8009962:	2b2e      	cmp	r3, #46	; 0x2e
 8009964:	d10c      	bne.n	8009980 <_svfiprintf_r+0x130>
 8009966:	7863      	ldrb	r3, [r4, #1]
 8009968:	2b2a      	cmp	r3, #42	; 0x2a
 800996a:	d134      	bne.n	80099d6 <_svfiprintf_r+0x186>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	3402      	adds	r4, #2
 8009970:	1d1a      	adds	r2, r3, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	9203      	str	r2, [sp, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfb8      	it	lt
 800997a:	f04f 33ff 	movlt.w	r3, #4294967295
 800997e:	9305      	str	r3, [sp, #20]
 8009980:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009a3c <_svfiprintf_r+0x1ec>
 8009984:	2203      	movs	r2, #3
 8009986:	4650      	mov	r0, sl
 8009988:	7821      	ldrb	r1, [r4, #0]
 800998a:	f000 fa1d 	bl	8009dc8 <memchr>
 800998e:	b138      	cbz	r0, 80099a0 <_svfiprintf_r+0x150>
 8009990:	2240      	movs	r2, #64	; 0x40
 8009992:	9b04      	ldr	r3, [sp, #16]
 8009994:	eba0 000a 	sub.w	r0, r0, sl
 8009998:	4082      	lsls	r2, r0
 800999a:	4313      	orrs	r3, r2
 800999c:	3401      	adds	r4, #1
 800999e:	9304      	str	r3, [sp, #16]
 80099a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a4:	2206      	movs	r2, #6
 80099a6:	4826      	ldr	r0, [pc, #152]	; (8009a40 <_svfiprintf_r+0x1f0>)
 80099a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ac:	f000 fa0c 	bl	8009dc8 <memchr>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d038      	beq.n	8009a26 <_svfiprintf_r+0x1d6>
 80099b4:	4b23      	ldr	r3, [pc, #140]	; (8009a44 <_svfiprintf_r+0x1f4>)
 80099b6:	bb1b      	cbnz	r3, 8009a00 <_svfiprintf_r+0x1b0>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	3307      	adds	r3, #7
 80099bc:	f023 0307 	bic.w	r3, r3, #7
 80099c0:	3308      	adds	r3, #8
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c6:	4433      	add	r3, r6
 80099c8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ca:	e768      	b.n	800989e <_svfiprintf_r+0x4e>
 80099cc:	460c      	mov	r4, r1
 80099ce:	2001      	movs	r0, #1
 80099d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099d4:	e7a6      	b.n	8009924 <_svfiprintf_r+0xd4>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f04f 0c0a 	mov.w	ip, #10
 80099dc:	4619      	mov	r1, r3
 80099de:	3401      	adds	r4, #1
 80099e0:	9305      	str	r3, [sp, #20]
 80099e2:	4620      	mov	r0, r4
 80099e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e8:	3a30      	subs	r2, #48	; 0x30
 80099ea:	2a09      	cmp	r2, #9
 80099ec:	d903      	bls.n	80099f6 <_svfiprintf_r+0x1a6>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0c6      	beq.n	8009980 <_svfiprintf_r+0x130>
 80099f2:	9105      	str	r1, [sp, #20]
 80099f4:	e7c4      	b.n	8009980 <_svfiprintf_r+0x130>
 80099f6:	4604      	mov	r4, r0
 80099f8:	2301      	movs	r3, #1
 80099fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80099fe:	e7f0      	b.n	80099e2 <_svfiprintf_r+0x192>
 8009a00:	ab03      	add	r3, sp, #12
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	462a      	mov	r2, r5
 8009a06:	4638      	mov	r0, r7
 8009a08:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <_svfiprintf_r+0x1f8>)
 8009a0a:	a904      	add	r1, sp, #16
 8009a0c:	f3af 8000 	nop.w
 8009a10:	1c42      	adds	r2, r0, #1
 8009a12:	4606      	mov	r6, r0
 8009a14:	d1d6      	bne.n	80099c4 <_svfiprintf_r+0x174>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	065b      	lsls	r3, r3, #25
 8009a1a:	f53f af2d 	bmi.w	8009878 <_svfiprintf_r+0x28>
 8009a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a20:	b01d      	add	sp, #116	; 0x74
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	ab03      	add	r3, sp, #12
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <_svfiprintf_r+0x1f8>)
 8009a30:	a904      	add	r1, sp, #16
 8009a32:	f000 f87d 	bl	8009b30 <_printf_i>
 8009a36:	e7eb      	b.n	8009a10 <_svfiprintf_r+0x1c0>
 8009a38:	08009ed1 	.word	0x08009ed1
 8009a3c:	08009ed7 	.word	0x08009ed7
 8009a40:	08009edb 	.word	0x08009edb
 8009a44:	00000000 	.word	0x00000000
 8009a48:	0800979d 	.word	0x0800979d

08009a4c <_printf_common>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	4616      	mov	r6, r2
 8009a52:	4699      	mov	r9, r3
 8009a54:	688a      	ldr	r2, [r1, #8]
 8009a56:	690b      	ldr	r3, [r1, #16]
 8009a58:	4607      	mov	r7, r0
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	bfb8      	it	lt
 8009a5e:	4613      	movlt	r3, r2
 8009a60:	6033      	str	r3, [r6, #0]
 8009a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a66:	460c      	mov	r4, r1
 8009a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a6c:	b10a      	cbz	r2, 8009a72 <_printf_common+0x26>
 8009a6e:	3301      	adds	r3, #1
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	0699      	lsls	r1, r3, #26
 8009a76:	bf42      	ittt	mi
 8009a78:	6833      	ldrmi	r3, [r6, #0]
 8009a7a:	3302      	addmi	r3, #2
 8009a7c:	6033      	strmi	r3, [r6, #0]
 8009a7e:	6825      	ldr	r5, [r4, #0]
 8009a80:	f015 0506 	ands.w	r5, r5, #6
 8009a84:	d106      	bne.n	8009a94 <_printf_common+0x48>
 8009a86:	f104 0a19 	add.w	sl, r4, #25
 8009a8a:	68e3      	ldr	r3, [r4, #12]
 8009a8c:	6832      	ldr	r2, [r6, #0]
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	dc2b      	bgt.n	8009aec <_printf_common+0xa0>
 8009a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a98:	1e13      	subs	r3, r2, #0
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	bf18      	it	ne
 8009a9e:	2301      	movne	r3, #1
 8009aa0:	0692      	lsls	r2, r2, #26
 8009aa2:	d430      	bmi.n	8009b06 <_printf_common+0xba>
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aac:	47c0      	blx	r8
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d023      	beq.n	8009afa <_printf_common+0xae>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	6922      	ldr	r2, [r4, #16]
 8009ab6:	f003 0306 	and.w	r3, r3, #6
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	bf14      	ite	ne
 8009abe:	2500      	movne	r5, #0
 8009ac0:	6833      	ldreq	r3, [r6, #0]
 8009ac2:	f04f 0600 	mov.w	r6, #0
 8009ac6:	bf08      	it	eq
 8009ac8:	68e5      	ldreq	r5, [r4, #12]
 8009aca:	f104 041a 	add.w	r4, r4, #26
 8009ace:	bf08      	it	eq
 8009ad0:	1aed      	subeq	r5, r5, r3
 8009ad2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009ad6:	bf08      	it	eq
 8009ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009adc:	4293      	cmp	r3, r2
 8009ade:	bfc4      	itt	gt
 8009ae0:	1a9b      	subgt	r3, r3, r2
 8009ae2:	18ed      	addgt	r5, r5, r3
 8009ae4:	42b5      	cmp	r5, r6
 8009ae6:	d11a      	bne.n	8009b1e <_printf_common+0xd2>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	e008      	b.n	8009afe <_printf_common+0xb2>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4652      	mov	r2, sl
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d103      	bne.n	8009b02 <_printf_common+0xb6>
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	3501      	adds	r5, #1
 8009b04:	e7c1      	b.n	8009a8a <_printf_common+0x3e>
 8009b06:	2030      	movs	r0, #48	; 0x30
 8009b08:	18e1      	adds	r1, r4, r3
 8009b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b14:	4422      	add	r2, r4
 8009b16:	3302      	adds	r3, #2
 8009b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b1c:	e7c2      	b.n	8009aa4 <_printf_common+0x58>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4622      	mov	r2, r4
 8009b22:	4649      	mov	r1, r9
 8009b24:	4638      	mov	r0, r7
 8009b26:	47c0      	blx	r8
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d0e6      	beq.n	8009afa <_printf_common+0xae>
 8009b2c:	3601      	adds	r6, #1
 8009b2e:	e7d9      	b.n	8009ae4 <_printf_common+0x98>

08009b30 <_printf_i>:
 8009b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	7e0f      	ldrb	r7, [r1, #24]
 8009b36:	4691      	mov	r9, r2
 8009b38:	2f78      	cmp	r7, #120	; 0x78
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	469a      	mov	sl, r3
 8009b40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b46:	d807      	bhi.n	8009b58 <_printf_i+0x28>
 8009b48:	2f62      	cmp	r7, #98	; 0x62
 8009b4a:	d80a      	bhi.n	8009b62 <_printf_i+0x32>
 8009b4c:	2f00      	cmp	r7, #0
 8009b4e:	f000 80d5 	beq.w	8009cfc <_printf_i+0x1cc>
 8009b52:	2f58      	cmp	r7, #88	; 0x58
 8009b54:	f000 80c1 	beq.w	8009cda <_printf_i+0x1aa>
 8009b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b60:	e03a      	b.n	8009bd8 <_printf_i+0xa8>
 8009b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b66:	2b15      	cmp	r3, #21
 8009b68:	d8f6      	bhi.n	8009b58 <_printf_i+0x28>
 8009b6a:	a101      	add	r1, pc, #4	; (adr r1, 8009b70 <_printf_i+0x40>)
 8009b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bdd 	.word	0x08009bdd
 8009b78:	08009b59 	.word	0x08009b59
 8009b7c:	08009b59 	.word	0x08009b59
 8009b80:	08009b59 	.word	0x08009b59
 8009b84:	08009b59 	.word	0x08009b59
 8009b88:	08009bdd 	.word	0x08009bdd
 8009b8c:	08009b59 	.word	0x08009b59
 8009b90:	08009b59 	.word	0x08009b59
 8009b94:	08009b59 	.word	0x08009b59
 8009b98:	08009b59 	.word	0x08009b59
 8009b9c:	08009ce3 	.word	0x08009ce3
 8009ba0:	08009c09 	.word	0x08009c09
 8009ba4:	08009c9d 	.word	0x08009c9d
 8009ba8:	08009b59 	.word	0x08009b59
 8009bac:	08009b59 	.word	0x08009b59
 8009bb0:	08009d05 	.word	0x08009d05
 8009bb4:	08009b59 	.word	0x08009b59
 8009bb8:	08009c09 	.word	0x08009c09
 8009bbc:	08009b59 	.word	0x08009b59
 8009bc0:	08009b59 	.word	0x08009b59
 8009bc4:	08009ca5 	.word	0x08009ca5
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	1d1a      	adds	r2, r3, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	602a      	str	r2, [r5, #0]
 8009bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e0a0      	b.n	8009d1e <_printf_i+0x1ee>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	0607      	lsls	r7, r0, #24
 8009be2:	f103 0104 	add.w	r1, r3, #4
 8009be6:	6029      	str	r1, [r5, #0]
 8009be8:	d501      	bpl.n	8009bee <_printf_i+0xbe>
 8009bea:	681e      	ldr	r6, [r3, #0]
 8009bec:	e003      	b.n	8009bf6 <_printf_i+0xc6>
 8009bee:	0646      	lsls	r6, r0, #25
 8009bf0:	d5fb      	bpl.n	8009bea <_printf_i+0xba>
 8009bf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	da03      	bge.n	8009c02 <_printf_i+0xd2>
 8009bfa:	232d      	movs	r3, #45	; 0x2d
 8009bfc:	4276      	negs	r6, r6
 8009bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c02:	230a      	movs	r3, #10
 8009c04:	4859      	ldr	r0, [pc, #356]	; (8009d6c <_printf_i+0x23c>)
 8009c06:	e012      	b.n	8009c2e <_printf_i+0xfe>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	1d19      	adds	r1, r3, #4
 8009c0e:	6029      	str	r1, [r5, #0]
 8009c10:	0605      	lsls	r5, r0, #24
 8009c12:	d501      	bpl.n	8009c18 <_printf_i+0xe8>
 8009c14:	681e      	ldr	r6, [r3, #0]
 8009c16:	e002      	b.n	8009c1e <_printf_i+0xee>
 8009c18:	0641      	lsls	r1, r0, #25
 8009c1a:	d5fb      	bpl.n	8009c14 <_printf_i+0xe4>
 8009c1c:	881e      	ldrh	r6, [r3, #0]
 8009c1e:	2f6f      	cmp	r7, #111	; 0x6f
 8009c20:	bf0c      	ite	eq
 8009c22:	2308      	moveq	r3, #8
 8009c24:	230a      	movne	r3, #10
 8009c26:	4851      	ldr	r0, [pc, #324]	; (8009d6c <_printf_i+0x23c>)
 8009c28:	2100      	movs	r1, #0
 8009c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c2e:	6865      	ldr	r5, [r4, #4]
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	bfa8      	it	ge
 8009c34:	6821      	ldrge	r1, [r4, #0]
 8009c36:	60a5      	str	r5, [r4, #8]
 8009c38:	bfa4      	itt	ge
 8009c3a:	f021 0104 	bicge.w	r1, r1, #4
 8009c3e:	6021      	strge	r1, [r4, #0]
 8009c40:	b90e      	cbnz	r6, 8009c46 <_printf_i+0x116>
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	d04b      	beq.n	8009cde <_printf_i+0x1ae>
 8009c46:	4615      	mov	r5, r2
 8009c48:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c4c:	fb03 6711 	mls	r7, r3, r1, r6
 8009c50:	5dc7      	ldrb	r7, [r0, r7]
 8009c52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c56:	4637      	mov	r7, r6
 8009c58:	42bb      	cmp	r3, r7
 8009c5a:	460e      	mov	r6, r1
 8009c5c:	d9f4      	bls.n	8009c48 <_printf_i+0x118>
 8009c5e:	2b08      	cmp	r3, #8
 8009c60:	d10b      	bne.n	8009c7a <_printf_i+0x14a>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	07de      	lsls	r6, r3, #31
 8009c66:	d508      	bpl.n	8009c7a <_printf_i+0x14a>
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	6861      	ldr	r1, [r4, #4]
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	bfde      	ittt	le
 8009c70:	2330      	movle	r3, #48	; 0x30
 8009c72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c7a:	1b52      	subs	r2, r2, r5
 8009c7c:	6122      	str	r2, [r4, #16]
 8009c7e:	464b      	mov	r3, r9
 8009c80:	4621      	mov	r1, r4
 8009c82:	4640      	mov	r0, r8
 8009c84:	f8cd a000 	str.w	sl, [sp]
 8009c88:	aa03      	add	r2, sp, #12
 8009c8a:	f7ff fedf 	bl	8009a4c <_printf_common>
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d14a      	bne.n	8009d28 <_printf_i+0x1f8>
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	b004      	add	sp, #16
 8009c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	f043 0320 	orr.w	r3, r3, #32
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	2778      	movs	r7, #120	; 0x78
 8009ca6:	4832      	ldr	r0, [pc, #200]	; (8009d70 <_printf_i+0x240>)
 8009ca8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	6829      	ldr	r1, [r5, #0]
 8009cb0:	061f      	lsls	r7, r3, #24
 8009cb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cb6:	d402      	bmi.n	8009cbe <_printf_i+0x18e>
 8009cb8:	065f      	lsls	r7, r3, #25
 8009cba:	bf48      	it	mi
 8009cbc:	b2b6      	uxthmi	r6, r6
 8009cbe:	07df      	lsls	r7, r3, #31
 8009cc0:	bf48      	it	mi
 8009cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8009cc6:	6029      	str	r1, [r5, #0]
 8009cc8:	bf48      	it	mi
 8009cca:	6023      	strmi	r3, [r4, #0]
 8009ccc:	b91e      	cbnz	r6, 8009cd6 <_printf_i+0x1a6>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	f023 0320 	bic.w	r3, r3, #32
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	2310      	movs	r3, #16
 8009cd8:	e7a6      	b.n	8009c28 <_printf_i+0xf8>
 8009cda:	4824      	ldr	r0, [pc, #144]	; (8009d6c <_printf_i+0x23c>)
 8009cdc:	e7e4      	b.n	8009ca8 <_printf_i+0x178>
 8009cde:	4615      	mov	r5, r2
 8009ce0:	e7bd      	b.n	8009c5e <_printf_i+0x12e>
 8009ce2:	682b      	ldr	r3, [r5, #0]
 8009ce4:	6826      	ldr	r6, [r4, #0]
 8009ce6:	1d18      	adds	r0, r3, #4
 8009ce8:	6961      	ldr	r1, [r4, #20]
 8009cea:	6028      	str	r0, [r5, #0]
 8009cec:	0635      	lsls	r5, r6, #24
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	d501      	bpl.n	8009cf6 <_printf_i+0x1c6>
 8009cf2:	6019      	str	r1, [r3, #0]
 8009cf4:	e002      	b.n	8009cfc <_printf_i+0x1cc>
 8009cf6:	0670      	lsls	r0, r6, #25
 8009cf8:	d5fb      	bpl.n	8009cf2 <_printf_i+0x1c2>
 8009cfa:	8019      	strh	r1, [r3, #0]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4615      	mov	r5, r2
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	e7bc      	b.n	8009c7e <_printf_i+0x14e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	2100      	movs	r1, #0
 8009d08:	1d1a      	adds	r2, r3, #4
 8009d0a:	602a      	str	r2, [r5, #0]
 8009d0c:	681d      	ldr	r5, [r3, #0]
 8009d0e:	6862      	ldr	r2, [r4, #4]
 8009d10:	4628      	mov	r0, r5
 8009d12:	f000 f859 	bl	8009dc8 <memchr>
 8009d16:	b108      	cbz	r0, 8009d1c <_printf_i+0x1ec>
 8009d18:	1b40      	subs	r0, r0, r5
 8009d1a:	6060      	str	r0, [r4, #4]
 8009d1c:	6863      	ldr	r3, [r4, #4]
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	2300      	movs	r3, #0
 8009d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d26:	e7aa      	b.n	8009c7e <_printf_i+0x14e>
 8009d28:	462a      	mov	r2, r5
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	47d0      	blx	sl
 8009d32:	3001      	adds	r0, #1
 8009d34:	d0ad      	beq.n	8009c92 <_printf_i+0x162>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	079b      	lsls	r3, r3, #30
 8009d3a:	d413      	bmi.n	8009d64 <_printf_i+0x234>
 8009d3c:	68e0      	ldr	r0, [r4, #12]
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	4298      	cmp	r0, r3
 8009d42:	bfb8      	it	lt
 8009d44:	4618      	movlt	r0, r3
 8009d46:	e7a6      	b.n	8009c96 <_printf_i+0x166>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	4640      	mov	r0, r8
 8009d50:	47d0      	blx	sl
 8009d52:	3001      	adds	r0, #1
 8009d54:	d09d      	beq.n	8009c92 <_printf_i+0x162>
 8009d56:	3501      	adds	r5, #1
 8009d58:	68e3      	ldr	r3, [r4, #12]
 8009d5a:	9903      	ldr	r1, [sp, #12]
 8009d5c:	1a5b      	subs	r3, r3, r1
 8009d5e:	42ab      	cmp	r3, r5
 8009d60:	dcf2      	bgt.n	8009d48 <_printf_i+0x218>
 8009d62:	e7eb      	b.n	8009d3c <_printf_i+0x20c>
 8009d64:	2500      	movs	r5, #0
 8009d66:	f104 0619 	add.w	r6, r4, #25
 8009d6a:	e7f5      	b.n	8009d58 <_printf_i+0x228>
 8009d6c:	08009ee2 	.word	0x08009ee2
 8009d70:	08009ef3 	.word	0x08009ef3

08009d74 <memmove>:
 8009d74:	4288      	cmp	r0, r1
 8009d76:	b510      	push	{r4, lr}
 8009d78:	eb01 0402 	add.w	r4, r1, r2
 8009d7c:	d902      	bls.n	8009d84 <memmove+0x10>
 8009d7e:	4284      	cmp	r4, r0
 8009d80:	4623      	mov	r3, r4
 8009d82:	d807      	bhi.n	8009d94 <memmove+0x20>
 8009d84:	1e43      	subs	r3, r0, #1
 8009d86:	42a1      	cmp	r1, r4
 8009d88:	d008      	beq.n	8009d9c <memmove+0x28>
 8009d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d92:	e7f8      	b.n	8009d86 <memmove+0x12>
 8009d94:	4601      	mov	r1, r0
 8009d96:	4402      	add	r2, r0
 8009d98:	428a      	cmp	r2, r1
 8009d9a:	d100      	bne.n	8009d9e <memmove+0x2a>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009da6:	e7f7      	b.n	8009d98 <memmove+0x24>

08009da8 <_sbrk_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	2300      	movs	r3, #0
 8009dac:	4d05      	ldr	r5, [pc, #20]	; (8009dc4 <_sbrk_r+0x1c>)
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f6 fd60 	bl	8000878 <_sbrk>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_sbrk_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_sbrk_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	200007c0 	.word	0x200007c0

08009dc8 <memchr>:
 8009dc8:	4603      	mov	r3, r0
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	b2c9      	uxtb	r1, r1
 8009dce:	4402      	add	r2, r0
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	d101      	bne.n	8009dda <memchr+0x12>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e003      	b.n	8009de2 <memchr+0x1a>
 8009dda:	7804      	ldrb	r4, [r0, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	428c      	cmp	r4, r1
 8009de0:	d1f6      	bne.n	8009dd0 <memchr+0x8>
 8009de2:	bd10      	pop	{r4, pc}

08009de4 <_realloc_r>:
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	4680      	mov	r8, r0
 8009dea:	4614      	mov	r4, r2
 8009dec:	460e      	mov	r6, r1
 8009dee:	b921      	cbnz	r1, 8009dfa <_realloc_r+0x16>
 8009df0:	4611      	mov	r1, r2
 8009df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df6:	f7ff bc45 	b.w	8009684 <_malloc_r>
 8009dfa:	b92a      	cbnz	r2, 8009e08 <_realloc_r+0x24>
 8009dfc:	f7ff fbda 	bl	80095b4 <_free_r>
 8009e00:	4625      	mov	r5, r4
 8009e02:	4628      	mov	r0, r5
 8009e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e08:	f000 f81b 	bl	8009e42 <_malloc_usable_size_r>
 8009e0c:	4284      	cmp	r4, r0
 8009e0e:	4607      	mov	r7, r0
 8009e10:	d802      	bhi.n	8009e18 <_realloc_r+0x34>
 8009e12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e16:	d812      	bhi.n	8009e3e <_realloc_r+0x5a>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	f7ff fc32 	bl	8009684 <_malloc_r>
 8009e20:	4605      	mov	r5, r0
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0ed      	beq.n	8009e02 <_realloc_r+0x1e>
 8009e26:	42bc      	cmp	r4, r7
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	bf28      	it	cs
 8009e2e:	463a      	movcs	r2, r7
 8009e30:	f7ff fbb2 	bl	8009598 <memcpy>
 8009e34:	4631      	mov	r1, r6
 8009e36:	4640      	mov	r0, r8
 8009e38:	f7ff fbbc 	bl	80095b4 <_free_r>
 8009e3c:	e7e1      	b.n	8009e02 <_realloc_r+0x1e>
 8009e3e:	4635      	mov	r5, r6
 8009e40:	e7df      	b.n	8009e02 <_realloc_r+0x1e>

08009e42 <_malloc_usable_size_r>:
 8009e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e46:	1f18      	subs	r0, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfbc      	itt	lt
 8009e4c:	580b      	ldrlt	r3, [r1, r0]
 8009e4e:	18c0      	addlt	r0, r0, r3
 8009e50:	4770      	bx	lr
	...

08009e54 <_init>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr

08009e60 <_fini>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr
