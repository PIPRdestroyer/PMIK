
Projekt_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b0  080090b0  000202cc  2**0
                  CONTENTS
  4 .ARM          00000000  080090b0  080090b0  000202cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090b0  080090b0  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b4  080090b4  000190b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080090b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200002cc  08009384  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08009384  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f6d  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000344f  00000000  00000000  000392a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109c  00000000  00000000  0003dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019966  00000000  00000000  0003ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fae  00000000  00000000  0005864a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093ddd  00000000  00000000  000725f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a04  00000000  00000000  001063d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0010bddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002cc 	.word	0x200002cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009058 	.word	0x08009058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002d0 	.word	0x200002d0
 8000148:	08009058 	.word	0x08009058

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2uiz>:
 8000368:	0042      	lsls	r2, r0, #1
 800036a:	d20e      	bcs.n	800038a <__aeabi_f2uiz+0x22>
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000370:	d30b      	bcc.n	800038a <__aeabi_f2uiz+0x22>
 8000372:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d409      	bmi.n	8000390 <__aeabi_f2uiz+0x28>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000384:	fa23 f002 	lsr.w	r0, r3, r2
 8000388:	4770      	bx	lr
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	4770      	bx	lr
 8000390:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000394:	d101      	bne.n	800039a <__aeabi_f2uiz+0x32>
 8000396:	0242      	lsls	r2, r0, #9
 8000398:	d102      	bne.n	80003a0 <__aeabi_f2uiz+0x38>
 800039a:	f04f 30ff 	mov.w	r0, #4294967295
 800039e:	4770      	bx	lr
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b52      	ldr	r3, [pc, #328]	; (8000508 <MX_GPIO_Init+0x160>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a51      	ldr	r2, [pc, #324]	; (8000508 <MX_GPIO_Init+0x160>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b4f      	ldr	r3, [pc, #316]	; (8000508 <MX_GPIO_Init+0x160>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b4c      	ldr	r3, [pc, #304]	; (8000508 <MX_GPIO_Init+0x160>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a4b      	ldr	r2, [pc, #300]	; (8000508 <MX_GPIO_Init+0x160>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b49      	ldr	r3, [pc, #292]	; (8000508 <MX_GPIO_Init+0x160>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b46      	ldr	r3, [pc, #280]	; (8000508 <MX_GPIO_Init+0x160>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a45      	ldr	r2, [pc, #276]	; (8000508 <MX_GPIO_Init+0x160>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b43      	ldr	r3, [pc, #268]	; (8000508 <MX_GPIO_Init+0x160>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b40      	ldr	r3, [pc, #256]	; (8000508 <MX_GPIO_Init+0x160>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a3f      	ldr	r2, [pc, #252]	; (8000508 <MX_GPIO_Init+0x160>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b3d      	ldr	r3, [pc, #244]	; (8000508 <MX_GPIO_Init+0x160>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f248 0120 	movw	r1, #32800	; 0x8020
 8000422:	483a      	ldr	r0, [pc, #232]	; (800050c <MX_GPIO_Init+0x164>)
 8000424:	f000 ff04 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2101      	movs	r1, #1
 800042c:	4838      	ldr	r0, [pc, #224]	; (8000510 <MX_GPIO_Init+0x168>)
 800042e:	f000 feff 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	4837      	ldr	r0, [pc, #220]	; (8000514 <MX_GPIO_Init+0x16c>)
 8000438:	f000 fefa 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000442:	4b35      	ldr	r3, [pc, #212]	; (8000518 <MX_GPIO_Init+0x170>)
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	4830      	ldr	r0, [pc, #192]	; (8000514 <MX_GPIO_Init+0x16c>)
 8000452:	f000 fd69 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT_Pin;
 8000456:	f248 0320 	movw	r3, #32800	; 0x8020
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4827      	ldr	r0, [pc, #156]	; (800050c <MX_GPIO_Init+0x164>)
 8000470:	f000 fd5a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000474:	2301      	movs	r3, #1
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4821      	ldr	r0, [pc, #132]	; (8000510 <MX_GPIO_Init+0x168>)
 800048c:	f000 fd4c 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000490:	2302      	movs	r3, #2
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000494:	4b21      	ldr	r3, [pc, #132]	; (800051c <MX_GPIO_Init+0x174>)
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000498:	2301      	movs	r3, #1
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	481b      	ldr	r0, [pc, #108]	; (8000510 <MX_GPIO_Init+0x168>)
 80004a4:	f000 fd40 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_Pin;
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4815      	ldr	r0, [pc, #84]	; (8000514 <MX_GPIO_Init+0x16c>)
 80004c0:	f000 fd32 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 80004c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <MX_GPIO_Init+0x174>)
 80004cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <MX_GPIO_Init+0x164>)
 80004da:	f000 fd25 	bl	8000f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	2007      	movs	r0, #7
 80004e4:	f000 fcdb 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004e8:	2007      	movs	r0, #7
 80004ea:	f000 fcf4 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2028      	movs	r0, #40	; 0x28
 80004f4:	f000 fcd3 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004f8:	2028      	movs	r0, #40	; 0x28
 80004fa:	f000 fcec 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3720      	adds	r7, #32
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800
 8000510:	40010c00 	.word	0x40010c00
 8000514:	40011000 	.word	0x40011000
 8000518:	10110000 	.word	0x10110000
 800051c:	10210000 	.word	0x10210000

08000520 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_I2C1_Init+0x50>)
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <MX_I2C1_Init+0x54>)
 8000528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_I2C1_Init+0x50>)
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <MX_I2C1_Init+0x58>)
 800052e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_I2C1_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_I2C1_Init+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_I2C1_Init+0x50>)
 800053e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_I2C1_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_I2C1_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_I2C1_Init+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_I2C1_Init+0x50>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_I2C1_Init+0x50>)
 800055e:	f000 feb1 	bl	80012c4 <HAL_I2C_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000568:	f000 f95b 	bl	8000822 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200002e8 	.word	0x200002e8
 8000574:	40005400 	.word	0x40005400
 8000578:	000186a0 	.word	0x000186a0

0800057c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C2_Init+0x50>)
 8000582:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_I2C2_Init+0x54>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C2_Init+0x50>)
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_I2C2_Init+0x58>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C2_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C2_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_I2C2_Init+0x50>)
 800059a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800059e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C2_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_I2C2_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_I2C2_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_I2C2_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_I2C2_Init+0x50>)
 80005ba:	f000 fe83 	bl	80012c4 <HAL_I2C_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80005c4:	f000 f92d 	bl	8000822 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000033c 	.word	0x2000033c
 80005d0:	40005800 	.word	0x40005800
 80005d4:	000186a0 	.word	0x000186a0

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <HAL_I2C_MspInit+0xc8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d124      	bne.n	8000642 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000610:	23c0      	movs	r3, #192	; 0xc0
 8000612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000614:	2312      	movs	r3, #18
 8000616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0318 	add.w	r3, r7, #24
 8000620:	4619      	mov	r1, r3
 8000622:	4821      	ldr	r0, [pc, #132]	; (80006a8 <HAL_I2C_MspInit+0xd0>)
 8000624:	f000 fc80 	bl	8000f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 800062e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000632:	61d3      	str	r3, [r2, #28]
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000640:	e029      	b.n	8000696 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_I2C_MspInit+0xd4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d124      	bne.n	8000696 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000664:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066a:	2312      	movs	r3, #18
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <HAL_I2C_MspInit+0xd0>)
 800067a:	f000 fc55 	bl	8000f28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 8000684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_I2C_MspInit+0xcc>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	40005800 	.word	0x40005800

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fa71 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f871 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f7ff fe73 	bl	80003a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 f9dd 	bl	8000a80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006c6:	f7ff ff2b 	bl	8000520 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006ca:	f7ff ff57 	bl	800057c <MX_I2C2_Init>
  MX_TIM1_Init();
 80006ce:	f000 f947 	bl	8000960 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TM1637_SetBrightness(3);
 80006d2:	2003      	movs	r0, #3
 80006d4:	f008 fb76 	bl	8008dc4 <TM1637_SetBrightness>
  VL53_init();
 80006d8:	f008 fc02 	bl	8008ee0 <VL53_init>
  HAL_TIM_Base_Start_IT(&htim1);
 80006dc:	482c      	ldr	r0, [pc, #176]	; (8000790 <main+0xe0>)
 80006de:	f002 ff65 	bl	80035ac <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  uint16_t Measure;
  uint16_t Measure_EEPROM;
  while (1)
  {
	  switch(status)
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <main+0xe4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d83a      	bhi.n	8000762 <main+0xb2>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <main+0x44>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800078b 	.word	0x0800078b
 80006f8:	0800078b 	.word	0x0800078b
 80006fc:	08000705 	.word	0x08000705
 8000700:	08000735 	.word	0x08000735
	  		  break;
	  	  case 2:
	  		  break;
	  	  //save to EEPROM
	  	  case 3:
	  		  EEPROM_Write_NUM(3, 0, Measure);
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fdd6 	bl	80002b8 <__aeabi_ui2f>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	2003      	movs	r0, #3
 8000714:	f008 f9d0 	bl	8008ab8 <EEPROM_Write_NUM>
	  		  Measure_EEPROM = EEPROM_Read_NUM(3, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	2003      	movs	r0, #3
 800071c:	f008 f9e4 	bl	8008ae8 <EEPROM_Read_NUM>
 8000720:	4603      	mov	r3, r0
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fe20 	bl	8000368 <__aeabi_f2uiz>
 8000728:	4603      	mov	r3, r0
 800072a:	80bb      	strh	r3, [r7, #4]
	  		  status = 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <main+0xe4>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000732:	e02b      	b.n	800078c <main+0xdc>
	  	  //display
	  	  case 4:
	  		  if(mode == 0)
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <main+0xe8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d105      	bne.n	8000748 <main+0x98>
	  		  {
	  			TM1637_DisplayDecimal(Measure, 0);
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f008 fad1 	bl	8008ce8 <TM1637_DisplayDecimal>
 8000746:	e008      	b.n	800075a <main+0xaa>
	  		  }
	  		  else if(mode == 1)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <main+0xe8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d104      	bne.n	800075a <main+0xaa>
			  {
				TM1637_DisplayDecimal(Measure_EEPROM, 0);
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f008 fac7 	bl	8008ce8 <TM1637_DisplayDecimal>
			  }
	  		  status = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <main+0xe4>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000760:	e014      	b.n	800078c <main+0xdc>
	  	  //measure
	  	  default:

	  		//measure if data is ready
	  		if(TofDataRead == 1)
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <main+0xec>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d106      	bne.n	8000778 <main+0xc8>
			  {
				Measure = VL53_MEASURE();
 800076a:	f008 fc11 	bl	8008f90 <VL53_MEASURE>
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
				TofDataRead = 0;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <main+0xec>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
			  }

	  		//data limit
			if (Measure > 1250)
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800077e:	4293      	cmp	r3, r2
 8000780:	d9af      	bls.n	80006e2 <main+0x32>
			  {
				  Measure = 1250;
 8000782:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	e7ab      	b.n	80006e2 <main+0x32>
	  		  break;
 800078a:	bf00      	nop
	  switch(status)
 800078c:	e7a9      	b.n	80006e2 <main+0x32>
 800078e:	bf00      	nop
 8000790:	20000390 	.word	0x20000390
 8000794:	20000468 	.word	0x20000468
 8000798:	20000469 	.word	0x20000469
 800079c:	2000046a 	.word	0x2000046a

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f008 fc10 	bl	8008fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fa83 	bl	8002cec <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007ec:	f000 f819 	bl	8000822 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2302      	movs	r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fcf0 	bl	80031f0 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000816:	f000 f804 	bl	8000822 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3740      	adds	r7, #64	; 0x40
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000826:	b672      	cpsid	i
}
 8000828:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082a:	e7fe      	b.n	800082a <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_MspInit+0x5c>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_MspInit+0x5c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x5c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x5c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_MspInit+0x60>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_MspInit+0x60>)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000
 800088c:	40010000 	.word	0x40010000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f9a7 	bl	8000c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f000 fcd6 	bl	8001294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <TIM1_BRK_IRQHandler+0x10>)
 80008f2:	f002 fead 	bl	8003650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000390 	.word	0x20000390

08000900 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM1_UP_IRQHandler+0x10>)
 8000906:	f002 fea3 	bl	8003650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000390 	.word	0x20000390

08000914 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM1_TRG_COM_IRQHandler+0x10>)
 800091a:	f002 fe99 	bl	8003650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000390 	.word	0x20000390

08000928 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM1_CC_IRQHandler+0x10>)
 800092e:	f002 fe8f 	bl	8003650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000390 	.word	0x20000390

0800093c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000940:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000944:	f000 fca6 	bl	8001294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000948:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800094c:	f000 fca2 	bl	8001294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_TIM1_Init+0x9c>)
 800097e:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <MX_TIM1_Init+0xa0>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_TIM1_Init+0x9c>)
 8000984:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000988:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_TIM1_Init+0x9c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_TIM1_Init+0x9c>)
 8000992:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000996:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_TIM1_Init+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_TIM1_Init+0x9c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_TIM1_Init+0x9c>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <MX_TIM1_Init+0x9c>)
 80009ac:	f002 fdae 	bl	800350c <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009b6:	f7ff ff34 	bl	8000822 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_TIM1_Init+0x9c>)
 80009c8:	f002 ff4a 	bl	8003860 <HAL_TIM_ConfigClockSource>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009d2:	f7ff ff26 	bl	8000822 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_TIM1_Init+0x9c>)
 80009e4:	f003 f920 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80009ee:	f7ff ff18 	bl	8000822 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000390 	.word	0x20000390
 8000a00:	40012c00 	.word	0x40012c00

08000a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_TIM_Base_MspInit+0x74>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12b      	bne.n	8000a6e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_TIM_Base_MspInit+0x78>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <HAL_TIM_Base_MspInit+0x78>)
 8000a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_TIM_Base_MspInit+0x78>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2018      	movs	r0, #24
 8000a34:	f000 fa33 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000a38:	2018      	movs	r0, #24
 8000a3a:	f000 fa4c 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 fa2b 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a48:	2019      	movs	r0, #25
 8000a4a:	f000 fa44 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	201a      	movs	r0, #26
 8000a54:	f000 fa23 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000a58:	201a      	movs	r0, #26
 8000a5a:	f000 fa3c 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	201b      	movs	r0, #27
 8000a64:	f000 fa1b 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a68:	201b      	movs	r0, #27
 8000a6a:	f000 fa34 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40021000 	.word	0x40021000

08000a80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_USART2_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f003 f926 	bl	8003d08 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f7ff feae 	bl	8000822 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200003d8 	.word	0x200003d8
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x70>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d123      	bne.n	8000b3c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x74>)
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_UART_MspInit+0x74>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afe:	61d3      	str	r3, [r2, #28]
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0x74>)
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_UART_MspInit+0x74>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_UART_MspInit+0x74>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_UART_MspInit+0x74>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b24:	230c      	movs	r3, #12
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_UART_MspInit+0x78>)
 8000b38:	f000 f9f6 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800

08000b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ff00 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b56:	490c      	ldr	r1, [pc, #48]	; (8000b88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b6c:	4c09      	ldr	r4, [pc, #36]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f008 fa33 	bl	8008fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fd97 	bl	80006b0 <main>
  bx lr
 8000b82:	4770      	bx	lr
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8000b8c:	080090b8 	.word	0x080090b8
  ldr r2, =_sbss
 8000b90:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8000b94:	20000618 	.word	0x20000618

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_Init+0x28>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x28>)
 8000ba6:	f043 0310 	orr.w	r3, r3, #16
 8000baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f96b 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 f808 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fe38 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x54>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x58>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f991 	bl	8000f0e <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00e      	b.n	8000c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d80a      	bhi.n	8000c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f94b 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_InitTick+0x5c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_IncTick+0x1c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x20>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <HAL_IncTick+0x20>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000420 	.word	0x20000420

08000c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b02      	ldr	r3, [pc, #8]	; (8000c5c <HAL_GetTick+0x10>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000420 	.word	0x20000420

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff fff0 	bl	8000c4c <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_Delay+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffe0 	bl	8000c4c <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4906      	ldr	r1, [pc, #24]	; (8000d40 <__NVIC_EnableIRQ+0x34>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db12      	blt.n	8000d7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	490a      	ldr	r1, [pc, #40]	; (8000d88 <__NVIC_DisableIRQ+0x44>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	3320      	adds	r3, #32
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
}
 8000d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d76:	f3bf 8f6f 	isb	sy
}
 8000d7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff90 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff09 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff1e 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff90 	bl	8000de0 <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff11 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff1f 	bl	8000d44 <__NVIC_DisableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff94 	bl	8000e44 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e169      	b.n	8001210 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 8158 	bne.w	800120a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4a9a      	ldr	r2, [pc, #616]	; (80011c8 <HAL_GPIO_Init+0x2a0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d05e      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f64:	4a98      	ldr	r2, [pc, #608]	; (80011c8 <HAL_GPIO_Init+0x2a0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d875      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f6a:	4a98      	ldr	r2, [pc, #608]	; (80011cc <HAL_GPIO_Init+0x2a4>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d058      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f70:	4a96      	ldr	r2, [pc, #600]	; (80011cc <HAL_GPIO_Init+0x2a4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d86f      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f76:	4a96      	ldr	r2, [pc, #600]	; (80011d0 <HAL_GPIO_Init+0x2a8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d052      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f7c:	4a94      	ldr	r2, [pc, #592]	; (80011d0 <HAL_GPIO_Init+0x2a8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d869      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f82:	4a94      	ldr	r2, [pc, #592]	; (80011d4 <HAL_GPIO_Init+0x2ac>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d04c      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f88:	4a92      	ldr	r2, [pc, #584]	; (80011d4 <HAL_GPIO_Init+0x2ac>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d863      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f8e:	4a92      	ldr	r2, [pc, #584]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d046      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f94:	4a90      	ldr	r2, [pc, #576]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d85d      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d82a      	bhi.n	8000ff4 <HAL_GPIO_Init+0xcc>
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d859      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000fa2:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <HAL_GPIO_Init+0x80>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	08001023 	.word	0x08001023
 8000fac:	08000ffd 	.word	0x08000ffd
 8000fb0:	0800100f 	.word	0x0800100f
 8000fb4:	08001051 	.word	0x08001051
 8000fb8:	08001057 	.word	0x08001057
 8000fbc:	08001057 	.word	0x08001057
 8000fc0:	08001057 	.word	0x08001057
 8000fc4:	08001057 	.word	0x08001057
 8000fc8:	08001057 	.word	0x08001057
 8000fcc:	08001057 	.word	0x08001057
 8000fd0:	08001057 	.word	0x08001057
 8000fd4:	08001057 	.word	0x08001057
 8000fd8:	08001057 	.word	0x08001057
 8000fdc:	08001057 	.word	0x08001057
 8000fe0:	08001057 	.word	0x08001057
 8000fe4:	08001057 	.word	0x08001057
 8000fe8:	08001057 	.word	0x08001057
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001019 	.word	0x08001019
 8000ff4:	4a79      	ldr	r2, [pc, #484]	; (80011dc <HAL_GPIO_Init+0x2b4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffa:	e02c      	b.n	8001056 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	623b      	str	r3, [r7, #32]
          break;
 8001002:	e029      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	3304      	adds	r3, #4
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e024      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	3308      	adds	r3, #8
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e01f      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	330c      	adds	r3, #12
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e01a      	b.n	8001058 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800102a:	2304      	movs	r3, #4
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e013      	b.n	8001058 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001038:	2308      	movs	r3, #8
 800103a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	611a      	str	r2, [r3, #16]
          break;
 8001042:	e009      	b.n	8001058 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001044:	2308      	movs	r3, #8
 8001046:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	615a      	str	r2, [r3, #20]
          break;
 800104e:	e003      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x130>
          break;
 8001056:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2bff      	cmp	r3, #255	; 0xff
 800105c:	d801      	bhi.n	8001062 <HAL_GPIO_Init+0x13a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_Init+0x13e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3304      	adds	r3, #4
 8001066:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2bff      	cmp	r3, #255	; 0xff
 800106c:	d802      	bhi.n	8001074 <HAL_GPIO_Init+0x14c>
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	e002      	b.n	800107a <HAL_GPIO_Init+0x152>
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	3b08      	subs	r3, #8
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	210f      	movs	r1, #15
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	6a39      	ldr	r1, [r7, #32]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80b1 	beq.w	800120a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a8:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x2b8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x2b8>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <HAL_GPIO_Init+0x2b8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010c0:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <HAL_GPIO_Init+0x2bc>)
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <HAL_GPIO_Init+0x2c0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d013      	beq.n	8001114 <HAL_GPIO_Init+0x1ec>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1e8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3e      	ldr	r2, [pc, #248]	; (80011f0 <HAL_GPIO_Init+0x2c8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <HAL_GPIO_Init+0x2cc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1e0>
 8001104:	2303      	movs	r3, #3
 8001106:	e006      	b.n	8001116 <HAL_GPIO_Init+0x1ee>
 8001108:	2304      	movs	r3, #4
 800110a:	e004      	b.n	8001116 <HAL_GPIO_Init+0x1ee>
 800110c:	2302      	movs	r3, #2
 800110e:	e002      	b.n	8001116 <HAL_GPIO_Init+0x1ee>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <HAL_GPIO_Init+0x1ee>
 8001114:	2300      	movs	r3, #0
 8001116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001118:	f002 0203 	and.w	r2, r2, #3
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4093      	lsls	r3, r2
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001126:	492f      	ldr	r1, [pc, #188]	; (80011e4 <HAL_GPIO_Init+0x2bc>)
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	492c      	ldr	r1, [pc, #176]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	43db      	mvns	r3, r3
 8001156:	4928      	ldr	r1, [pc, #160]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001158:	4013      	ands	r3, r2
 800115a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	4922      	ldr	r1, [pc, #136]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	60cb      	str	r3, [r1, #12]
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	43db      	mvns	r3, r3
 800117e:	491e      	ldr	r1, [pc, #120]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001180:	4013      	ands	r3, r2
 8001182:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4918      	ldr	r1, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4914      	ldr	r1, [pc, #80]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d021      	beq.n	80011fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	490e      	ldr	r1, [pc, #56]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e021      	b.n	800120a <HAL_GPIO_Init+0x2e2>
 80011c6:	bf00      	nop
 80011c8:	10320000 	.word	0x10320000
 80011cc:	10310000 	.word	0x10310000
 80011d0:	10220000 	.word	0x10220000
 80011d4:	10210000 	.word	0x10210000
 80011d8:	10120000 	.word	0x10120000
 80011dc:	10110000 	.word	0x10110000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40011400 	.word	0x40011400
 80011f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_GPIO_Init+0x304>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	43db      	mvns	r3, r3
 8001204:	4909      	ldr	r1, [pc, #36]	; (800122c <HAL_GPIO_Init+0x304>)
 8001206:	4013      	ands	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	3301      	adds	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	f47f ae8e 	bne.w	8000f3c <HAL_GPIO_Init+0x14>
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	372c      	adds	r7, #44	; 0x2c
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4013      	ands	r3, r2
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43d9      	mvns	r1, r3
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	400b      	ands	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	611a      	str	r2, [r3, #16]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
	...

08001294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc94 	bl	8008be0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e12b      	b.n	800152e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff f974 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001328:	f002 f8aa 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 800132c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a81      	ldr	r2, [pc, #516]	; (8001538 <HAL_I2C_Init+0x274>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d807      	bhi.n	8001348 <HAL_I2C_Init+0x84>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a80      	ldr	r2, [pc, #512]	; (800153c <HAL_I2C_Init+0x278>)
 800133c:	4293      	cmp	r3, r2
 800133e:	bf94      	ite	ls
 8001340:	2301      	movls	r3, #1
 8001342:	2300      	movhi	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	e006      	b.n	8001356 <HAL_I2C_Init+0x92>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a7d      	ldr	r2, [pc, #500]	; (8001540 <HAL_I2C_Init+0x27c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	bf94      	ite	ls
 8001350:	2301      	movls	r3, #1
 8001352:	2300      	movhi	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0e7      	b.n	800152e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4a78      	ldr	r2, [pc, #480]	; (8001544 <HAL_I2C_Init+0x280>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9b      	lsrs	r3, r3, #18
 8001368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a6a      	ldr	r2, [pc, #424]	; (8001538 <HAL_I2C_Init+0x274>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d802      	bhi.n	8001398 <HAL_I2C_Init+0xd4>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	e009      	b.n	80013ac <HAL_I2C_Init+0xe8>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a69      	ldr	r2, [pc, #420]	; (8001548 <HAL_I2C_Init+0x284>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	495c      	ldr	r1, [pc, #368]	; (8001538 <HAL_I2C_Init+0x274>)
 80013c8:	428b      	cmp	r3, r1
 80013ca:	d819      	bhi.n	8001400 <HAL_I2C_Init+0x13c>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e59      	subs	r1, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013da:	1c59      	adds	r1, r3, #1
 80013dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013e0:	400b      	ands	r3, r1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <HAL_I2C_Init+0x138>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e59      	subs	r1, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fa:	e051      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e04f      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d111      	bne.n	800142c <HAL_I2C_Init+0x168>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e58      	subs	r0, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	fbb0 f3f3 	udiv	r3, r0, r3
 800141a:	3301      	adds	r3, #1
 800141c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e012      	b.n	8001452 <HAL_I2C_Init+0x18e>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	0099      	lsls	r1, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Init+0x196>
 8001456:	2301      	movs	r3, #1
 8001458:	e022      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10e      	bne.n	8001480 <HAL_I2C_Init+0x1bc>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e58      	subs	r0, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	fbb0 f3f3 	udiv	r3, r0, r3
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147e:	e00f      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1e58      	subs	r0, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	0099      	lsls	r1, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	6809      	ldr	r1, [r1, #0]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6911      	ldr	r1, [r2, #16]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68d2      	ldr	r2, [r2, #12]
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	000186a0 	.word	0x000186a0
 800153c:	001e847f 	.word	0x001e847f
 8001540:	003d08ff 	.word	0x003d08ff
 8001544:	431bde83 	.word	0x431bde83
 8001548:	10624dd3 	.word	0x10624dd3

0800154c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	461a      	mov	r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	817b      	strh	r3, [r7, #10]
 800155c:	4613      	mov	r3, r2
 800155e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff fb74 	bl	8000c4c <HAL_GetTick>
 8001564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	f040 80e0 	bne.w	8001734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2319      	movs	r3, #25
 800157a:	2201      	movs	r2, #1
 800157c:	4970      	ldr	r1, [pc, #448]	; (8001740 <HAL_I2C_Master_Transmit+0x1f4>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f001 f97e 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	e0d3      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_I2C_Master_Transmit+0x50>
 8001598:	2302      	movs	r3, #2
 800159a:	e0cc      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d007      	beq.n	80015c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2221      	movs	r2, #33	; 0x21
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2210      	movs	r2, #16
 80015de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	893a      	ldrh	r2, [r7, #8]
 80015f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a50      	ldr	r2, [pc, #320]	; (8001744 <HAL_I2C_Master_Transmit+0x1f8>)
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001604:	8979      	ldrh	r1, [r7, #10]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fe6a 	bl	80022e4 <I2C_MasterRequestWrite>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e08d      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001630:	e066      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f001 fa3c 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00d      	beq.n	800165e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b04      	cmp	r3, #4
 8001648:	d107      	bne.n	800165a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06b      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d11b      	bne.n	80016d4 <HAL_I2C_Master_Transmit+0x188>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	6a39      	ldr	r1, [r7, #32]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f001 fa33 	bl	8002b44 <I2C_WaitOnBTFFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00d      	beq.n	8001700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d107      	bne.n	80016fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e01a      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d194      	bne.n	8001632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	00100002 	.word	0x00100002
 8001744:	ffff0000 	.word	0xffff0000

08001748 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	817b      	strh	r3, [r7, #10]
 8001758:	4613      	mov	r3, r2
 800175a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff fa74 	bl	8000c4c <HAL_GetTick>
 8001764:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b20      	cmp	r3, #32
 8001770:	f040 824b 	bne.w	8001c0a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2319      	movs	r3, #25
 800177a:	2201      	movs	r2, #1
 800177c:	497f      	ldr	r1, [pc, #508]	; (800197c <HAL_I2C_Master_Receive+0x234>)
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 f87e 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800178a:	2302      	movs	r3, #2
 800178c:	e23e      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_I2C_Master_Receive+0x54>
 8001798:	2302      	movs	r3, #2
 800179a:	e237      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d007      	beq.n	80017c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2222      	movs	r2, #34	; 0x22
 80017d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2210      	movs	r2, #16
 80017de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	893a      	ldrh	r2, [r7, #8]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4a5f      	ldr	r2, [pc, #380]	; (8001980 <HAL_I2C_Master_Receive+0x238>)
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001804:	8979      	ldrh	r1, [r7, #10]
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fdec 	bl	80023e8 <I2C_MasterRequestRead>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e1f8      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	2b00      	cmp	r3, #0
 8001820:	d113      	bne.n	800184a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e1cc      	b.n	8001be4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	2b01      	cmp	r3, #1
 8001850:	d11e      	bne.n	8001890 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001860:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001862:	b672      	cpsid	i
}
 8001864:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800188c:	b662      	cpsie	i
}
 800188e:	e035      	b.n	80018fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001894:	2b02      	cmp	r3, #2
 8001896:	d11e      	bne.n	80018d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018d2:	b662      	cpsie	i
}
 80018d4:	e012      	b.n	80018fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80018fc:	e172      	b.n	8001be4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b03      	cmp	r3, #3
 8001904:	f200 811f 	bhi.w	8001b46 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	2b01      	cmp	r3, #1
 800190e:	d123      	bne.n	8001958 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f001 f95d 	bl	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e173      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001956:	e145      	b.n	8001be4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	2b02      	cmp	r3, #2
 800195e:	d152      	bne.n	8001a06 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001966:	2200      	movs	r2, #0
 8001968:	4906      	ldr	r1, [pc, #24]	; (8001984 <HAL_I2C_Master_Receive+0x23c>)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 ff88 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e148      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
 800197a:	bf00      	nop
 800197c:	00100002 	.word	0x00100002
 8001980:	ffff0000 	.word	0xffff0000
 8001984:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	3b01      	subs	r3, #1
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019ce:	b662      	cpsie	i
}
 80019d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a04:	e0ee      	b.n	8001be4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4981      	ldr	r1, [pc, #516]	; (8001c14 <HAL_I2C_Master_Receive+0x4cc>)
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 ff35 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0f5      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a66:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_I2C_Master_Receive+0x4d0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	4a6b      	ldr	r2, [pc, #428]	; (8001c1c <HAL_I2C_Master_Receive+0x4d4>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0a1a      	lsrs	r2, r3, #8
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00da      	lsls	r2, r3, #3
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d118      	bne.n	8001abe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001aae:	b662      	cpsie	i
}
 8001ab0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0a6      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d1d9      	bne.n	8001a80 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b0e:	b662      	cpsie	i
}
 8001b10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b44:	e04e      	b.n	8001be4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f001 f842 	bl	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e058      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d124      	bne.n	8001be4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f47f ae88 	bne.w	80018fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	00010004 	.word	0x00010004
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	14f8b589 	.word	0x14f8b589

08001c20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	460b      	mov	r3, r1
 8001c34:	813b      	strh	r3, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c3a:	f7ff f807 	bl	8000c4c <HAL_GetTick>
 8001c3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	f040 80d9 	bne.w	8001e00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2319      	movs	r3, #25
 8001c54:	2201      	movs	r2, #1
 8001c56:	496d      	ldr	r1, [pc, #436]	; (8001e0c <HAL_I2C_Mem_Write+0x1ec>)
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fe11 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
 8001c66:	e0cc      	b.n	8001e02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_I2C_Mem_Write+0x56>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0c5      	b.n	8001e02 <HAL_I2C_Mem_Write+0x1e2>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d007      	beq.n	8001c9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2221      	movs	r2, #33	; 0x21
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a3a      	ldr	r2, [r7, #32]
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a4d      	ldr	r2, [pc, #308]	; (8001e10 <HAL_I2C_Mem_Write+0x1f0>)
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cde:	88f8      	ldrh	r0, [r7, #6]
 8001ce0:	893a      	ldrh	r2, [r7, #8]
 8001ce2:	8979      	ldrh	r1, [r7, #10]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4603      	mov	r3, r0
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fc48 	bl	8002584 <I2C_RequestMemoryWrite>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d052      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e081      	b.n	8001e02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fed6 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d107      	bne.n	8001d26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e06b      	b.n	8001e02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d11b      	bne.n	8001da0 <HAL_I2C_Mem_Write+0x180>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d017      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1aa      	bne.n	8001cfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fec9 	bl	8002b44 <I2C_WaitOnBTFFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d107      	bne.n	8001dd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e016      	b.n	8001e02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e000      	b.n	8001e02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e00:	2302      	movs	r3, #2
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	00100002 	.word	0x00100002
 8001e10:	ffff0000 	.word	0xffff0000

08001e14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	817b      	strh	r3, [r7, #10]
 8001e26:	460b      	mov	r3, r1
 8001e28:	813b      	strh	r3, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e32:	f7fe ff0b 	bl	8000c4c <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	f040 8244 	bne.w	80022ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2319      	movs	r3, #25
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4982      	ldr	r1, [pc, #520]	; (8002058 <HAL_I2C_Mem_Read+0x244>)
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fd15 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e237      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_I2C_Mem_Read+0x5a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e230      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d007      	beq.n	8001e94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2222      	movs	r2, #34	; 0x22
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a62      	ldr	r2, [pc, #392]	; (800205c <HAL_I2C_Mem_Read+0x248>)
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ed6:	88f8      	ldrh	r0, [r7, #6]
 8001ed8:	893a      	ldrh	r2, [r7, #8]
 8001eda:	8979      	ldrh	r1, [r7, #10]
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fbe2 	bl	80026b0 <I2C_RequestMemoryRead>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1ec      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d113      	bne.n	8001f26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	e1c0      	b.n	80022a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d11e      	bne.n	8001f6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3e:	b672      	cpsid	i
}
 8001f40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f68:	b662      	cpsie	i
}
 8001f6a:	e035      	b.n	8001fd8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d11e      	bne.n	8001fb2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fae:	b662      	cpsie	i
}
 8001fb0:	e012      	b.n	8001fd8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fd8:	e166      	b.n	80022a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	f200 811f 	bhi.w	8002222 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d123      	bne.n	8002034 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fdef 	bl	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e167      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002032:	e139      	b.n	80022a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	2b02      	cmp	r3, #2
 800203a:	d152      	bne.n	80020e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002042:	2200      	movs	r2, #0
 8002044:	4906      	ldr	r1, [pc, #24]	; (8002060 <HAL_I2C_Mem_Read+0x24c>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fc1a 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e13c      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
 8002056:	bf00      	nop
 8002058:	00100002 	.word	0x00100002
 800205c:	ffff0000 	.word	0xffff0000
 8002060:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020aa:	b662      	cpsie	i
}
 80020ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020e0:	e0e2      	b.n	80022a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	2200      	movs	r2, #0
 80020ea:	497b      	ldr	r1, [pc, #492]	; (80022d8 <HAL_I2C_Mem_Read+0x4c4>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fbc7 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0e9      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002142:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_I2C_Mem_Read+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_I2C_Mem_Read+0x4cc>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a1a      	lsrs	r2, r3, #8
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00da      	lsls	r2, r3, #3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	3b01      	subs	r3, #1
 8002160:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d118      	bne.n	800219a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800218a:	b662      	cpsie	i
}
 800218c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e09a      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d1d9      	bne.n	800215c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021ea:	b662      	cpsie	i
}
 80021ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002220:	e042      	b.n	80022a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fcd4 	bl	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e04c      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d118      	bne.n	80022a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f ae94 	bne.w	8001fda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	00010004 	.word	0x00010004
 80022dc:	20000000 	.word	0x20000000
 80022e0:	14f8b589 	.word	0x14f8b589

080022e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d006      	beq.n	800230e <I2C_MasterRequestWrite+0x2a>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <I2C_MasterRequestWrite+0x2a>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00b      	b.n	8002338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b12      	cmp	r3, #18
 8002326:	d107      	bne.n	8002338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa9b 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235e:	d103      	bne.n	8002368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e035      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002374:	d108      	bne.n	8002388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e01b      	b.n	80023c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	11db      	asrs	r3, r3, #7
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0306 	and.w	r3, r3, #6
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f063 030f 	orn	r3, r3, #15
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <I2C_MasterRequestWrite+0xfc>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fae4 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e010      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <I2C_MasterRequestWrite+0x100>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fad4 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00010008 	.word	0x00010008
 80023e4:	00010002 	.word	0x00010002

080023e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800240c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d006      	beq.n	8002422 <I2C_MasterRequestRead+0x3a>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d003      	beq.n	8002422 <I2C_MasterRequestRead+0x3a>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00b      	b.n	800244c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	2b11      	cmp	r3, #17
 800243a:	d107      	bne.n	800244c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fa11 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002472:	d103      	bne.n	800247c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e079      	b.n	8002574 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002488:	d108      	bne.n	800249c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800248a:	897b      	ldrh	r3, [r7, #10]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	e05f      	b.n	800255c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800249c:	897b      	ldrh	r3, [r7, #10]
 800249e:	11db      	asrs	r3, r3, #7
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 0306 	and.w	r3, r3, #6
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f063 030f 	orn	r3, r3, #15
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4930      	ldr	r1, [pc, #192]	; (800257c <I2C_MasterRequestRead+0x194>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fa5a 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e054      	b.n	8002574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4929      	ldr	r1, [pc, #164]	; (8002580 <I2C_MasterRequestRead+0x198>)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa4a 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e044      	b.n	8002574 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f9af 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00d      	beq.n	8002544 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002536:	d103      	bne.n	8002540 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e017      	b.n	8002574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002544:	897b      	ldrh	r3, [r7, #10]
 8002546:	11db      	asrs	r3, r3, #7
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0306 	and.w	r3, r3, #6
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f063 030e 	orn	r3, r3, #14
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <I2C_MasterRequestRead+0x198>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fa06 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	00010008 	.word	0x00010008
 8002580:	00010002 	.word	0x00010002

08002584 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	461a      	mov	r2, r3
 8002592:	4603      	mov	r3, r0
 8002594:	817b      	strh	r3, [r7, #10]
 8002596:	460b      	mov	r3, r1
 8002598:	813b      	strh	r3, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f960 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d4:	d103      	bne.n	80025de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e05f      	b.n	80026a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025e2:	897b      	ldrh	r3, [r7, #10]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	492d      	ldr	r1, [pc, #180]	; (80026ac <I2C_RequestMemoryWrite+0x128>)
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f9bb 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e04c      	b.n	80026a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	6a39      	ldr	r1, [r7, #32]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fa46 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b04      	cmp	r3, #4
 8002634:	d107      	bne.n	8002646 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e02b      	b.n	80026a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002650:	893b      	ldrh	r3, [r7, #8]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e021      	b.n	80026a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800265c:	893b      	ldrh	r3, [r7, #8]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	b29b      	uxth	r3, r3
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	6a39      	ldr	r1, [r7, #32]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa20 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b04      	cmp	r3, #4
 8002680:	d107      	bne.n	8002692 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e005      	b.n	80026a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002696:	893b      	ldrh	r3, [r7, #8]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	00010002 	.word	0x00010002

080026b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f8c2 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002710:	d103      	bne.n	800271a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0aa      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800272c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	4952      	ldr	r1, [pc, #328]	; (800287c <I2C_RequestMemoryRead+0x1cc>)
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f91d 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e097      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f9a8 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b04      	cmp	r3, #4
 8002770:	d107      	bne.n	8002782 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002780:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e076      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800278c:	893b      	ldrh	r3, [r7, #8]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	e021      	b.n	80027dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f982 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d107      	bne.n	80027ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e050      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027d2:	893b      	ldrh	r3, [r7, #8]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	6a39      	ldr	r1, [r7, #32]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f967 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d107      	bne.n	8002804 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e035      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002816:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2200      	movs	r2, #0
 8002820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f82b 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283e:	d103      	bne.n	8002848 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e013      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	6a3a      	ldr	r2, [r7, #32]
 8002860:	4906      	ldr	r1, [pc, #24]	; (800287c <I2C_RequestMemoryRead+0x1cc>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f886 	bl	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	00010002 	.word	0x00010002

08002880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002890:	e048      	b.n	8002924 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d044      	beq.n	8002924 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289a:	f7fe f9d7 	bl	8000c4c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d139      	bne.n	8002924 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10d      	bne.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	e00c      	b.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	43da      	mvns	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d116      	bne.n	8002924 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e023      	b.n	800296c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10d      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0xca>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	43da      	mvns	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	e00c      	b.n	8002964 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	429a      	cmp	r2, r3
 8002968:	d093      	beq.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002982:	e071      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d123      	bne.n	80029dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e067      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d041      	beq.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e4:	f7fe f932 	bl	8000c4c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d302      	bcc.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d136      	bne.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10c      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e00b      	b.n	8002a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e021      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10c      	bne.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e00b      	b.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f af6d 	bne.w	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac0:	e034      	b.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f8e3 	bl	8002c8e <I2C_IsAcknowledgeFailed>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e034      	b.n	8002b3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d028      	beq.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7fe f8b7 	bl	8000c4c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11d      	bne.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d016      	beq.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d1c3      	bne.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b50:	e034      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f89b 	bl	8002c8e <I2C_IsAcknowledgeFailed>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e034      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d028      	beq.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fe f86f 	bl	8000c4c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11d      	bne.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d016      	beq.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d1c3      	bne.n	8002b52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be0:	e049      	b.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d119      	bne.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e030      	b.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fe f812 	bl	8000c4c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11d      	bne.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d016      	beq.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e007      	b.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d1ae      	bne.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d11b      	bne.n	8002cde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e272      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8087 	beq.w	8002e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0c:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d112      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
 8002d24:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d06c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x12c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d168      	bne.n	8002e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e24c      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x76>
 8002d54:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a7f      	ldr	r2, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e02e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0xbc>
 8002d8e:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002da8:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fd ff40 	bl	8000c4c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fd ff3c 	bl	8000c4c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e200      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe4>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fd ff2c 	bl	8000c4c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fd ff28 	bl	8000c4c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1ec      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x10c>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1c0      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fd fee1 	bl	8000c4c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fd fedd 	bl	8000c4c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1a1      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4927      	ldr	r1, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fec0 	bl	8000c4c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fd febc 	bl	8000c4c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e180      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03a      	beq.n	8002f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fd fea0 	bl	8000c4c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fd fe9c 	bl	8000c4c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e160      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 face 	bl	80034d0 <RCC_Delay>
 8002f34:	e01c      	b.n	8002f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fe86 	bl	8000c4c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f42:	e00f      	b.n	8002f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fd fe82 	bl	8000c4c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e146      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	42420000 	.word	0x42420000
 8002f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e9      	bne.n	8002f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
 8002f9a:	4b85      	ldr	r3, [pc, #532]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b82      	ldr	r3, [pc, #520]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b7f      	ldr	r3, [pc, #508]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7e      	ldr	r2, [pc, #504]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fe43 	bl	8000c4c <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fd fe3f 	bl	8000c4c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e103      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a6e      	ldr	r2, [pc, #440]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003006:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x356>
 8003028:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a5d      	ldr	r2, [pc, #372]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003042:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fd fdf3 	bl	8000c4c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fd fdef 	bl	8000c4c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0b1      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x37e>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fd fddd 	bl	8000c4c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fd fdd9 	bl	8000c4c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e09b      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8087 	beq.w	80031e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d061      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d146      	bne.n	8003176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_RCC_OscConfig+0x4cc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fd fdad 	bl	8000c4c <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fd fda9 	bl	8000c4c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e06d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d108      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	4921      	ldr	r1, [pc, #132]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a19      	ldr	r1, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	491b      	ldr	r1, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x4cc>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd fd7d 	bl	8000c4c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fd fd79 	bl	8000c4c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
 8003174:	e035      	b.n	80031e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fd fd66 	bl	8000c4c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fd fd62 	bl	8000c4c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e026      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x498>
 80031a2:	e01e      	b.n	80031e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e019      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x500>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0d0      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d910      	bls.n	8003234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4965      	ldr	r1, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800326e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d040      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d115      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e073      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06b      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4936      	ldr	r1, [pc, #216]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fd fcb4 	bl	8000c4c <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fd fcb0 	bl	8000c4c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e053      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d210      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	4922      	ldr	r1, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1cc>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fc12 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08009070 	.word	0x08009070
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0x94>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x30>
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x36>
 80033f2:	e027      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_GetSysClockFreq+0x98>)
 80033f6:	613b      	str	r3, [r7, #16]
      break;
 80033f8:	e027      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	0c9b      	lsrs	r3, r3, #18
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d010      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_GetSysClockFreq+0x94>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0c5b      	lsrs	r3, r3, #17
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <HAL_RCC_GetSysClockFreq+0xa0>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a0d      	ldr	r2, [pc, #52]	; (800345c <HAL_RCC_GetSysClockFreq+0x98>)
 8003426:	fb03 f202 	mul.w	r2, r3, r2
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e004      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	613b      	str	r3, [r7, #16]
      break;
 8003442:	e002      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetSysClockFreq+0x98>)
 8003446:	613b      	str	r3, [r7, #16]
      break;
 8003448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344a:	693b      	ldr	r3, [r7, #16]
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	007a1200 	.word	0x007a1200
 8003460:	08009088 	.word	0x08009088
 8003464:	08009098 	.word	0x08009098
 8003468:	003d0900 	.word	0x003d0900

0800346c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <HAL_RCC_GetHCLKFreq+0x10>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff2 	bl	800346c <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08009080 	.word	0x08009080

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffde 	bl	800346c <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0adb      	lsrs	r3, r3, #11
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08009080 	.word	0x08009080

080034d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <RCC_Delay+0x34>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <RCC_Delay+0x38>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0a5b      	lsrs	r3, r3, #9
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034ec:	bf00      	nop
  }
  while (Delay --);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1e5a      	subs	r2, r3, #1
 80034f2:	60fa      	str	r2, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f9      	bne.n	80034ec <RCC_Delay+0x1c>
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	20000000 	.word	0x20000000
 8003508:	10624dd3 	.word	0x10624dd3

0800350c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e041      	b.n	80035a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fa66 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fa74 	bl	8003a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e03a      	b.n	800363a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_TIM_Base_Start_IT+0x98>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x58>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x58>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_TIM_Base_Start_IT+0x9c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x58>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_TIM_Base_Start_IT+0xa0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d122      	bne.n	80036ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d11b      	bne.n	80036ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0202 	mvn.w	r2, #2
 800367c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9b4 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f9a7 	bl	80039ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f9b6 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0204 	mvn.w	r2, #4
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f98a 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f97d 	bl	80039ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f98c 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d122      	bne.n	8003754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b08      	cmp	r3, #8
 800371a:	d11b      	bne.n	8003754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0208 	mvn.w	r2, #8
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2204      	movs	r2, #4
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f960 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f953 	bl	80039ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f962 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d122      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b10      	cmp	r3, #16
 800376e:	d11b      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0210 	mvn.w	r2, #16
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2208      	movs	r2, #8
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f936 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f929 	bl	80039ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f938 	bl	8003a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10e      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0201 	mvn.w	r2, #1
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f005 fa40 	bl	8008c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fa7b 	bl	8003cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8fc 	bl	8003a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b20      	cmp	r3, #32
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0220 	mvn.w	r2, #32
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa46 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIM_ConfigClockSource+0x1c>
 8003878:	2302      	movs	r3, #2
 800387a:	e0b4      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x186>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800389a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b4:	d03e      	beq.n	8003934 <HAL_TIM_ConfigClockSource+0xd4>
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ba:	f200 8087 	bhi.w	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	f000 8086 	beq.w	80039d2 <HAL_TIM_ConfigClockSource+0x172>
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ca:	d87f      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b70      	cmp	r3, #112	; 0x70
 80038ce:	d01a      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xa6>
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d87b      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b60      	cmp	r3, #96	; 0x60
 80038d6:	d050      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x11a>
 80038d8:	2b60      	cmp	r3, #96	; 0x60
 80038da:	d877      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b50      	cmp	r3, #80	; 0x50
 80038de:	d03c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0xfa>
 80038e0:	2b50      	cmp	r3, #80	; 0x50
 80038e2:	d873      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d058      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x13a>
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d86f      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b30      	cmp	r3, #48	; 0x30
 80038ee:	d064      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	2b30      	cmp	r3, #48	; 0x30
 80038f2:	d86b      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d060      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x15a>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d867      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d05c      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x15a>
 8003900:	2b10      	cmp	r3, #16
 8003902:	d05a      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	e062      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003916:	f000 f968 	bl	8003bea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	609a      	str	r2, [r3, #8]
      break;
 8003932:	e04f      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	f000 f951 	bl	8003bea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003956:	609a      	str	r2, [r3, #8]
      break;
 8003958:	e03c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	461a      	mov	r2, r3
 8003968:	f000 f8c8 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2150      	movs	r1, #80	; 0x50
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f91f 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003978:	e02c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003986:	461a      	mov	r2, r3
 8003988:	f000 f8e6 	bl	8003b58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2160      	movs	r1, #96	; 0x60
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f90f 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003998:	e01c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	461a      	mov	r2, r3
 80039a8:	f000 f8a8 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f8ff 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 80039b8:	e00c      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f000 f8f6 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 80039ca:	e003      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e000      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
	...

08003a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <TIM_Base_SetConfig+0xb8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0x30>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0x30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <TIM_Base_SetConfig+0xbc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0x30>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <TIM_Base_SetConfig+0xc0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <TIM_Base_SetConfig+0xb8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_Base_SetConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d007      	beq.n	8003a9a <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <TIM_Base_SetConfig+0xbc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_Base_SetConfig+0x62>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <TIM_Base_SetConfig+0xc0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <TIM_Base_SetConfig+0xb8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 030a 	bic.w	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	031b      	lsls	r3, r3, #12
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f043 0307 	orr.w	r3, r3, #7
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e046      	b.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d009      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10c      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e042      	b.n	8003da0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fed0 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f82b 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003de2:	f023 030c 	bic.w	r3, r3, #12
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <UART_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7ff fb4a 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	e002      	b.n	8003e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff fb32 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	0119      	lsls	r1, r3, #4
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e56:	fba3 0302 	umull	r0, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2064      	movs	r0, #100	; 0x64
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	3332      	adds	r3, #50	; 0x32
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e74:	4419      	add	r1, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <UART_SetConfig+0x118>)
 8003e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	fb00 f303 	mul.w	r3, r0, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	3332      	adds	r3, #50	; 0x32
 8003ea0:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <UART_SetConfig+0x118>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40013800 	.word	0x40013800
 8003ec0:	51eb851f 	.word	0x51eb851f

08003ec4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f001 fc92 	bl	80057fe <VL53L0X_get_offset_calibration_data_micro_meter>
 8003eda:	4603      	mov	r3, r0
 8003edc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b096      	sub	sp, #88	; 0x58
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003efa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2188      	movs	r1, #136	; 0x88
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f004 fbea 	bl	80086e0 <VL53L0X_WrByte>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f20:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003f2a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a9e      	ldr	r2, [pc, #632]	; (80041ac <VL53L0X_DataInit+0x2c0>)
 8003f32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a9d      	ldr	r2, [pc, #628]	; (80041b0 <VL53L0X_DataInit+0x2c4>)
 8003f3a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fac1 	bl	80044d2 <VL53L0X_GetDeviceParameters>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8003f56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d112      	bne.n	8003f84 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003f62:	2300      	movs	r3, #0
 8003f64:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f103 0410 	add.w	r4, r3, #16
 8003f6c:	f107 0510 	add.w	r5, r7, #16
 8003f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2264      	movs	r2, #100	; 0x64
 8003f88:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003f92:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f9c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003fa6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f004 fb92 	bl	80086e0 <VL53L0X_WrByte>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	21ff      	movs	r1, #255	; 0xff
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f004 fb86 	bl	80086e0 <VL53L0X_WrByte>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f004 fb7a 	bl	80086e0 <VL53L0X_WrByte>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8003ffa:	f107 030f 	add.w	r3, r7, #15
 8003ffe:	461a      	mov	r2, r3
 8004000:	2191      	movs	r1, #145	; 0x91
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f004 fbee 	bl	80087e4 <VL53L0X_RdByte>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004010:	4313      	orrs	r3, r2
 8004012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800401e:	2201      	movs	r2, #1
 8004020:	2100      	movs	r1, #0
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f004 fb5c 	bl	80086e0 <VL53L0X_WrByte>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004030:	4313      	orrs	r3, r2
 8004032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004036:	2200      	movs	r2, #0
 8004038:	21ff      	movs	r1, #255	; 0xff
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f004 fb50 	bl	80086e0 <VL53L0X_WrByte>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004048:	4313      	orrs	r3, r2
 800404a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800404e:	2200      	movs	r2, #0
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f004 fb44 	bl	80086e0 <VL53L0X_WrByte>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004060:	4313      	orrs	r3, r2
 8004062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004066:	2300      	movs	r3, #0
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
 800406a:	e014      	b.n	8004096 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800406c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004070:	2b00      	cmp	r3, #0
 8004072:	d114      	bne.n	800409e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004076:	b29b      	uxth	r3, r3
 8004078:	2201      	movs	r2, #1
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fd19 	bl	8004ab4 <VL53L0X_SetLimitCheckEnable>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800408a:	4313      	orrs	r3, r2
 800408c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004092:	3301      	adds	r3, #1
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	2b05      	cmp	r3, #5
 800409a:	dde7      	ble.n	800406c <VL53L0X_DataInit+0x180>
 800409c:	e000      	b.n	80040a0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800409e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80040a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80040a8:	2200      	movs	r2, #0
 80040aa:	2102      	movs	r1, #2
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fd01 	bl	8004ab4 <VL53L0X_SetLimitCheckEnable>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80040b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d107      	bne.n	80040d0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80040c0:	2200      	movs	r2, #0
 80040c2:	2103      	movs	r1, #3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fcf5 	bl	8004ab4 <VL53L0X_SetLimitCheckEnable>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80040d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80040d8:	2200      	movs	r2, #0
 80040da:	2104      	movs	r1, #4
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fce9 	bl	8004ab4 <VL53L0X_SetLimitCheckEnable>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80040e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80040f0:	2200      	movs	r2, #0
 80040f2:	2105      	movs	r1, #5
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fcdd 	bl	8004ab4 <VL53L0X_SetLimitCheckEnable>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004100:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004104:	2b00      	cmp	r3, #0
 8004106:	d108      	bne.n	800411a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004108:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800410c:	2100      	movs	r1, #0
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fd7e 	bl	8004c10 <VL53L0X_SetLimitCheckValue>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800411a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004126:	2101      	movs	r1, #1
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fd71 	bl	8004c10 <VL53L0X_SetLimitCheckValue>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004134:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004138:	2b00      	cmp	r3, #0
 800413a:	d108      	bne.n	800414e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800413c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004140:	2102      	movs	r1, #2
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fd64 	bl	8004c10 <VL53L0X_SetLimitCheckValue>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800414e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004156:	2200      	movs	r2, #0
 8004158:	2103      	movs	r1, #3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fd58 	bl	8004c10 <VL53L0X_SetLimitCheckValue>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004166:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10f      	bne.n	800418e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	22ff      	movs	r2, #255	; 0xff
 8004172:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	2101      	movs	r1, #1
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f004 fab0 	bl	80086e0 <VL53L0X_WrByte>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800418e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800419e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3758      	adds	r7, #88	; 0x58
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bdb0      	pop	{r4, r5, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	00016b85 	.word	0x00016b85
 80041b0:	000970a4 	.word	0x000970a4

080041b4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b09e      	sub	sp, #120	; 0x78
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80041c2:	f107 031c 	add.w	r3, r7, #28
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f004 ff02 	bl	8008fd4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80041f0:	2101      	movs	r1, #1
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f002 fa43 	bl	800667e <VL53L0X_get_info_from_device>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004204:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800420c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004214:	2b01      	cmp	r3, #1
 8004216:	d80d      	bhi.n	8004234 <VL53L0X_StaticInit+0x80>
 8004218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800421c:	2b01      	cmp	r3, #1
 800421e:	d102      	bne.n	8004226 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004222:	2b20      	cmp	r3, #32
 8004224:	d806      	bhi.n	8004234 <VL53L0X_StaticInit+0x80>
 8004226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10e      	bne.n	800424c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800422e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d90b      	bls.n	800424c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004234:	f107 0218 	add.w	r2, r7, #24
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 fcd7 	bl	8005bf2 <VL53L0X_perform_ref_spad_management>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800424a:	e009      	b.n	8004260 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800424c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004250:	461a      	mov	r2, r3
 8004252:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f001 fed8 	bl	800600a <VL53L0X_set_reference_spads>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004260:	4b94      	ldr	r3, [pc, #592]	; (80044b4 <VL53L0X_StaticInit+0x300>)
 8004262:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004264:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004284:	66bb      	str	r3, [r7, #104]	; 0x68
 8004286:	e001      	b.n	800428c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004288:	4b8a      	ldr	r3, [pc, #552]	; (80044b4 <VL53L0X_StaticInit+0x300>)
 800428a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800428c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004294:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f003 fb0c 	bl	80078b4 <VL53L0X_load_tuning_settings>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80042a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2304      	movs	r3, #4
 80042b0:	2200      	movs	r2, #0
 80042b2:	2100      	movs	r1, #0
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 f8d3 	bl	8005460 <VL53L0X_SetGpioConfig>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d121      	bne.n	800430c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80042c8:	2201      	movs	r2, #1
 80042ca:	21ff      	movs	r1, #255	; 0xff
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f004 fa07 	bl	80086e0 <VL53L0X_WrByte>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80042d8:	f107 031a 	add.w	r3, r7, #26
 80042dc:	461a      	mov	r2, r3
 80042de:	2184      	movs	r1, #132	; 0x84
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f004 faa9 	bl	8008838 <VL53L0X_RdWord>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80042f4:	2200      	movs	r2, #0
 80042f6:	21ff      	movs	r1, #255	; 0xff
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f004 f9f1 	bl	80086e0 <VL53L0X_WrByte>
 80042fe:	4603      	mov	r3, r0
 8004300:	461a      	mov	r2, r3
 8004302:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004306:	4313      	orrs	r3, r2
 8004308:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800430c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004314:	8b7b      	ldrh	r3, [r7, #26]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004320:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004324:	2b00      	cmp	r3, #0
 8004326:	d108      	bne.n	800433a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8cf 	bl	80044d2 <VL53L0X_GetDeviceParameters>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800433a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800433e:	2b00      	cmp	r3, #0
 8004340:	d110      	bne.n	8004364 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004342:	f107 0319 	add.w	r3, r7, #25
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f991 	bl	8004670 <VL53L0X_GetFractionEnable>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004354:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800435c:	7e7a      	ldrb	r2, [r7, #25]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004364:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10e      	bne.n	800438a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f103 0410 	add.w	r4, r3, #16
 8004372:	f107 051c 	add.w	r5, r7, #28
 8004376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800437a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800437c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800437e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004382:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800438a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800438e:	2b00      	cmp	r3, #0
 8004390:	d111      	bne.n	80043b6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004392:	f107 0319 	add.w	r3, r7, #25
 8004396:	461a      	mov	r2, r3
 8004398:	2101      	movs	r1, #1
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f004 fa22 	bl	80087e4 <VL53L0X_RdByte>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80043a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80043ae:	7e7a      	ldrb	r2, [r7, #25]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80043b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80043be:	2200      	movs	r2, #0
 80043c0:	2100      	movs	r1, #0
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9b0 	bl	8004728 <VL53L0X_SetSequenceStepEnable>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80043ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80043d6:	2200      	movs	r2, #0
 80043d8:	2102      	movs	r1, #2
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9a4 	bl	8004728 <VL53L0X_SetSequenceStepEnable>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80043e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2203      	movs	r2, #3
 80043f2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80043f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80043fe:	f107 0313 	add.w	r3, r7, #19
 8004402:	461a      	mov	r2, r3
 8004404:	2100      	movs	r1, #0
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f977 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004412:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800441a:	7cfa      	ldrb	r2, [r7, #19]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004422:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800442a:	f107 0313 	add.w	r3, r7, #19
 800442e:	461a      	mov	r2, r3
 8004430:	2101      	movs	r1, #1
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f961 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800443e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004446:	7cfa      	ldrb	r2, [r7, #19]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800444e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004456:	f107 030c 	add.w	r3, r7, #12
 800445a:	461a      	mov	r2, r3
 800445c:	2103      	movs	r1, #3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f002 fe8c 	bl	800717c <get_sequence_step_timeout>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800446a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800447a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004482:	f107 030c 	add.w	r3, r7, #12
 8004486:	461a      	mov	r2, r3
 8004488:	2104      	movs	r1, #4
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f002 fe76 	bl	800717c <get_sequence_step_timeout>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004496:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3770      	adds	r7, #112	; 0x70
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bdb0      	pop	{r4, r5, r7, pc}
 80044b2:	bf00      	nop
 80044b4:	2000000c 	.word	0x2000000c

080044b8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80044c0:	239d      	movs	r3, #157	; 0x9d
 80044c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80044c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr

080044d2 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f8b1 	bl	800464c <VL53L0X_GetDeviceMode>
 80044ea:	4603      	mov	r3, r0
 80044ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80044ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa5d 	bl	80049bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004502:	4603      	mov	r3, r0
 8004504:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2200      	movs	r2, #0
 8004512:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	3310      	adds	r3, #16
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa92 	bl	8004a4c <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800452c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	3314      	adds	r3, #20
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fcc2 	bl	8003ec4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d134      	bne.n	80045b6 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	e02a      	b.n	80045a8 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d12a      	bne.n	80045b0 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	b299      	uxth	r1, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3308      	adds	r3, #8
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	461a      	mov	r2, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fbb1 	bl	8004cd4 <VL53L0X_GetLimitCheckValue>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	4313      	orrs	r3, r2
 800457a:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800457c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d117      	bne.n	80045b4 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	b299      	uxth	r1, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3318      	adds	r3, #24
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	4413      	add	r3, r2
 8004590:	461a      	mov	r2, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fb1a 	bl	8004bcc <VL53L0X_GetLimitCheckEnable>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	4313      	orrs	r3, r2
 80045a0:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	ddd1      	ble.n	8004552 <VL53L0X_GetDeviceParameters+0x80>
 80045ae:	e002      	b.n	80045b6 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80045b4:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	333c      	adds	r3, #60	; 0x3c
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fc13 	bl	8004df0 <VL53L0X_GetWrapAroundCheckEnable>
 80045ca:	4603      	mov	r3, r0
 80045cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80045ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f879 	bl	80046d4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80045e2:	4603      	mov	r3, r0
 80045e4:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	2b15      	cmp	r3, #21
 8004608:	bf8c      	ite	hi
 800460a:	2201      	movhi	r2, #1
 800460c:	2200      	movls	r2, #0
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	2a00      	cmp	r2, #0
 8004612:	d10f      	bne.n	8004634 <VL53L0X_SetDeviceMode+0x40>
 8004614:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <VL53L0X_SetDeviceMode+0x54>)
 8004616:	fa22 f303 	lsr.w	r3, r2, r3
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	741a      	strb	r2, [r3, #16]
		break;
 8004632:	e001      	b.n	8004638 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004634:	23f8      	movs	r3, #248	; 0xf8
 8004636:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	0030000b 	.word	0x0030000b

0800464c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004656:	2300      	movs	r3, #0
 8004658:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7c1a      	ldrb	r2, [r3, #16]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	2109      	movs	r1, #9
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f004 f8ae 	bl	80087e4 <VL53L0X_RdByte>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800468c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80046a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f002 ff66 	bl	8007590 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80046c4:	4603      	mov	r3, r0
 80046c6:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80046c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f003 f833 	bl	8007750 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80046ea:	4603      	mov	r3, r0
 80046ec:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80046ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	460b      	mov	r3, r1
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800470c:	7afb      	ldrb	r3, [r7, #11]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4619      	mov	r1, r3
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f002 ff05 	bl	8007522 <VL53L0X_get_vcsel_pulse_period>
 8004718:	4603      	mov	r3, r0
 800471a:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800471c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
 8004734:	4613      	mov	r3, r2
 8004736:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004738:	2300      	movs	r3, #0
 800473a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004744:	f107 030f 	add.w	r3, r7, #15
 8004748:	461a      	mov	r2, r3
 800474a:	2101      	movs	r1, #1
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f004 f849 	bl	80087e4 <VL53L0X_RdByte>
 8004752:	4603      	mov	r3, r0
 8004754:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800475a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d159      	bne.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8004762:	78bb      	ldrb	r3, [r7, #2]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d12b      	bne.n	80047c0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d825      	bhi.n	80047ba <VL53L0X_SetSequenceStepEnable+0x92>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004789 	.word	0x08004789
 8004778:	08004793 	.word	0x08004793
 800477c:	0800479d 	.word	0x0800479d
 8004780:	080047a7 	.word	0x080047a7
 8004784:	080047b1 	.word	0x080047b1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004788:	7dbb      	ldrb	r3, [r7, #22]
 800478a:	f043 0310 	orr.w	r3, r3, #16
 800478e:	75bb      	strb	r3, [r7, #22]
				break;
 8004790:	e041      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004792:	7dbb      	ldrb	r3, [r7, #22]
 8004794:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004798:	75bb      	strb	r3, [r7, #22]
				break;
 800479a:	e03c      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800479c:	7dbb      	ldrb	r3, [r7, #22]
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	75bb      	strb	r3, [r7, #22]
				break;
 80047a4:	e037      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80047a6:	7dbb      	ldrb	r3, [r7, #22]
 80047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ac:	75bb      	strb	r3, [r7, #22]
				break;
 80047ae:	e032      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80047b0:	7dbb      	ldrb	r3, [r7, #22]
 80047b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047b6:	75bb      	strb	r3, [r7, #22]
				break;
 80047b8:	e02d      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047ba:	23fc      	movs	r3, #252	; 0xfc
 80047bc:	75fb      	strb	r3, [r7, #23]
 80047be:	e02a      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d825      	bhi.n	8004812 <VL53L0X_SetSequenceStepEnable+0xea>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <VL53L0X_SetSequenceStepEnable+0xa4>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	080047eb 	.word	0x080047eb
 80047d4:	080047f5 	.word	0x080047f5
 80047d8:	080047ff 	.word	0x080047ff
 80047dc:	08004809 	.word	0x08004809
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80047e0:	7dbb      	ldrb	r3, [r7, #22]
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	75bb      	strb	r3, [r7, #22]
				break;
 80047e8:	e015      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80047ea:	7dbb      	ldrb	r3, [r7, #22]
 80047ec:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80047f0:	75bb      	strb	r3, [r7, #22]
				break;
 80047f2:	e010      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80047f4:	7dbb      	ldrb	r3, [r7, #22]
 80047f6:	f023 0304 	bic.w	r3, r3, #4
 80047fa:	75bb      	strb	r3, [r7, #22]
				break;
 80047fc:	e00b      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80047fe:	7dbb      	ldrb	r3, [r7, #22]
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	75bb      	strb	r3, [r7, #22]
				break;
 8004806:	e006      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004808:	7dbb      	ldrb	r3, [r7, #22]
 800480a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480e:	75bb      	strb	r3, [r7, #22]
				break;
 8004810:	e001      	b.n	8004816 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004812:	23fc      	movs	r3, #252	; 0xfc
 8004814:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	7dba      	ldrb	r2, [r7, #22]
 800481a:	429a      	cmp	r2, r3
 800481c:	d01e      	beq.n	800485c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800481e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8004826:	7dbb      	ldrb	r3, [r7, #22]
 8004828:	461a      	mov	r2, r3
 800482a:	2101      	movs	r1, #1
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f003 ff57 	bl	80086e0 <VL53L0X_WrByte>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004836:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7dba      	ldrb	r2, [r7, #22]
 8004842:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004854:	6939      	ldr	r1, [r7, #16]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ff29 	bl	80046ae <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800485c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	72fb      	strb	r3, [r7, #11]
 8004876:	4613      	mov	r3, r2
 8004878:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	2b04      	cmp	r3, #4
 8004888:	d836      	bhi.n	80048f8 <sequence_step_enabled+0x90>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <sequence_step_enabled+0x28>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048b7 	.word	0x080048b7
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048ed 	.word	0x080048ed
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80048a4:	7abb      	ldrb	r3, [r7, #10]
 80048a6:	111b      	asrs	r3, r3, #4
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	701a      	strb	r2, [r3, #0]
		break;
 80048b4:	e022      	b.n	80048fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80048b6:	7abb      	ldrb	r3, [r7, #10]
 80048b8:	10db      	asrs	r3, r3, #3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	701a      	strb	r2, [r3, #0]
		break;
 80048c6:	e019      	b.n	80048fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80048c8:	7abb      	ldrb	r3, [r7, #10]
 80048ca:	109b      	asrs	r3, r3, #2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	701a      	strb	r2, [r3, #0]
		break;
 80048d8:	e010      	b.n	80048fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80048da:	7abb      	ldrb	r3, [r7, #10]
 80048dc:	119b      	asrs	r3, r3, #6
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	701a      	strb	r2, [r3, #0]
		break;
 80048ea:	e007      	b.n	80048fc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80048ec:	7abb      	ldrb	r3, [r7, #10]
 80048ee:	09db      	lsrs	r3, r3, #7
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	701a      	strb	r2, [r3, #0]
		break;
 80048f6:	e001      	b.n	80048fc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048f8:	23fc      	movs	r3, #252	; 0xfc
 80048fa:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800491e:	f107 030e 	add.w	r3, r7, #14
 8004922:	461a      	mov	r2, r3
 8004924:	2101      	movs	r1, #1
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f003 ff5c 	bl	80087e4 <VL53L0X_RdByte>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004938:	7bba      	ldrb	r2, [r7, #14]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2100      	movs	r1, #0
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff92 	bl	8004868 <sequence_step_enabled>
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004950:	7bba      	ldrb	r2, [r7, #14]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	3302      	adds	r3, #2
 8004956:	2101      	movs	r1, #1
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff85 	bl	8004868 <sequence_step_enabled>
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800496a:	7bba      	ldrb	r2, [r7, #14]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	2102      	movs	r1, #2
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ff78 	bl	8004868 <sequence_step_enabled>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800497c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d108      	bne.n	8004996 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004984:	7bba      	ldrb	r2, [r7, #14]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	3303      	adds	r3, #3
 800498a:	2103      	movs	r1, #3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff6b 	bl	8004868 <sequence_step_enabled>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800499e:	7bba      	ldrb	r2, [r7, #14]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	3304      	adds	r3, #4
 80049a4:	2104      	movs	r1, #4
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ff5e 	bl	8004868 <sequence_step_enabled>
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80049b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80049ca:	f107 030c 	add.w	r3, r7, #12
 80049ce:	461a      	mov	r2, r3
 80049d0:	21f8      	movs	r1, #248	; 0xf8
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f003 ff30 	bl	8008838 <VL53L0X_RdWord>
 80049d8:	4603      	mov	r3, r0
 80049da:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80049dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d108      	bne.n	80049f6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80049e4:	f107 0308 	add.w	r3, r7, #8
 80049e8:	461a      	mov	r2, r3
 80049ea:	2104      	movs	r1, #4
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f003 ff5b 	bl	80088a8 <VL53L0X_RdDWord>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10c      	bne.n	8004a18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80049fe:	89bb      	ldrh	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	89ba      	ldrh	r2, [r7, #12]
 8004a08:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7f1b      	ldrb	r3, [r3, #28]
 8004a36:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	7bba      	ldrb	r2, [r7, #14]
 8004a3c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004a5a:	f107 030e 	add.w	r3, r7, #14
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2120      	movs	r1, #32
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f003 fee8 	bl	8008838 <VL53L0X_RdWord>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d118      	bne.n	8004aa6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
 8004a8c:	e00b      	b.n	8004aa6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d902      	bls.n	8004ae0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004ada:	23fc      	movs	r3, #252	; 0xfc
 8004adc:	75fb      	strb	r3, [r7, #23]
 8004ade:	e05b      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004ae0:	787b      	ldrb	r3, [r7, #1]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73bb      	strb	r3, [r7, #14]
 8004af2:	e00a      	b.n	8004b0a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	330c      	adds	r3, #12
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d841      	bhi.n	8004b94 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b31 	.word	0x08004b31
 8004b1c:	08004b3b 	.word	0x08004b3b
 8004b20:	08004b51 	.word	0x08004b51
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b65 	.word	0x08004b65
 8004b2c:	08004b7d 	.word	0x08004b7d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004b38:	e02e      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	2144      	movs	r1, #68	; 0x44
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f003 fdef 	bl	8008728 <VL53L0X_WrWord>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]

			break;
 8004b4e:	e023      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004b58:	e01e      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7bfa      	ldrb	r2, [r7, #15]
 8004b5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004b62:	e019      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004b6a:	7b7b      	ldrb	r3, [r7, #13]
 8004b6c:	22fe      	movs	r2, #254	; 0xfe
 8004b6e:	2160      	movs	r1, #96	; 0x60
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f003 fe03 	bl	800877c <VL53L0X_UpdateByte>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004b7a:	e00d      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004b82:	7b7b      	ldrb	r3, [r7, #13]
 8004b84:	22ef      	movs	r2, #239	; 0xef
 8004b86:	2160      	movs	r1, #96	; 0x60
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f003 fdf7 	bl	800877c <VL53L0X_UpdateByte>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004b92:	e001      	b.n	8004b98 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b94:	23fc      	movs	r3, #252	; 0xfc
 8004b96:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10f      	bne.n	8004bc0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4413      	add	r3, r2
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004bb2:	e005      	b.n	8004bc0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	d905      	bls.n	8004bf0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004be4:	23fc      	movs	r3, #252	; 0xfc
 8004be6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e008      	b.n	8004c02 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bfa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7dba      	ldrb	r2, [r7, #22]
 8004c00:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004c22:	897b      	ldrh	r3, [r7, #10]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c2c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004c2e:	7dbb      	ldrb	r3, [r7, #22]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c34:	897b      	ldrh	r3, [r7, #10]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	e040      	b.n	8004cc6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d830      	bhi.n	8004cac <VL53L0X_SetLimitCheckValue+0x9c>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <VL53L0X_SetLimitCheckValue+0x40>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c69 	.word	0x08004c69
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c8f 	.word	0x08004c8f
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004c6e:	e01f      	b.n	8004cb0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	2144      	movs	r1, #68	; 0x44
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f003 fd54 	bl	8008728 <VL53L0X_WrWord>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004c84:	e014      	b.n	8004cb0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004c8c:	e010      	b.n	8004cb0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004c94:	e00c      	b.n	8004cb0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f003 fd41 	bl	8008728 <VL53L0X_WrWord>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004caa:	e001      	b.n	8004cb0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004cac:	23fc      	movs	r3, #252	; 0xfc
 8004cae:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004cb8:	897b      	ldrh	r3, [r7, #10]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop

08004cd4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d847      	bhi.n	8004d80 <VL53L0X_GetLimitCheckValue+0xac>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <VL53L0X_GetLimitCheckValue+0x24>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d11 	.word	0x08004d11
 8004cfc:	08004d1d 	.word	0x08004d1d
 8004d00:	08004d43 	.word	0x08004d43
 8004d04:	08004d4f 	.word	0x08004d4f
 8004d08:	08004d5b 	.word	0x08004d5b
 8004d0c:	08004d5b 	.word	0x08004d5b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	77bb      	strb	r3, [r7, #30]
		break;
 8004d1a:	e033      	b.n	8004d84 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004d1c:	f107 0316 	add.w	r3, r7, #22
 8004d20:	461a      	mov	r2, r3
 8004d22:	2144      	movs	r1, #68	; 0x44
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f003 fd87 	bl	8008838 <VL53L0X_RdWord>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004d2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004d36:	8afb      	ldrh	r3, [r7, #22]
 8004d38:	025b      	lsls	r3, r3, #9
 8004d3a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77bb      	strb	r3, [r7, #30]
		break;
 8004d40:	e020      	b.n	8004d84 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77bb      	strb	r3, [r7, #30]
		break;
 8004d4c:	e01a      	b.n	8004d84 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	77bb      	strb	r3, [r7, #30]
		break;
 8004d58:	e014      	b.n	8004d84 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004d5a:	f107 0316 	add.w	r3, r7, #22
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2164      	movs	r1, #100	; 0x64
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f003 fd68 	bl	8008838 <VL53L0X_RdWord>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004d6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	025b      	lsls	r3, r3, #9
 8004d78:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	77bb      	strb	r3, [r7, #30]
		break;
 8004d7e:	e001      	b.n	8004d84 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d80:	23fc      	movs	r3, #252	; 0xfc
 8004d82:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d12a      	bne.n	8004de2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004d8c:	7fbb      	ldrb	r3, [r7, #30]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d124      	bne.n	8004ddc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d110      	bne.n	8004dba <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004d98:	897b      	ldrh	r3, [r7, #10]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004dac:	897b      	ldrh	r3, [r7, #10]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004db8:	e013      	b.n	8004de2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004dda:	e002      	b.n	8004de2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004de2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop

08004df0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004dfe:	f107 030e 	add.w	r3, r7, #14
 8004e02:	461a      	mov	r2, r3
 8004e04:	2101      	movs	r1, #1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f003 fcec 	bl	80087e4 <VL53L0X_RdByte>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10e      	bne.n	8004e36 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004e18:	7bba      	ldrb	r2, [r7, #14]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da03      	bge.n	8004e30 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004e60:	f107 030e 	add.w	r3, r7, #14
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fbf0 	bl	800464c <VL53L0X_GetDeviceMode>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f898 	bl	8004fb4 <VL53L0X_StartMeasurement>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 fb3c 	bl	800650e <VL53L0X_measurement_poll_for_completion>
 8004e96:	4603      	mov	r3, r0
 8004e98:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004ea2:	7bbb      	ldrb	r3, [r7, #14]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004ecc:	2301      	movs	r3, #1
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f001 fade 	bl	8006494 <VL53L0X_perform_ref_calibration>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004efe:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004f00:	7dbb      	ldrb	r3, [r7, #22]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d005      	beq.n	8004f12 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004f06:	7dbb      	ldrb	r3, [r7, #22]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d002      	beq.n	8004f12 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004f0c:	7dbb      	ldrb	r3, [r7, #22]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d147      	bne.n	8004fa2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	f107 0210 	add.w	r2, r7, #16
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fbc1 	bl	80056a4 <VL53L0X_GetInterruptThresholds>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004f2c:	d803      	bhi.n	8004f36 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004f2e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004f30:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004f34:	d935      	bls.n	8004fa2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d131      	bne.n	8004fa2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004f44:	491a      	ldr	r1, [pc, #104]	; (8004fb0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f002 fcb4 	bl	80078b4 <VL53L0X_load_tuning_settings>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	75fb      	strb	r3, [r7, #23]
 8004f50:	e027      	b.n	8004fa2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004f52:	2204      	movs	r2, #4
 8004f54:	21ff      	movs	r1, #255	; 0xff
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f003 fbc2 	bl	80086e0 <VL53L0X_WrByte>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004f66:	2200      	movs	r2, #0
 8004f68:	2170      	movs	r1, #112	; 0x70
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f003 fbb8 	bl	80086e0 <VL53L0X_WrByte>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	21ff      	movs	r1, #255	; 0xff
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f003 fbae 	bl	80086e0 <VL53L0X_WrByte>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2180      	movs	r1, #128	; 0x80
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f003 fba4 	bl	80086e0 <VL53L0X_WrByte>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000100 	.word	0x20000100

08004fb4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004fc4:	f107 030e 	add.w	r3, r7, #14
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fb3e 	bl	800464c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f003 fb83 	bl	80086e0 <VL53L0X_WrByte>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004fde:	2201      	movs	r2, #1
 8004fe0:	21ff      	movs	r1, #255	; 0xff
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f003 fb7c 	bl	80086e0 <VL53L0X_WrByte>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004fec:	2200      	movs	r2, #0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f003 fb75 	bl	80086e0 <VL53L0X_WrByte>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005000:	461a      	mov	r2, r3
 8005002:	2191      	movs	r1, #145	; 0x91
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f003 fb6b 	bl	80086e0 <VL53L0X_WrByte>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800500e:	2201      	movs	r2, #1
 8005010:	2100      	movs	r1, #0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f003 fb64 	bl	80086e0 <VL53L0X_WrByte>
 8005018:	4603      	mov	r3, r0
 800501a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800501c:	2200      	movs	r2, #0
 800501e:	21ff      	movs	r1, #255	; 0xff
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f003 fb5d 	bl	80086e0 <VL53L0X_WrByte>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f003 fb56 	bl	80086e0 <VL53L0X_WrByte>
 8005034:	4603      	mov	r3, r0
 8005036:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005038:	7bbb      	ldrb	r3, [r7, #14]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d054      	beq.n	80050e8 <VL53L0X_StartMeasurement+0x134>
 800503e:	2b03      	cmp	r3, #3
 8005040:	dc6c      	bgt.n	800511c <VL53L0X_StartMeasurement+0x168>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <VL53L0X_StartMeasurement+0x98>
 8005046:	2b01      	cmp	r3, #1
 8005048:	d034      	beq.n	80050b4 <VL53L0X_StartMeasurement+0x100>
 800504a:	e067      	b.n	800511c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800504c:	2201      	movs	r2, #1
 800504e:	2100      	movs	r1, #0
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f003 fb45 	bl	80086e0 <VL53L0X_WrByte>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800505e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d15d      	bne.n	8005122 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005070:	f107 030d 	add.w	r3, r7, #13
 8005074:	461a      	mov	r2, r3
 8005076:	2100      	movs	r1, #0
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f003 fbb3 	bl	80087e4 <VL53L0X_RdByte>
 800507e:	4603      	mov	r3, r0
 8005080:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	3301      	adds	r3, #1
 8005086:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005088:	7b7a      	ldrb	r2, [r7, #13]
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	4013      	ands	r3, r2
 800508e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	429a      	cmp	r2, r3
 8005094:	d107      	bne.n	80050a6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050a4:	d3e1      	bcc.n	800506a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050ac:	d339      	bcc.n	8005122 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80050ae:	23f9      	movs	r3, #249	; 0xf9
 80050b0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80050b2:	e036      	b.n	8005122 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80050b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80050bc:	2101      	movs	r1, #1
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff12 	bl	8004ee8 <VL53L0X_CheckAndLoadInterruptSettings>
 80050c4:	4603      	mov	r3, r0
 80050c6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80050c8:	2202      	movs	r2, #2
 80050ca:	2100      	movs	r1, #0
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f003 fb07 	bl	80086e0 <VL53L0X_WrByte>
 80050d2:	4603      	mov	r3, r0
 80050d4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80050d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d123      	bne.n	8005126 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2204      	movs	r2, #4
 80050e2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80050e6:	e01e      	b.n	8005126 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80050e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d105      	bne.n	80050fc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80050f0:	2101      	movs	r1, #1
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fef8 	bl	8004ee8 <VL53L0X_CheckAndLoadInterruptSettings>
 80050f8:	4603      	mov	r3, r0
 80050fa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80050fc:	2204      	movs	r2, #4
 80050fe:	2100      	movs	r1, #0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f003 faed 	bl	80086e0 <VL53L0X_WrByte>
 8005106:	4603      	mov	r3, r0
 8005108:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800510a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2204      	movs	r2, #4
 8005116:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800511a:	e006      	b.n	800512a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800511c:	23f8      	movs	r3, #248	; 0xf8
 800511e:	75fb      	strb	r3, [r7, #23]
 8005120:	e004      	b.n	800512c <VL53L0X_StartMeasurement+0x178>
		break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <VL53L0X_StartMeasurement+0x178>
		break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <VL53L0X_StartMeasurement+0x178>
		break;
 800512a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800512c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800514c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800514e:	7bbb      	ldrb	r3, [r7, #14]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d112      	bne.n	800517a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005154:	f107 0308 	add.w	r3, r7, #8
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fb18 	bl	8005790 <VL53L0X_GetInterruptMaskStatus>
 8005160:	4603      	mov	r3, r0
 8005162:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d103      	bne.n	8005172 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e01c      	b.n	80051ac <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e018      	b.n	80051ac <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800517a:	f107 030d 	add.w	r3, r7, #13
 800517e:	461a      	mov	r2, r3
 8005180:	2114      	movs	r1, #20
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f003 fb2e 	bl	80087e4 <VL53L0X_RdByte>
 8005188:	4603      	mov	r3, r0
 800518a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800518c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005194:	7b7b      	ldrb	r3, [r7, #13]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e002      	b.n	80051ac <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	b096      	sub	sp, #88	; 0x58
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80051c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051cc:	230c      	movs	r3, #12
 80051ce:	2114      	movs	r1, #20
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f003 fa59 	bl	8008688 <VL53L0X_ReadMulti>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80051dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 80d1 	bne.w	8005388 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80051f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005200:	b29b      	uxth	r3, r3
 8005202:	4413      	add	r3, r2
 8005204:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800520e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005212:	b29b      	uxth	r3, r3
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	b29a      	uxth	r2, r3
 8005218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800521c:	b29b      	uxth	r3, r3
 800521e:	4413      	add	r3, r2
 8005220:	b29b      	uxth	r3, r3
 8005222:	025b      	lsls	r3, r3, #9
 8005224:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800522a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800522c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005230:	b29b      	uxth	r3, r3
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b29a      	uxth	r2, r3
 8005236:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800523a:	b29b      	uxth	r3, r3
 800523c:	4413      	add	r3, r2
 800523e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005246:	025b      	lsls	r3, r3, #9
 8005248:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800524e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	b29a      	uxth	r2, r3
 8005258:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800525c:	b29b      	uxth	r3, r3
 800525e:	4413      	add	r3, r2
 8005260:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800526a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800526c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005270:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800527a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005286:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528c:	d046      	beq.n	800531c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800528e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005290:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800529c:	4a57      	ldr	r2, [pc, #348]	; (80053fc <VL53L0X_GetRangingMeasurementData+0x244>)
 800529e:	fb82 1203 	smull	r1, r2, r2, r3
 80052a2:	1192      	asrs	r2, r2, #6
 80052a4:	17db      	asrs	r3, r3, #31
 80052a6:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80052a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7f1b      	ldrb	r3, [r3, #28]
 80052b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80052ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02c      	beq.n	800531c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80052c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	121a      	asrs	r2, r3, #8
					<= 0) {
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d10d      	bne.n	80052f0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80052d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80052dc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80052e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052e4:	e016      	b.n	8005314 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80052e6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80052ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052ee:	e011      	b.n	8005314 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80052f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052f6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80052fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052fc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005300:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005304:	121b      	asrs	r3, r3, #8
 8005306:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005310:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005318:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800531c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00d      	beq.n	8005340 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005324:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005330:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005334:	b2db      	uxtb	r3, r3
 8005336:	019b      	lsls	r3, r3, #6
 8005338:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	75da      	strb	r2, [r3, #23]
 800533e:	e006      	b.n	800534e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005346:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800534e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005352:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005356:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f002 ff43 	bl	80081f0 <VL53L0X_get_pal_range_status>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005372:	4313      	orrs	r3, r2
 8005374:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005378:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005380:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005388:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800538c:	2b00      	cmp	r3, #0
 800538e:	d12f      	bne.n	80053f0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f107 040c 	add.w	r4, r7, #12
 8005396:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800539a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800539c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800539e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80053aa:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80053b8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80053be:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80053c4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80053ca:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80053d0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80053d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80053e0:	f107 050c 	add.w	r5, r7, #12
 80053e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053f0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3750      	adds	r7, #80	; 0x50
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bdb0      	pop	{r4, r5, r7, pc}
 80053fc:	10624dd3 	.word	0x10624dd3

08005400 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800540e:	2100      	movs	r1, #0
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff f8ef 	bl	80045f4 <VL53L0X_SetDeviceMode>
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fd16 	bl	8004e54 <VL53L0X_PerformSingleMeasurement>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800542c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff febe 	bl	80051b8 <VL53L0X_GetRangingMeasurementData>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005448:	2100      	movs	r1, #0
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f960 	bl	8005710 <VL53L0X_ClearInterruptMask>
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	461a      	mov	r2, r3
 800546e:	4603      	mov	r3, r0
 8005470:	70fb      	strb	r3, [r7, #3]
 8005472:	460b      	mov	r3, r1
 8005474:	70bb      	strb	r3, [r7, #2]
 8005476:	4613      	mov	r3, r2
 8005478:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005484:	23f6      	movs	r3, #246	; 0xf6
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e105      	b.n	8005696 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800548a:	78bb      	ldrb	r3, [r7, #2]
 800548c:	2b14      	cmp	r3, #20
 800548e:	d110      	bne.n	80054b2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005490:	7e3b      	ldrb	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005496:	2310      	movs	r3, #16
 8005498:	73bb      	strb	r3, [r7, #14]
 800549a:	e001      	b.n	80054a0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800549c:	2301      	movs	r3, #1
 800549e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	461a      	mov	r2, r3
 80054a4:	2184      	movs	r1, #132	; 0x84
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f003 f91a 	bl	80086e0 <VL53L0X_WrByte>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	e0f1      	b.n	8005696 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80054b2:	78bb      	ldrb	r3, [r7, #2]
 80054b4:	2b15      	cmp	r3, #21
 80054b6:	f040 8097 	bne.w	80055e8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80054ba:	2201      	movs	r2, #1
 80054bc:	21ff      	movs	r1, #255	; 0xff
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f003 f90e 	bl	80086e0 <VL53L0X_WrByte>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f003 f904 	bl	80086e0 <VL53L0X_WrByte>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	4313      	orrs	r3, r2
 80054e0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80054e2:	2200      	movs	r2, #0
 80054e4:	21ff      	movs	r1, #255	; 0xff
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f003 f8fa 	bl	80086e0 <VL53L0X_WrByte>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80054f6:	2201      	movs	r2, #1
 80054f8:	2180      	movs	r1, #128	; 0x80
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f003 f8f0 	bl	80086e0 <VL53L0X_WrByte>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	4313      	orrs	r3, r2
 8005508:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800550a:	2202      	movs	r2, #2
 800550c:	2185      	movs	r1, #133	; 0x85
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f003 f8e6 	bl	80086e0 <VL53L0X_WrByte>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	4313      	orrs	r3, r2
 800551c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800551e:	2204      	movs	r2, #4
 8005520:	21ff      	movs	r1, #255	; 0xff
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f003 f8dc 	bl	80086e0 <VL53L0X_WrByte>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	4313      	orrs	r3, r2
 8005530:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005532:	2200      	movs	r2, #0
 8005534:	21cd      	movs	r1, #205	; 0xcd
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f003 f8d2 	bl	80086e0 <VL53L0X_WrByte>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	4313      	orrs	r3, r2
 8005544:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005546:	2211      	movs	r2, #17
 8005548:	21cc      	movs	r1, #204	; 0xcc
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f003 f8c8 	bl	80086e0 <VL53L0X_WrByte>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	4313      	orrs	r3, r2
 8005558:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800555a:	2207      	movs	r2, #7
 800555c:	21ff      	movs	r1, #255	; 0xff
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f003 f8be 	bl	80086e0 <VL53L0X_WrByte>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	4313      	orrs	r3, r2
 800556c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800556e:	2200      	movs	r2, #0
 8005570:	21be      	movs	r1, #190	; 0xbe
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f003 f8b4 	bl	80086e0 <VL53L0X_WrByte>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	4313      	orrs	r3, r2
 8005580:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005582:	2206      	movs	r2, #6
 8005584:	21ff      	movs	r1, #255	; 0xff
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f003 f8aa 	bl	80086e0 <VL53L0X_WrByte>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	4313      	orrs	r3, r2
 8005594:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005596:	2209      	movs	r2, #9
 8005598:	21cc      	movs	r1, #204	; 0xcc
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f003 f8a0 	bl	80086e0 <VL53L0X_WrByte>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80055aa:	2200      	movs	r2, #0
 80055ac:	21ff      	movs	r1, #255	; 0xff
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f003 f896 	bl	80086e0 <VL53L0X_WrByte>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80055be:	2201      	movs	r2, #1
 80055c0:	21ff      	movs	r1, #255	; 0xff
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f003 f88c 	bl	80086e0 <VL53L0X_WrByte>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f003 f882 	bl	80086e0 <VL53L0X_WrByte>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	e056      	b.n	8005696 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80055e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d120      	bne.n	8005632 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80055f0:	787b      	ldrb	r3, [r7, #1]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d81b      	bhi.n	800562e <VL53L0X_SetGpioConfig+0x1ce>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <VL53L0X_SetGpioConfig+0x19c>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	08005611 	.word	0x08005611
 8005600:	08005617 	.word	0x08005617
 8005604:	0800561d 	.word	0x0800561d
 8005608:	08005623 	.word	0x08005623
 800560c:	08005629 	.word	0x08005629
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005610:	2300      	movs	r3, #0
 8005612:	73bb      	strb	r3, [r7, #14]
				break;
 8005614:	e00d      	b.n	8005632 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005616:	2301      	movs	r3, #1
 8005618:	73bb      	strb	r3, [r7, #14]
				break;
 800561a:	e00a      	b.n	8005632 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800561c:	2302      	movs	r3, #2
 800561e:	73bb      	strb	r3, [r7, #14]
				break;
 8005620:	e007      	b.n	8005632 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005622:	2303      	movs	r3, #3
 8005624:	73bb      	strb	r3, [r7, #14]
				break;
 8005626:	e004      	b.n	8005632 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005628:	2304      	movs	r3, #4
 800562a:	73bb      	strb	r3, [r7, #14]
				break;
 800562c:	e001      	b.n	8005632 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800562e:	23f5      	movs	r3, #245	; 0xf5
 8005630:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	461a      	mov	r2, r3
 800563e:	210a      	movs	r1, #10
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f003 f84d 	bl	80086e0 <VL53L0X_WrByte>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800564a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005652:	7e3b      	ldrb	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	73bb      	strb	r3, [r7, #14]
 800565c:	e001      	b.n	8005662 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800565e:	2310      	movs	r3, #16
 8005660:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	22ef      	movs	r2, #239	; 0xef
 8005666:	2184      	movs	r1, #132	; 0x84
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f003 f887 	bl	800877c <VL53L0X_UpdateByte>
 800566e:	4603      	mov	r3, r0
 8005670:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	787a      	ldrb	r2, [r7, #1]
 800567e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800568a:	2100      	movs	r1, #0
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f83f 	bl	8005710 <VL53L0X_ClearInterruptMask>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005696:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop

080056a4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	460b      	mov	r3, r1
 80056b2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80056b8:	f107 0314 	add.w	r3, r7, #20
 80056bc:	461a      	mov	r2, r3
 80056be:	210e      	movs	r1, #14
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f003 f8b9 	bl	8008838 <VL53L0X_RdWord>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80056ca:	8abb      	ldrh	r3, [r7, #20]
 80056cc:	045b      	lsls	r3, r3, #17
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <VL53L0X_GetInterruptThresholds+0x68>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80056d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10f      	bne.n	8005700 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80056e0:	f107 0314 	add.w	r3, r7, #20
 80056e4:	461a      	mov	r2, r3
 80056e6:	210c      	movs	r1, #12
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f003 f8a5 	bl	8008838 <VL53L0X_RdWord>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80056f2:	8abb      	ldrh	r3, [r7, #20]
 80056f4:	045b      	lsls	r3, r3, #17
 80056f6:	461a      	mov	r2, r3
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <VL53L0X_GetInterruptThresholds+0x68>)
 80056fa:	4013      	ands	r3, r2
		*pThresholdHigh =
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	1ffe0000 	.word	0x1ffe0000

08005710 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005722:	2201      	movs	r2, #1
 8005724:	210b      	movs	r1, #11
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f002 ffda 	bl	80086e0 <VL53L0X_WrByte>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005730:	2200      	movs	r2, #0
 8005732:	210b      	movs	r1, #11
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f002 ffd3 	bl	80086e0 <VL53L0X_WrByte>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	4313      	orrs	r3, r2
 8005742:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005744:	f107 030d 	add.w	r3, r7, #13
 8005748:	461a      	mov	r2, r3
 800574a:	2113      	movs	r1, #19
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f003 f849 	bl	80087e4 <VL53L0X_RdByte>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	4313      	orrs	r3, r2
 800575a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	3301      	adds	r3, #1
 8005760:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005762:	7b7b      	ldrb	r3, [r7, #13]
 8005764:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d803      	bhi.n	800577a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0d3      	beq.n	8005722 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800577a:	7bbb      	ldrb	r3, [r7, #14]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005780:	23f4      	movs	r3, #244	; 0xf4
 8005782:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800579e:	f107 030e 	add.w	r3, r7, #14
 80057a2:	461a      	mov	r2, r3
 80057a4:	2113      	movs	r1, #19
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f003 f81c 	bl	80087e4 <VL53L0X_RdByte>
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80057b0:	7bbb      	ldrb	r3, [r7, #14]
 80057b2:	f003 0207 	and.w	r2, r3, #7
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	f003 0318 	and.w	r3, r3, #24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80057c4:	23fa      	movs	r3, #250	; 0xfa
 80057c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80057c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fa02 	bl	8005bf2 <VL53L0X_perform_ref_spad_management>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80057f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005808:	2300      	movs	r3, #0
 800580a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800580c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005810:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005816:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	461a      	mov	r2, r3
 800581e:	2128      	movs	r1, #40	; 0x28
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f003 f809 	bl	8008838 <VL53L0X_RdWord>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800582a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11e      	bne.n	8005870 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005832:	893b      	ldrh	r3, [r7, #8]
 8005834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005838:	b29b      	uxth	r3, r3
 800583a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	461a      	mov	r2, r3
 8005840:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005844:	429a      	cmp	r2, r3
 8005846:	dd0b      	ble.n	8005860 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005848:	893a      	ldrh	r2, [r7, #8]
 800584a:	897b      	ldrh	r3, [r7, #10]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b29b      	uxth	r3, r3
 8005850:	b21b      	sxth	r3, r3
 8005852:	461a      	mov	r2, r3
					* 250;
 8005854:	23fa      	movs	r3, #250	; 0xfa
 8005856:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e007      	b.n	8005870 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005860:	893b      	ldrh	r3, [r7, #8]
 8005862:	b21b      	sxth	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	23fa      	movs	r3, #250	; 0xfa
 8005868:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800587c:	b480      	push	{r7}
 800587e:	b08b      	sub	sp, #44	; 0x2c
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800588a:	2308      	movs	r3, #8
 800588c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	fb01 f202 	mul.w	r2, r1, r2
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e030      	b.n	800591e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	4413      	add	r3, r2
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d11e      	bne.n	8005910 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80058d2:	7ffa      	ldrb	r2, [r7, #31]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	fa42 f303 	asr.w	r3, r2, r3
 80058da:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80058e0:	e016      	b.n	8005910 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <get_next_good_spad+0x88>
				success = 1;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	fb03 f202 	mul.w	r2, r3, r2
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	4413      	add	r3, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	601a      	str	r2, [r3, #0]
				break;
 8005902:	e009      	b.n	8005918 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	3301      	adds	r3, #1
 800590e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	429a      	cmp	r2, r3
 8005916:	d3e4      	bcc.n	80058e2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d202      	bcs.n	800592c <get_next_good_spad+0xb0>
 8005926:	7fbb      	ldrb	r3, [r7, #30]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0c7      	beq.n	80058bc <get_next_good_spad+0x40>
		}
	}
}
 800592c:	bf00      	nop
 800592e:	372c      	adds	r7, #44	; 0x2c
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
	...

08005938 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	099b      	lsrs	r3, r3, #6
 8005948:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800594a:	4a07      	ldr	r2, [pc, #28]	; (8005968 <is_aperture+0x30>)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <is_aperture+0x22>
		isAperture = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200002b8 	.word	0x200002b8

0800596c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005978:	2300      	movs	r3, #0
 800597a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800597c:	2308      	movs	r3, #8
 800597e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005992:	69b9      	ldr	r1, [r7, #24]
 8005994:	fb01 f202 	mul.w	r2, r1, r2
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d302      	bcc.n	80059aa <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80059a4:	23ce      	movs	r3, #206	; 0xce
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e010      	b.n	80059cc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b25a      	sxtb	r2, r3
 80059b4:	2101      	movs	r1, #1
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	4313      	orrs	r3, r2
 80059c0:	b259      	sxtb	r1, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	b2ca      	uxtb	r2, r1
 80059ca:	701a      	strb	r2, [r3, #0]

	return status;
 80059cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3724      	adds	r7, #36	; 0x24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80059e4:	2306      	movs	r3, #6
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	21b0      	movs	r1, #176	; 0xb0
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f002 fe1c 	bl	8008628 <VL53L0X_WriteMulti>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80059f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005a0a:	2306      	movs	r3, #6
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	21b0      	movs	r1, #176	; 0xb0
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f002 fe39 	bl	8008688 <VL53L0X_ReadMulti>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b08c      	sub	sp, #48	; 0x30
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	460b      	mov	r3, r1
 8005a34:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3e:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005a44:	2300      	movs	r3, #0
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a48:	e02b      	b.n	8005aa2 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005a4a:	f107 031c 	add.w	r3, r7, #28
 8005a4e:	6a3a      	ldr	r2, [r7, #32]
 8005a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ff12 	bl	800587c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d103      	bne.n	8005a68 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005a60:	23ce      	movs	r3, #206	; 0xce
 8005a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005a66:	e020      	b.n	8005aaa <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	4413      	add	r3, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff61 	bl	8005938 <is_aperture>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005a80:	23ce      	movs	r3, #206	; 0xce
 8005a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005a86:	e010      	b.n	8005aaa <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f7ff ff6b 	bl	800596c <enable_spad_bit>
		currentSpad++;
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3cf      	bcc.n	8005a4a <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005ab0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff ff8d 	bl	80059da <set_ref_spad_map>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005ac6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d121      	bne.n	8005b12 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005ace:	f107 0314 	add.w	r3, r7, #20
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff93 	bl	8005a00 <get_ref_spad_map>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005ae4:	e011      	b.n	8005b0a <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	4413      	add	r3, r2
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	f107 0114 	add.w	r1, r7, #20
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	440b      	add	r3, r1
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d003      	beq.n	8005b04 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005afc:	23ce      	movs	r3, #206	; 0xce
 8005afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005b02:	e006      	b.n	8005b12 <enable_ref_spads+0xec>
			}
			i++;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d3e9      	bcc.n	8005ae6 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005b12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3730      	adds	r7, #48	; 0x30
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b08a      	sub	sp, #40	; 0x28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005b46:	22c0      	movs	r2, #192	; 0xc0
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f002 fdc8 	bl	80086e0 <VL53L0X_WrByte>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005b56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d108      	bne.n	8005b70 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fc4b 	bl	8005400 <VL53L0X_PerformSingleRangingMeasurement>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005b70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d107      	bne.n	8005b88 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b78:	2201      	movs	r2, #1
 8005b7a:	21ff      	movs	r1, #255	; 0xff
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f002 fdaf 	bl	80086e0 <VL53L0X_WrByte>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d107      	bne.n	8005ba0 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	21b6      	movs	r1, #182	; 0xb6
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f002 fe4f 	bl	8008838 <VL53L0X_RdWord>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ba8:	2200      	movs	r2, #0
 8005baa:	21ff      	movs	r1, #255	; 0xff
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f002 fd97 	bl	80086e0 <VL53L0X_WrByte>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d112      	bne.n	8005be6 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 fd89 	bl	80086e0 <VL53L0X_WrByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005be2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8005be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3728      	adds	r7, #40	; 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b09d      	sub	sp, #116	; 0x74
 8005bf6:	af06      	add	r7, sp, #24
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005c04:	23b4      	movs	r3, #180	; 0xb4
 8005c06:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8005c0e:	232c      	movs	r3, #44	; 0x2c
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005c1e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005c22:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8005c2c:	2306      	movs	r3, #6
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005c56:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5c:	e009      	b.n	8005c72 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6e:	3301      	adds	r3, #1
 8005c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3f1      	bcc.n	8005c5e <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	21ff      	movs	r1, #255	; 0xff
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f002 fd2e 	bl	80086e0 <VL53L0X_WrByte>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005c8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d107      	bne.n	8005ca2 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005c92:	2200      	movs	r2, #0
 8005c94:	214f      	movs	r1, #79	; 0x4f
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f002 fd22 	bl	80086e0 <VL53L0X_WrByte>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005ca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005caa:	222c      	movs	r2, #44	; 0x2c
 8005cac:	214e      	movs	r1, #78	; 0x4e
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f002 fd16 	bl	80086e0 <VL53L0X_WrByte>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005cba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	21ff      	movs	r1, #255	; 0xff
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f002 fd0a 	bl	80086e0 <VL53L0X_WrByte>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005cda:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005cde:	461a      	mov	r2, r3
 8005ce0:	21b6      	movs	r1, #182	; 0xb6
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f002 fcfc 	bl	80086e0 <VL53L0X_WrByte>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005cee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d107      	bne.n	8005d06 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2180      	movs	r1, #128	; 0x80
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f002 fcf0 	bl	80086e0 <VL53L0X_WrByte>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8005d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005d0e:	f107 0210 	add.w	r2, r7, #16
 8005d12:	f107 0111 	add.w	r1, r7, #17
 8005d16:	2300      	movs	r3, #0
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fbbb 	bl	8006494 <VL53L0X_perform_ref_calibration>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d121      	bne.n	8005d70 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8005d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d32:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8005d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8005d48:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005d4c:	f107 0218 	add.w	r2, r7, #24
 8005d50:	9204      	str	r2, [sp, #16]
 8005d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d54:	9203      	str	r2, [sp, #12]
 8005d56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d58:	9202      	str	r2, [sp, #8]
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4623      	mov	r3, r4
 8005d62:	4602      	mov	r2, r0
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff fe5e 	bl	8005a26 <enable_ref_spads>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d174      	bne.n	8005e62 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005d7c:	f107 0312 	add.w	r3, r7, #18
 8005d80:	4619      	mov	r1, r3
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff fecb 	bl	8005b1e <perform_ref_signal_measurement>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005d8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d161      	bne.n	8005e5a <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005d96:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005d98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d25d      	bcs.n	8005e5a <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da2:	e009      	b.n	8005db8 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db4:	3301      	adds	r3, #1
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d3f1      	bcc.n	8005da4 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005dc0:	e002      	b.n	8005dc8 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005dc8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	4413      	add	r3, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fdb1 	bl	8005938 <is_aperture>
 8005dd6:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <VL53L0X_perform_ref_spad_management+0x1f2>
 8005ddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3ee      	bcc.n	8005dc2 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005de4:	2301      	movs	r3, #1
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8005de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dea:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8005df8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005dfc:	f107 0218 	add.w	r2, r7, #24
 8005e00:	9204      	str	r2, [sp, #16]
 8005e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e04:	9203      	str	r2, [sp, #12]
 8005e06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e08:	9202      	str	r2, [sp, #8]
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	4623      	mov	r3, r4
 8005e12:	4602      	mov	r2, r0
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fe06 	bl	8005a26 <enable_ref_spads>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005e20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11b      	bne.n	8005e60 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005e2c:	f107 0312 	add.w	r3, r7, #18
 8005e30:	4619      	mov	r1, r3
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fe73 	bl	8005b1e <perform_ref_signal_measurement>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005e3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10c      	bne.n	8005e60 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005e46:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005e48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d208      	bcs.n	8005e60 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005e58:	e002      	b.n	8005e60 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e5e:	e000      	b.n	8005e62 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005e60:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005e62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 80af 	bne.w	8005fca <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005e6c:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005e6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f240 80aa 	bls.w	8005fca <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005e86:	f107 031c 	add.w	r3, r7, #28
 8005e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f003 f8d5 	bl	800903c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005e92:	8a7b      	ldrh	r3, [r7, #18]
 8005e94:	461a      	mov	r2, r3
 8005e96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bfb8      	it	lt
 8005e9e:	425b      	neglt	r3, r3
 8005ea0:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005ea8:	e086      	b.n	8005fb8 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eb8:	f7ff fce0 	bl	800587c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d103      	bne.n	8005ecc <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005ec4:	23ce      	movs	r3, #206	; 0xce
 8005ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005eca:	e07e      	b.n	8005fca <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005ecc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fd2f 	bl	8005938 <is_aperture>
 8005eda:	4603      	mov	r3, r0
 8005edc:	461a      	mov	r2, r3
 8005ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005eea:	e06e      	b.n	8005fca <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eee:	3301      	adds	r3, #1
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8005efc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fd33 	bl	800596c <enable_spad_bit>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005f0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10c      	bne.n	8005f2e <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f16:	3301      	adds	r3, #1
 8005f18:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8005f20:	4619      	mov	r1, r3
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fd59 	bl	80059da <set_ref_spad_map>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005f2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d146      	bne.n	8005fc4 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005f36:	f107 0312 	add.w	r3, r7, #18
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff fdee 	bl	8005b1e <perform_ref_signal_measurement>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005f48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d13b      	bne.n	8005fc8 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005f50:	8a7b      	ldrh	r3, [r7, #18]
 8005f52:	461a      	mov	r2, r3
 8005f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bfb8      	it	lt
 8005f5c:	425b      	neglt	r3, r3
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005f60:	8a7b      	ldrh	r3, [r7, #18]
 8005f62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d21c      	bcs.n	8005fa2 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d914      	bls.n	8005f9a <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005f70:	f107 031c 	add.w	r3, r7, #28
 8005f74:	4619      	mov	r1, r3
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fd2f 	bl	80059da <set_ref_spad_map>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005f88:	f107 011c 	add.w	r1, r7, #28
 8005f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f003 f854 	bl	800903c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f96:	3b01      	subs	r3, #1
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa0:	e00a      	b.n	8005fb8 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005fac:	f107 031c 	add.w	r3, r7, #28
 8005fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f003 f842 	bl	800903c <memcpy>
		while (!complete) {
 8005fb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f43f af74 	beq.w	8005eaa <VL53L0X_perform_ref_spad_management+0x2b8>
 8005fc2:	e002      	b.n	8005fca <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005fc8:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d115      	bne.n	8005ffe <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd6:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005fde:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005ffe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006002:	4618      	mov	r0, r3
 8006004:	375c      	adds	r7, #92	; 0x5c
 8006006:	46bd      	mov	sp, r7
 8006008:	bd90      	pop	{r4, r7, pc}

0800600a <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800600a:	b590      	push	{r4, r7, lr}
 800600c:	b093      	sub	sp, #76	; 0x4c
 800600e:	af06      	add	r7, sp, #24
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	4613      	mov	r3, r2
 8006016:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006018:	2300      	movs	r3, #0
 800601a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006022:	23b4      	movs	r3, #180	; 0xb4
 8006024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006028:	2306      	movs	r3, #6
 800602a:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800602c:	232c      	movs	r3, #44	; 0x2c
 800602e:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006030:	2201      	movs	r2, #1
 8006032:	21ff      	movs	r1, #255	; 0xff
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f002 fb53 	bl	80086e0 <VL53L0X_WrByte>
 800603a:	4603      	mov	r3, r0
 800603c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006040:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006044:	2b00      	cmp	r3, #0
 8006046:	d107      	bne.n	8006058 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006048:	2200      	movs	r2, #0
 800604a:	214f      	movs	r1, #79	; 0x4f
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f002 fb47 	bl	80086e0 <VL53L0X_WrByte>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800605c:	2b00      	cmp	r3, #0
 800605e:	d107      	bne.n	8006070 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006060:	222c      	movs	r2, #44	; 0x2c
 8006062:	214e      	movs	r1, #78	; 0x4e
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f002 fb3b 	bl	80086e0 <VL53L0X_WrByte>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006070:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006078:	2200      	movs	r2, #0
 800607a:	21ff      	movs	r1, #255	; 0xff
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f002 fb2f 	bl	80086e0 <VL53L0X_WrByte>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006088:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006094:	461a      	mov	r2, r3
 8006096:	21b6      	movs	r1, #182	; 0xb6
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f002 fb21 	bl	80086e0 <VL53L0X_WrByte>
 800609e:	4603      	mov	r3, r0
 80060a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
 80060a8:	e009      	b.n	80060be <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	3301      	adds	r3, #1
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d3f1      	bcc.n	80060aa <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d011      	beq.n	80060f0 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80060cc:	e002      	b.n	80060d4 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	3301      	adds	r3, #1
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80060d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	4413      	add	r3, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fc2b 	bl	8005938 <is_aperture>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <VL53L0X_set_reference_spads+0xe6>
 80060e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d3ee      	bcc.n	80060ce <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80060fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006100:	79f9      	ldrb	r1, [r7, #7]
 8006102:	f107 0214 	add.w	r2, r7, #20
 8006106:	9204      	str	r2, [sp, #16]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	9203      	str	r2, [sp, #12]
 800610c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610e:	9202      	str	r2, [sp, #8]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4623      	mov	r3, r4
 8006118:	4602      	mov	r2, r0
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff fc83 	bl	8005a26 <enable_ref_spads>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006126:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	79fa      	ldrb	r2, [r7, #7]
 8006144:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006148:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800614c:	4618      	mov	r0, r3
 800614e:	3734      	adds	r7, #52	; 0x34
 8006150:	46bd      	mov	sp, r7
 8006152:	bd90      	pop	{r4, r7, pc}

08006154 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	2100      	movs	r1, #0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f002 fab1 	bl	80086e0 <VL53L0X_WrByte>
 800617e:	4603      	mov	r3, r0
 8006180:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9bf 	bl	800650e <VL53L0X_measurement_poll_for_completion>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fab6 	bl	8005710 <VL53L0X_ClearInterruptMask>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80061a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80061b0:	2200      	movs	r2, #0
 80061b2:	2100      	movs	r1, #0
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 fa93 	bl	80086e0 <VL53L0X_WrByte>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]

	return Status;
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	461a      	mov	r2, r3
 80061d8:	4603      	mov	r3, r0
 80061da:	70fb      	strb	r3, [r7, #3]
 80061dc:	460b      	mov	r3, r1
 80061de:	70bb      	strb	r3, [r7, #2]
 80061e0:	4613      	mov	r3, r2
 80061e2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061ec:	2201      	movs	r2, #1
 80061ee:	21ff      	movs	r1, #255	; 0xff
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f002 fa75 	bl	80086e0 <VL53L0X_WrByte>
 80061f6:	4603      	mov	r3, r0
 80061f8:	461a      	mov	r2, r3
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006200:	2200      	movs	r2, #0
 8006202:	2100      	movs	r1, #0
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 fa6b 	bl	80086e0 <VL53L0X_WrByte>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	4313      	orrs	r3, r2
 8006212:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006214:	2200      	movs	r2, #0
 8006216:	21ff      	movs	r1, #255	; 0xff
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f002 fa61 	bl	80086e0 <VL53L0X_WrByte>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	4313      	orrs	r3, r2
 8006226:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01e      	beq.n	800626c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800622e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	21cb      	movs	r1, #203	; 0xcb
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f002 fad2 	bl	80087e4 <VL53L0X_RdByte>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	4313      	orrs	r3, r2
 8006248:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800624a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02a      	beq.n	80062a8 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006252:	f107 030e 	add.w	r3, r7, #14
 8006256:	461a      	mov	r2, r3
 8006258:	21ee      	movs	r1, #238	; 0xee
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f002 fac2 	bl	80087e4 <VL53L0X_RdByte>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	4313      	orrs	r3, r2
 8006268:	73fb      	strb	r3, [r7, #15]
 800626a:	e01d      	b.n	80062a8 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800626c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006274:	78bb      	ldrb	r3, [r7, #2]
 8006276:	461a      	mov	r2, r3
 8006278:	21cb      	movs	r1, #203	; 0xcb
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f002 fa30 	bl	80086e0 <VL53L0X_WrByte>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	4313      	orrs	r3, r2
 8006288:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800628a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006292:	787b      	ldrb	r3, [r7, #1]
 8006294:	2280      	movs	r2, #128	; 0x80
 8006296:	21ee      	movs	r1, #238	; 0xee
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 fa6f 	bl	800877c <VL53L0X_UpdateByte>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062a8:	2201      	movs	r2, #1
 80062aa:	21ff      	movs	r1, #255	; 0xff
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f002 fa17 	bl	80086e0 <VL53L0X_WrByte>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80062bc:	2201      	movs	r2, #1
 80062be:	2100      	movs	r1, #0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f002 fa0d 	bl	80086e0 <VL53L0X_WrByte>
 80062c6:	4603      	mov	r3, r0
 80062c8:	461a      	mov	r2, r3
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80062d0:	2200      	movs	r2, #0
 80062d2:	21ff      	movs	r1, #255	; 0xff
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f002 fa03 	bl	80086e0 <VL53L0X_WrByte>
 80062da:	4603      	mov	r3, r0
 80062dc:	461a      	mov	r2, r3
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	f023 0310 	bic.w	r3, r3, #16
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	701a      	strb	r2, [r3, #0]

	return Status;
 80062f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af04      	add	r7, sp, #16
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	460b      	mov	r3, r1
 800630c:	71fb      	strb	r3, [r7, #7]
 800630e:	4613      	mov	r3, r2
 8006310:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006326:	79bb      	ldrb	r3, [r7, #6]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006332:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006334:	2201      	movs	r2, #1
 8006336:	2101      	movs	r1, #1
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f002 f9d1 	bl	80086e0 <VL53L0X_WrByte>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800634a:	2140      	movs	r1, #64	; 0x40
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff ff01 	bl	8006154 <VL53L0X_perform_single_ref_calibration>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d115      	bne.n	800638a <VL53L0X_perform_vhv_calibration+0x8e>
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d112      	bne.n	800638a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006364:	7d39      	ldrb	r1, [r7, #20]
 8006366:	7d7a      	ldrb	r2, [r7, #21]
 8006368:	2300      	movs	r3, #0
 800636a:	9303      	str	r3, [sp, #12]
 800636c:	2301      	movs	r3, #1
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	f107 0313 	add.w	r3, r7, #19
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	460b      	mov	r3, r1
 800637c:	2101      	movs	r1, #1
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff ff23 	bl	80061ca <VL53L0X_ref_calibration_io>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]
 8006388:	e002      	b.n	8006390 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d112      	bne.n	80063be <VL53L0X_perform_vhv_calibration+0xc2>
 8006398:	79bb      	ldrb	r3, [r7, #6]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800639e:	7dbb      	ldrb	r3, [r7, #22]
 80063a0:	461a      	mov	r2, r3
 80063a2:	2101      	movs	r1, #1
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f002 f99b 	bl	80086e0 <VL53L0X_WrByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80063ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	7dba      	ldrb	r2, [r7, #22]
 80063ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80063be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b08a      	sub	sp, #40	; 0x28
 80063ce:	af04      	add	r7, sp, #16
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4611      	mov	r1, r2
 80063d6:	461a      	mov	r2, r3
 80063d8:	460b      	mov	r3, r1
 80063da:	71fb      	strb	r3, [r7, #7]
 80063dc:	4613      	mov	r3, r2
 80063de:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80063f0:	79bb      	ldrb	r3, [r7, #6]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80063fc:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80063fe:	2202      	movs	r2, #2
 8006400:	2101      	movs	r1, #1
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f002 f96c 	bl	80086e0 <VL53L0X_WrByte>
 8006408:	4603      	mov	r3, r0
 800640a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800640c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fe9c 	bl	8006154 <VL53L0X_perform_single_ref_calibration>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d115      	bne.n	8006454 <VL53L0X_perform_phase_calibration+0x8a>
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d112      	bne.n	8006454 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800642e:	7d39      	ldrb	r1, [r7, #20]
 8006430:	7d7a      	ldrb	r2, [r7, #21]
 8006432:	2301      	movs	r3, #1
 8006434:	9303      	str	r3, [sp, #12]
 8006436:	2300      	movs	r3, #0
 8006438:	9302      	str	r3, [sp, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	f107 0313 	add.w	r3, r7, #19
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	460b      	mov	r3, r1
 8006446:	2101      	movs	r1, #1
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff febe 	bl	80061ca <VL53L0X_ref_calibration_io>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]
 8006452:	e002      	b.n	800645a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800645a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d112      	bne.n	8006488 <VL53L0X_perform_phase_calibration+0xbe>
 8006462:	79bb      	ldrb	r3, [r7, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00f      	beq.n	8006488 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006468:	7dbb      	ldrb	r3, [r7, #22]
 800646a:	461a      	mov	r2, r3
 800646c:	2101      	movs	r1, #1
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f002 f936 	bl	80086e0 <VL53L0X_WrByte>
 8006474:	4603      	mov	r3, r0
 8006476:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	7dba      	ldrb	r2, [r7, #22]
 8006484:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006488:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80064b0:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	2300      	movs	r3, #0
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7ff ff1f 	bl	80062fc <VL53L0X_perform_vhv_calibration>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80064c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	2300      	movs	r3, #0
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff ff7a 	bl	80063ca <VL53L0X_perform_phase_calibration>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80064da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10f      	bne.n	8006502 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80064e2:	7dbb      	ldrb	r3, [r7, #22]
 80064e4:	461a      	mov	r2, r3
 80064e6:	2101      	movs	r1, #1
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f002 f8f9 	bl	80086e0 <VL53L0X_WrByte>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80064f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	7dba      	ldrb	r2, [r7, #22]
 80064fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006522:	f107 030f 	add.w	r3, r7, #15
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fe fe05 	bl	8005138 <VL53L0X_GetMeasurementDataReady>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d110      	bne.n	800655c <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d00f      	beq.n	8006560 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3301      	adds	r3, #1
 8006544:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800654c:	d302      	bcc.n	8006554 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800654e:	23f9      	movs	r3, #249	; 0xf9
 8006550:	75fb      	strb	r3, [r7, #23]
			break;
 8006552:	e006      	b.n	8006562 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f002 f9e3 	bl	8008920 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800655a:	e7e2      	b.n	8006522 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800655c:	bf00      	nop
 800655e:	e000      	b.n	8006562 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006560:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	4603      	mov	r3, r0
 8006576:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	3301      	adds	r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr

08006592 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800659e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065a2:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80065a4:	e002      	b.n	80065ac <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	089b      	lsrs	r3, r3, #2
 80065aa:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d8f8      	bhi.n	80065a6 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80065b4:	e017      	b.n	80065e6 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4413      	add	r3, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d30b      	bcc.n	80065da <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4413      	add	r3, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4413      	add	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e002      	b.n	80065e0 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e4      	bne.n	80065b6 <VL53L0X_isqrt+0x24>
	}

	return res;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr

080065f8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006600:	2300      	movs	r3, #0
 8006602:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006604:	2200      	movs	r2, #0
 8006606:	2183      	movs	r1, #131	; 0x83
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 f869 	bl	80086e0 <VL53L0X_WrByte>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	7dfb      	ldrb	r3, [r7, #23]
 8006614:	4313      	orrs	r3, r2
 8006616:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11e      	bne.n	800665e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006624:	f107 030f 	add.w	r3, r7, #15
 8006628:	461a      	mov	r2, r3
 800662a:	2183      	movs	r1, #131	; 0x83
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f002 f8d9 	bl	80087e4 <VL53L0X_RdByte>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <VL53L0X_device_read_strobe+0x5a>
 800663c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	3301      	adds	r3, #1
 8006648:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006650:	d3e8      	bcc.n	8006624 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006658:	d301      	bcc.n	800665e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800665a:	23f9      	movs	r3, #249	; 0xf9
 800665c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800665e:	2201      	movs	r2, #1
 8006660:	2183      	movs	r1, #131	; 0x83
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f002 f83c 	bl	80086e0 <VL53L0X_WrByte>
 8006668:	4603      	mov	r3, r0
 800666a:	461a      	mov	r2, r3
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	4313      	orrs	r3, r2
 8006670:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006672:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b098      	sub	sp, #96	; 0x60
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800668a:	2300      	movs	r3, #0
 800668c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80066ae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80066b2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80066c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80066ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066ce:	2b07      	cmp	r3, #7
 80066d0:	f000 8408 	beq.w	8006ee4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80066d4:	2201      	movs	r2, #1
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f002 f801 	bl	80086e0 <VL53L0X_WrByte>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066ec:	2201      	movs	r2, #1
 80066ee:	21ff      	movs	r1, #255	; 0xff
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fff5 	bl	80086e0 <VL53L0X_WrByte>
 80066f6:	4603      	mov	r3, r0
 80066f8:	461a      	mov	r2, r3
 80066fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066fe:	4313      	orrs	r3, r2
 8006700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006704:	2200      	movs	r2, #0
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 ffe9 	bl	80086e0 <VL53L0X_WrByte>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006716:	4313      	orrs	r3, r2
 8006718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800671c:	2206      	movs	r2, #6
 800671e:	21ff      	movs	r1, #255	; 0xff
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 ffdd 	bl	80086e0 <VL53L0X_WrByte>
 8006726:	4603      	mov	r3, r0
 8006728:	461a      	mov	r2, r3
 800672a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800672e:	4313      	orrs	r3, r2
 8006730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006734:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006738:	461a      	mov	r2, r3
 800673a:	2183      	movs	r1, #131	; 0x83
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 f851 	bl	80087e4 <VL53L0X_RdByte>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800674a:	4313      	orrs	r3, r2
 800674c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006754:	f043 0304 	orr.w	r3, r3, #4
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	2183      	movs	r1, #131	; 0x83
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 ffbe 	bl	80086e0 <VL53L0X_WrByte>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800676c:	4313      	orrs	r3, r2
 800676e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006772:	2207      	movs	r2, #7
 8006774:	21ff      	movs	r1, #255	; 0xff
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 ffb2 	bl	80086e0 <VL53L0X_WrByte>
 800677c:	4603      	mov	r3, r0
 800677e:	461a      	mov	r2, r3
 8006780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006784:	4313      	orrs	r3, r2
 8006786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800678a:	2201      	movs	r2, #1
 800678c:	2181      	movs	r1, #129	; 0x81
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 ffa6 	bl	80086e0 <VL53L0X_WrByte>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800679c:	4313      	orrs	r3, r2
 800679e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f002 f8bc 	bl	8008920 <VL53L0X_PollingDelay>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80067b6:	2201      	movs	r2, #1
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 ff90 	bl	80086e0 <VL53L0X_WrByte>
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8098 	beq.w	800690a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80067da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067de:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 8091 	bne.w	800690a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80067e8:	226b      	movs	r2, #107	; 0x6b
 80067ea:	2194      	movs	r1, #148	; 0x94
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 ff77 	bl	80086e0 <VL53L0X_WrByte>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff fef9 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800680e:	4313      	orrs	r3, r2
 8006810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006818:	461a      	mov	r2, r3
 800681a:	2190      	movs	r1, #144	; 0x90
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 f843 	bl	80088a8 <VL53L0X_RdDWord>
 8006822:	4603      	mov	r3, r0
 8006824:	461a      	mov	r2, r3
 8006826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800682a:	4313      	orrs	r3, r2
 800682c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	b2db      	uxtb	r3, r3
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	0bdb      	lsrs	r3, r3, #15
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800684c:	2224      	movs	r2, #36	; 0x24
 800684e:	2194      	movs	r1, #148	; 0x94
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 ff45 	bl	80086e0 <VL53L0X_WrByte>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800685e:	4313      	orrs	r3, r2
 8006860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fec7 	bl	80065f8 <VL53L0X_device_read_strobe>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006872:	4313      	orrs	r3, r2
 8006874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800687c:	461a      	mov	r2, r3
 800687e:	2190      	movs	r1, #144	; 0x90
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f002 f811 	bl	80088a8 <VL53L0X_RdDWord>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800688e:	4313      	orrs	r3, r2
 8006890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	0e1b      	lsrs	r3, r3, #24
 8006898:	b2db      	uxtb	r3, r3
 800689a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80068b2:	2225      	movs	r2, #37	; 0x25
 80068b4:	2194      	movs	r1, #148	; 0x94
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 ff12 	bl	80086e0 <VL53L0X_WrByte>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fe94 	bl	80065f8 <VL53L0X_device_read_strobe>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068d8:	4313      	orrs	r3, r2
 80068da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068e2:	461a      	mov	r2, r3
 80068e4:	2190      	movs	r1, #144	; 0x90
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 ffde 	bl	80088a8 <VL53L0X_RdDWord>
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	0e1b      	lsrs	r3, r3, #24
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	b2db      	uxtb	r3, r3
 8006908:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8189 	beq.w	8006c28 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800691a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 8182 	bne.w	8006c28 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006924:	2202      	movs	r2, #2
 8006926:	2194      	movs	r1, #148	; 0x94
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fed9 	bl	80086e0 <VL53L0X_WrByte>
 800692e:	4603      	mov	r3, r0
 8006930:	461a      	mov	r2, r3
 8006932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006936:	4313      	orrs	r3, r2
 8006938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fe5b 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006942:	4603      	mov	r3, r0
 8006944:	461a      	mov	r2, r3
 8006946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800694a:	4313      	orrs	r3, r2
 800694c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006950:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006954:	461a      	mov	r2, r3
 8006956:	2190      	movs	r1, #144	; 0x90
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 ff43 	bl	80087e4 <VL53L0X_RdByte>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006966:	4313      	orrs	r3, r2
 8006968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800696c:	227b      	movs	r2, #123	; 0x7b
 800696e:	2194      	movs	r1, #148	; 0x94
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 feb5 	bl	80086e0 <VL53L0X_WrByte>
 8006976:	4603      	mov	r3, r0
 8006978:	461a      	mov	r2, r3
 800697a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800697e:	4313      	orrs	r3, r2
 8006980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fe37 	bl	80065f8 <VL53L0X_device_read_strobe>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006992:	4313      	orrs	r3, r2
 8006994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006998:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800699c:	461a      	mov	r2, r3
 800699e:	2190      	movs	r1, #144	; 0x90
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 ff1f 	bl	80087e4 <VL53L0X_RdByte>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80069b4:	2277      	movs	r2, #119	; 0x77
 80069b6:	2194      	movs	r1, #148	; 0x94
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fe91 	bl	80086e0 <VL53L0X_WrByte>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff fe13 	bl	80065f8 <VL53L0X_device_read_strobe>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069da:	4313      	orrs	r3, r2
 80069dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069e4:	461a      	mov	r2, r3
 80069e6:	2190      	movs	r1, #144	; 0x90
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 ff5d 	bl	80088a8 <VL53L0X_RdDWord>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	0e5b      	lsrs	r3, r3, #25
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	0c9b      	lsrs	r3, r3, #18
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	0adb      	lsrs	r3, r3, #11
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006a46:	2278      	movs	r2, #120	; 0x78
 8006a48:	2194      	movs	r1, #148	; 0x94
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fe48 	bl	80086e0 <VL53L0X_WrByte>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fdca 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a76:	461a      	mov	r2, r3
 8006a78:	2190      	movs	r1, #144	; 0x90
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 ff14 	bl	80088a8 <VL53L0X_RdDWord>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	0f5b      	lsrs	r3, r3, #29
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a98:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a9e:	4413      	add	r3, r2
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	0d9b      	lsrs	r3, r3, #22
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	0bdb      	lsrs	r3, r3, #15
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	019b      	lsls	r3, r3, #6
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006aee:	2279      	movs	r2, #121	; 0x79
 8006af0:	2194      	movs	r1, #148	; 0x94
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fdf4 	bl	80086e0 <VL53L0X_WrByte>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fd76 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b1e:	461a      	mov	r2, r3
 8006b20:	2190      	movs	r1, #144	; 0x90
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fec0 	bl	80088a8 <VL53L0X_RdDWord>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	0e9b      	lsrs	r3, r3, #26
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b40:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006b42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b46:	4413      	add	r3, r2
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	0cdb      	lsrs	r3, r3, #19
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	0b1b      	lsrs	r3, r3, #12
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006b88:	227a      	movs	r2, #122	; 0x7a
 8006b8a:	2194      	movs	r1, #148	; 0x94
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fda7 	bl	80086e0 <VL53L0X_WrByte>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fd29 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2190      	movs	r1, #144	; 0x90
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 fe73 	bl	80088a8 <VL53L0X_RdDWord>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	0f9b      	lsrs	r3, r3, #30
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bda:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006be0:	4413      	add	r3, r2
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	0ddb      	lsrs	r3, r3, #23
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	0a5b      	lsrs	r3, r3, #9
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80f1 	beq.w	8006e16 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006c34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c38:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 80ea 	bne.w	8006e16 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006c42:	227b      	movs	r2, #123	; 0x7b
 8006c44:	2194      	movs	r1, #148	; 0x94
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fd4a 	bl	80086e0 <VL53L0X_WrByte>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff fccc 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c72:	461a      	mov	r2, r3
 8006c74:	2190      	movs	r1, #144	; 0x90
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fe16 	bl	80088a8 <VL53L0X_RdDWord>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006c8a:	227c      	movs	r2, #124	; 0x7c
 8006c8c:	2194      	movs	r1, #148	; 0x94
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fd26 	bl	80086e0 <VL53L0X_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fca8 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2190      	movs	r1, #144	; 0x90
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fdf2 	bl	80088a8 <VL53L0X_RdDWord>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006cd2:	2273      	movs	r2, #115	; 0x73
 8006cd4:	2194      	movs	r1, #148	; 0x94
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fd02 	bl	80086e0 <VL53L0X_WrByte>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fc84 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d02:	461a      	mov	r2, r3
 8006d04:	2190      	movs	r1, #144	; 0x90
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fdce 	bl	80088a8 <VL53L0X_RdDWord>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006d22:	2274      	movs	r2, #116	; 0x74
 8006d24:	2194      	movs	r1, #148	; 0x94
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fcda 	bl	80086e0 <VL53L0X_WrByte>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fc5c 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d52:	461a      	mov	r2, r3
 8006d54:	2190      	movs	r1, #144	; 0x90
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fda6 	bl	80088a8 <VL53L0X_RdDWord>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d70:	4313      	orrs	r3, r2
 8006d72:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006d74:	2275      	movs	r2, #117	; 0x75
 8006d76:	2194      	movs	r1, #148	; 0x94
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fcb1 	bl	80086e0 <VL53L0X_WrByte>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	461a      	mov	r2, r3
 8006d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fc33 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006d92:	4603      	mov	r3, r0
 8006d94:	461a      	mov	r2, r3
 8006d96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006da4:	461a      	mov	r2, r3
 8006da6:	2190      	movs	r1, #144	; 0x90
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fd7d 	bl	80088a8 <VL53L0X_RdDWord>
 8006dae:	4603      	mov	r3, r0
 8006db0:	461a      	mov	r2, r3
 8006db2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006dc4:	2276      	movs	r2, #118	; 0x76
 8006dc6:	2194      	movs	r1, #148	; 0x94
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fc89 	bl	80086e0 <VL53L0X_WrByte>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff fc0b 	bl	80065f8 <VL53L0X_device_read_strobe>
 8006de2:	4603      	mov	r3, r0
 8006de4:	461a      	mov	r2, r3
 8006de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006df4:	461a      	mov	r2, r3
 8006df6:	2190      	movs	r1, #144	; 0x90
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fd55 	bl	80088a8 <VL53L0X_RdDWord>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e12:	4313      	orrs	r3, r2
 8006e14:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2181      	movs	r1, #129	; 0x81
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fc60 	bl	80086e0 <VL53L0X_WrByte>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006e2e:	2206      	movs	r2, #6
 8006e30:	21ff      	movs	r1, #255	; 0xff
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fc54 	bl	80086e0 <VL53L0X_WrByte>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006e46:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	2183      	movs	r1, #131	; 0x83
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fcc8 	bl	80087e4 <VL53L0X_RdByte>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006e62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e66:	f023 0304 	bic.w	r3, r3, #4
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2183      	movs	r1, #131	; 0x83
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fc35 	bl	80086e0 <VL53L0X_WrByte>
 8006e76:	4603      	mov	r3, r0
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e84:	2201      	movs	r2, #1
 8006e86:	21ff      	movs	r1, #255	; 0xff
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fc29 	bl	80086e0 <VL53L0X_WrByte>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fc1d 	bl	80086e0 <VL53L0X_WrByte>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	21ff      	movs	r1, #255	; 0xff
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fc11 	bl	80086e0 <VL53L0X_WrByte>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2180      	movs	r1, #128	; 0x80
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fc05 	bl	80086e0 <VL53L0X_WrByte>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006ee4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 808f 	bne.w	800700c <VL53L0X_get_info_from_device+0x98e>
 8006eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ef2:	2b07      	cmp	r3, #7
 8006ef4:	f000 808a 	beq.w	800700c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d024      	beq.n	8006f4c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f06:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d11e      	bne.n	8006f4c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006f14:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006f1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006f22:	2300      	movs	r3, #0
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f26:	e00e      	b.n	8006f46 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006f28:	f107 0208 	add.w	r2, r7, #8
 8006f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2e:	4413      	add	r3, r2
 8006f30:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006f3c:	460a      	mov	r2, r1
 8006f3e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f42:	3301      	adds	r3, #1
 8006f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	dded      	ble.n	8006f28 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d018      	beq.n	8006f88 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006f56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f5a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d112      	bne.n	8006f88 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f6c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	33f3      	adds	r3, #243	; 0xf3
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006f7c:	f107 0310 	add.w	r3, r7, #16
 8006f80:	4619      	mov	r1, r3
 8006f82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f84:	f002 f852 	bl	800902c <strcpy>

		}

		if (((option & 4) == 4) &&
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d030      	beq.n	8006ff4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006f92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f96:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d12a      	bne.n	8006ff4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb0:	025b      	lsls	r3, r3, #9
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d011      	beq.n	8006fec <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
 8006fda:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006fdc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006fe0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006fec:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006ff4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007002:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800700c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007010:	4618      	mov	r0, r3
 8007012:	3760      	adds	r7, #96	; 0x60
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007024:	f240 6277 	movw	r2, #1655	; 0x677
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007030:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007034:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	fb02 f303 	mul.w	r3, r2, r3
 8007044:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007046:	68bb      	ldr	r3, [r7, #8]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr

08007052 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007052:	b480      	push	{r7}
 8007054:	b087      	sub	sp, #28
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d017      	beq.n	800709c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3b01      	subs	r3, #1
 8007070:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007072:	e005      	b.n	8007080 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800707a:	89fb      	ldrh	r3, [r7, #14]
 800707c:	3301      	adds	r3, #1
 800707e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f4      	bne.n	8007074 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800708a:	89fb      	ldrh	r3, [r7, #14]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	b29b      	uxth	r3, r3
 8007094:	b2db      	uxtb	r3, r3
 8007096:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007098:	4413      	add	r3, r2
 800709a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800709c:	8afb      	ldrh	r3, [r7, #22]

}
 800709e:	4618      	mov	r0, r3
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	0a12      	lsrs	r2, r2, #8
 80070be:	b292      	uxth	r2, r2
 80070c0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr
	...

080070d4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	4619      	mov	r1, r3
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff ff94 	bl	8007018 <VL53L0X_calc_macro_period_ps>
 80070f0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80070f8:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <VL53L0X_calc_timeout_mclks+0x50>)
 80070fa:	fba2 2303 	umull	r2, r3, r2, r3
 80070fe:	099b      	lsrs	r3, r3, #6
 8007100:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007108:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	441a      	add	r2, r3
	timeout_period_mclks =
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800711a:	69fb      	ldr	r3, [r7, #28]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	10624dd3 	.word	0x10624dd3

08007128 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
 8007134:	4613      	mov	r3, r2
 8007136:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800713c:	787b      	ldrb	r3, [r7, #1]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff69 	bl	8007018 <VL53L0X_calc_macro_period_ps>
 8007146:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800714e:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <VL53L0X_calc_timeout_us+0x50>)
 8007150:	fba2 2303 	umull	r2, r3, r2, r3
 8007154:	099b      	lsrs	r3, r3, #6
 8007156:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007158:	887b      	ldrh	r3, [r7, #2]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	fb02 f303 	mul.w	r3, r2, r3
 8007160:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <VL53L0X_calc_timeout_us+0x50>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800716e:	697b      	ldr	r3, [r7, #20]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	10624dd3 	.word	0x10624dd3

0800717c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08c      	sub	sp, #48	; 0x30
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	460b      	mov	r3, r1
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800718a:	2300      	movs	r3, #0
 800718c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <get_sequence_step_timeout+0x38>
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d002      	beq.n	80071b4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80071ae:	7afb      	ldrb	r3, [r7, #11]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d128      	bne.n	8007206 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80071b8:	461a      	mov	r2, r3
 80071ba:	2100      	movs	r1, #0
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7fd fa9c 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80071c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80071d0:	f107 0320 	add.w	r3, r7, #32
 80071d4:	461a      	mov	r2, r3
 80071d6:	2146      	movs	r1, #70	; 0x46
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 fb03 	bl	80087e4 <VL53L0X_RdByte>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80071e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff ff5c 	bl	80070a8 <VL53L0X_decode_timeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80071f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80071f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff ff93 	bl	8007128 <VL53L0X_calc_timeout_us>
 8007202:	62b8      	str	r0, [r7, #40]	; 0x28
 8007204:	e092      	b.n	800732c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007206:	7afb      	ldrb	r3, [r7, #11]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d135      	bne.n	8007278 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800720c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007210:	461a      	mov	r2, r3
 8007212:	2100      	movs	r1, #0
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7fd fa70 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007220:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 8081 	bne.w	800732c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800722a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800722e:	461a      	mov	r2, r3
 8007230:	2100      	movs	r1, #0
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7fd fa61 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800723e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007246:	f107 031e 	add.w	r3, r7, #30
 800724a:	461a      	mov	r2, r3
 800724c:	2151      	movs	r1, #81	; 0x51
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f001 faf2 	bl	8008838 <VL53L0X_RdWord>
 8007254:	4603      	mov	r3, r0
 8007256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800725a:	8bfb      	ldrh	r3, [r7, #30]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff23 	bl	80070a8 <VL53L0X_decode_timeout>
 8007262:	4603      	mov	r3, r0
 8007264:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007266:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800726a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800726c:	4619      	mov	r1, r3
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff5a 	bl	8007128 <VL53L0X_calc_timeout_us>
 8007274:	62b8      	str	r0, [r7, #40]	; 0x28
 8007276:	e059      	b.n	800732c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d156      	bne.n	800732c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800727e:	f107 0314 	add.w	r3, r7, #20
 8007282:	4619      	mov	r1, r3
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7fd fb41 	bl	800490c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01d      	beq.n	80072d0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007294:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007298:	461a      	mov	r2, r3
 800729a:	2100      	movs	r1, #0
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7fd fa2c 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80072a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10f      	bne.n	80072d0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80072b0:	f107 031e 	add.w	r3, r7, #30
 80072b4:	461a      	mov	r2, r3
 80072b6:	2151      	movs	r1, #81	; 0x51
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fabd 	bl	8008838 <VL53L0X_RdWord>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80072c4:	8bfb      	ldrh	r3, [r7, #30]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff feee 	bl	80070a8 <VL53L0X_decode_timeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80072d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80072d8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80072dc:	461a      	mov	r2, r3
 80072de:	2101      	movs	r1, #1
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7fd fa0a 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80072ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10f      	bne.n	8007314 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80072f4:	f107 031c 	add.w	r3, r7, #28
 80072f8:	461a      	mov	r2, r3
 80072fa:	2171      	movs	r1, #113	; 0x71
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 fa9b 	bl	8008838 <VL53L0X_RdWord>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007308:	8bbb      	ldrh	r3, [r7, #28]
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fecc 	bl	80070a8 <VL53L0X_decode_timeout>
 8007310:	4603      	mov	r3, r0
 8007312:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007314:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800731c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007322:	4619      	mov	r1, r3
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff feff 	bl	8007128 <VL53L0X_calc_timeout_us>
 800732a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007330:	601a      	str	r2, [r3, #0]

	return Status;
 8007332:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007336:	4618      	mov	r0, r3
 8007338:	3730      	adds	r7, #48	; 0x30
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b08a      	sub	sp, #40	; 0x28
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	460b      	mov	r3, r1
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <set_sequence_step_timeout+0x26>
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d002      	beq.n	8007364 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d138      	bne.n	80073d6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007364:	f107 031b 	add.w	r3, r7, #27
 8007368:	461a      	mov	r2, r3
 800736a:	2100      	movs	r1, #0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7fd f9c4 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007378:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11a      	bne.n	80073b6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007380:	7efb      	ldrb	r3, [r7, #27]
 8007382:	461a      	mov	r2, r3
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fea4 	bl	80070d4 <VL53L0X_calc_timeout_mclks>
 800738c:	4603      	mov	r3, r0
 800738e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007390:	8bbb      	ldrh	r3, [r7, #28]
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	d903      	bls.n	80073a0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007398:	23ff      	movs	r3, #255	; 0xff
 800739a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800739e:	e004      	b.n	80073aa <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80073a0:	8bbb      	ldrh	r3, [r7, #28]
 80073a2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80073a4:	3b01      	subs	r3, #1
 80073a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80073b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80ab 	bne.w	8007516 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80073c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073c4:	461a      	mov	r2, r3
 80073c6:	2146      	movs	r1, #70	; 0x46
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 f989 	bl	80086e0 <VL53L0X_WrByte>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80073d4:	e09f      	b.n	8007516 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d135      	bne.n	8007448 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80073dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11b      	bne.n	800741c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073e4:	f107 031b 	add.w	r3, r7, #27
 80073e8:	461a      	mov	r2, r3
 80073ea:	2100      	movs	r1, #0
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7fd f984 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80073f8:	7efb      	ldrb	r3, [r7, #27]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff fe68 	bl	80070d4 <VL53L0X_calc_timeout_mclks>
 8007404:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007406:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fe21 	bl	8007052 <VL53L0X_encode_timeout>
 8007410:	4603      	mov	r3, r0
 8007412:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007414:	8b3a      	ldrh	r2, [r7, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800741c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007420:	2b00      	cmp	r3, #0
 8007422:	d108      	bne.n	8007436 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007424:	8b3b      	ldrh	r3, [r7, #24]
 8007426:	461a      	mov	r2, r3
 8007428:	2151      	movs	r1, #81	; 0x51
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f001 f97c 	bl	8008728 <VL53L0X_WrWord>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800743a:	2b00      	cmp	r3, #0
 800743c:	d16b      	bne.n	8007516 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007446:	e066      	b.n	8007516 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	2b04      	cmp	r3, #4
 800744c:	d160      	bne.n	8007510 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800744e:	f107 0310 	add.w	r3, r7, #16
 8007452:	4619      	mov	r1, r3
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7fd fa59 	bl	800490c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01d      	beq.n	80074a0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007464:	f107 031b 	add.w	r3, r7, #27
 8007468:	461a      	mov	r2, r3
 800746a:	2100      	movs	r1, #0
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7fd f944 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007478:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10f      	bne.n	80074a0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007480:	f107 0318 	add.w	r3, r7, #24
 8007484:	461a      	mov	r2, r3
 8007486:	2151      	movs	r1, #81	; 0x51
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f001 f9d5 	bl	8008838 <VL53L0X_RdWord>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007494:	8b3b      	ldrh	r3, [r7, #24]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fe06 	bl	80070a8 <VL53L0X_decode_timeout>
 800749c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800749e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80074a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80074a8:	f107 031b 	add.w	r3, r7, #27
 80074ac:	461a      	mov	r2, r3
 80074ae:	2101      	movs	r1, #1
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7fd f922 	bl	80046fa <VL53L0X_GetVcselPulsePeriod>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80074bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d128      	bne.n	8007516 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80074c4:	7efb      	ldrb	r3, [r7, #27]
 80074c6:	461a      	mov	r2, r3
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fe02 	bl	80070d4 <VL53L0X_calc_timeout_mclks>
 80074d0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80074d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	4413      	add	r3, r2
 80074d8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80074da:	6a38      	ldr	r0, [r7, #32]
 80074dc:	f7ff fdb9 	bl	8007052 <VL53L0X_encode_timeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80074e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	461a      	mov	r2, r3
 80074f0:	2171      	movs	r1, #113	; 0x71
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f001 f918 	bl	8008728 <VL53L0X_WrWord>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80074fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007502:	2b00      	cmp	r3, #0
 8007504:	d107      	bne.n	8007516 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800750e:	e002      	b.n	8007516 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007510:	23fc      	movs	r3, #252	; 0xfc
 8007512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007516:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800751a:	4618      	mov	r0, r3
 800751c:	3728      	adds	r7, #40	; 0x28
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	460b      	mov	r3, r1
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007530:	2300      	movs	r3, #0
 8007532:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800753a:	2b01      	cmp	r3, #1
 800753c:	d00a      	beq.n	8007554 <VL53L0X_get_vcsel_pulse_period+0x32>
 800753e:	e013      	b.n	8007568 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007540:	f107 0316 	add.w	r3, r7, #22
 8007544:	461a      	mov	r2, r3
 8007546:	2150      	movs	r1, #80	; 0x50
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f001 f94b 	bl	80087e4 <VL53L0X_RdByte>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007552:	e00b      	b.n	800756c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007554:	f107 0316 	add.w	r3, r7, #22
 8007558:	461a      	mov	r2, r3
 800755a:	2170      	movs	r1, #112	; 0x70
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f001 f941 	bl	80087e4 <VL53L0X_RdByte>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007566:	e001      	b.n	800756c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007568:	23fc      	movs	r3, #252	; 0xfc
 800756a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800756c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d107      	bne.n	8007584 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007574:	7dbb      	ldrb	r3, [r7, #22]
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fff9 	bl	800656e <VL53L0X_decode_vcsel_period>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	701a      	strb	r2, [r3, #0]

	return Status;
 8007584:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b092      	sub	sp, #72	; 0x48
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80075a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80075a4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80075a6:	f240 7376 	movw	r3, #1910	; 0x776
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80075ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80075b2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80075b6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80075b8:	f240 234e 	movw	r3, #590	; 0x24e
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80075be:	f240 23b2 	movw	r3, #690	; 0x2b2
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80075c4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80075ca:	f240 2326 	movw	r3, #550	; 0x226
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80075d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80075d8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d205      	bcs.n	80075f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075e6:	23fc      	movs	r3, #252	; 0xfc
 80075e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80075ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80075f0:	e0aa      	b.n	8007748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80075f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075fe:	f107 0314 	add.w	r3, r7, #20
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fd f981 	bl	800490c <VL53L0X_GetSequenceStepEnables>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007610:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007614:	2b00      	cmp	r3, #0
 8007616:	d15b      	bne.n	80076d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007618:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800761e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007624:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	d052      	beq.n	80076d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800762a:	f107 0310 	add.w	r3, r7, #16
 800762e:	461a      	mov	r2, r3
 8007630:	2102      	movs	r1, #2
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fda2 	bl	800717c <get_sequence_step_timeout>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800763e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007646:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800764a:	e07d      	b.n	8007748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800764c:	7d3b      	ldrb	r3, [r7, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00f      	beq.n	8007672 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007652:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007656:	4413      	add	r3, r2
 8007658:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765e:	429a      	cmp	r2, r3
 8007660:	d204      	bcs.n	800766c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	643b      	str	r3, [r7, #64]	; 0x40
 800766a:	e002      	b.n	8007672 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800766c:	23fc      	movs	r3, #252	; 0xfc
 800766e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007672:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800767a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800767e:	e063      	b.n	8007748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007680:	7dbb      	ldrb	r3, [r7, #22]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d011      	beq.n	80076aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	4413      	add	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007694:	429a      	cmp	r2, r3
 8007696:	d204      	bcs.n	80076a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	643b      	str	r3, [r7, #64]	; 0x40
 80076a0:	e016      	b.n	80076d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076a2:	23fc      	movs	r3, #252	; 0xfc
 80076a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076a8:	e012      	b.n	80076d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80076aa:	7d7b      	ldrb	r3, [r7, #21]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00f      	beq.n	80076d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b4:	4413      	add	r3, r2
 80076b6:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	429a      	cmp	r2, r3
 80076be:	d204      	bcs.n	80076ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80076c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	643b      	str	r3, [r7, #64]	; 0x40
 80076c8:	e002      	b.n	80076d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076ca:	23fc      	movs	r3, #252	; 0xfc
 80076cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80076d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80076d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80076dc:	e034      	b.n	8007748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d019      	beq.n	8007718 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	461a      	mov	r2, r3
 80076ea:	2103      	movs	r1, #3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff fd45 	bl	800717c <get_sequence_step_timeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076fc:	4413      	add	r3, r2
 80076fe:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007704:	429a      	cmp	r2, r3
 8007706:	d204      	bcs.n	8007712 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	643b      	str	r3, [r7, #64]	; 0x40
 8007710:	e002      	b.n	8007718 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007712:	23fc      	movs	r3, #252	; 0xfc
 8007714:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007718:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800771c:	2b00      	cmp	r3, #0
 800771e:	d111      	bne.n	8007744 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007720:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800772e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007730:	2104      	movs	r1, #4
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fe03 	bl	800733e <set_sequence_step_timeout>
 8007738:	4603      	mov	r3, r0
 800773a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007744:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007748:	4618      	mov	r0, r3
 800774a:	3748      	adds	r7, #72	; 0x48
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b090      	sub	sp, #64	; 0x40
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800775a:	2300      	movs	r3, #0
 800775c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007760:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007764:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007766:	f240 7376 	movw	r3, #1910	; 0x776
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800776c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007772:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007778:	f240 234e 	movw	r3, #590	; 0x24e
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800777e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007784:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800778a:	f240 2326 	movw	r3, #550	; 0x226
 800778e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	441a      	add	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800779e:	f107 0318 	add.w	r3, r7, #24
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7fd f8b1 	bl	800490c <VL53L0X_GetSequenceStepEnables>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80077b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80077b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077bc:	e075      	b.n	80078aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80077be:	7e3b      	ldrb	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80077c4:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80077ca:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d030      	beq.n	8007832 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80077d0:	f107 0310 	add.w	r3, r7, #16
 80077d4:	461a      	mov	r2, r3
 80077d6:	2102      	movs	r1, #2
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fccf 	bl	800717c <get_sequence_step_timeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80077e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d122      	bne.n	8007832 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80077ec:	7e3b      	ldrb	r3, [r7, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80077f6:	6939      	ldr	r1, [r7, #16]
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80077fc:	441a      	add	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007802:	7ebb      	ldrb	r3, [r7, #26]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800780c:	6939      	ldr	r1, [r7, #16]
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	440b      	add	r3, r1
 8007812:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007814:	441a      	add	r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e00a      	b.n	8007832 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800781c:	7e7b      	ldrb	r3, [r7, #25]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007826:	6939      	ldr	r1, [r7, #16]
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800782c:	441a      	add	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007832:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007836:	2b00      	cmp	r3, #0
 8007838:	d114      	bne.n	8007864 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800783a:	7efb      	ldrb	r3, [r7, #27]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d011      	beq.n	8007864 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	461a      	mov	r2, r3
 8007846:	2103      	movs	r1, #3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fc97 	bl	800717c <get_sequence_step_timeout>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800785e:	441a      	add	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007864:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007868:	2b00      	cmp	r3, #0
 800786a:	d114      	bne.n	8007896 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800786c:	7f3b      	ldrb	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007872:	f107 0314 	add.w	r3, r7, #20
 8007876:	461a      	mov	r2, r3
 8007878:	2104      	movs	r1, #4
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fc7e 	bl	800717c <get_sequence_step_timeout>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800788a:	6979      	ldr	r1, [r7, #20]
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007890:	441a      	add	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007896:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3740      	adds	r7, #64	; 0x40
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078be:	2300      	movs	r3, #0
 80078c0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80078c6:	e0c6      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4413      	add	r3, r2
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	3301      	adds	r3, #1
 80078d6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80078d8:	7cfb      	ldrb	r3, [r7, #19]
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	f040 808d 	bne.w	80079fa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4413      	add	r3, r2
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	747b      	strb	r3, [r7, #17]
			Index++;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	3301      	adds	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80078f0:	7c7b      	ldrb	r3, [r7, #17]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d87e      	bhi.n	80079f4 <VL53L0X_load_tuning_settings+0x140>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <VL53L0X_load_tuning_settings+0x48>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	08007947 	.word	0x08007947
 8007904:	08007981 	.word	0x08007981
 8007908:	080079bb 	.word	0x080079bb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4413      	add	r3, r2
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	743b      	strb	r3, [r7, #16]
				Index++;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	4413      	add	r3, r2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	3301      	adds	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800792c:	7c3b      	ldrb	r3, [r7, #16]
 800792e:	b29b      	uxth	r3, r3
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	b29a      	uxth	r2, r3
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	b29b      	uxth	r3, r3
 8007938:	4413      	add	r3, r2
 800793a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	89ba      	ldrh	r2, [r7, #12]
 8007940:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007944:	e087      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	4413      	add	r3, r2
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3301      	adds	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	4413      	add	r3, r2
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3301      	adds	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007966:	7c3b      	ldrb	r3, [r7, #16]
 8007968:	b29b      	uxth	r3, r3
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	b29a      	uxth	r2, r3
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	b29b      	uxth	r3, r3
 8007972:	4413      	add	r3, r2
 8007974:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	89ba      	ldrh	r2, [r7, #12]
 800797a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800797e:	e06a      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4413      	add	r3, r2
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	743b      	strb	r3, [r7, #16]
				Index++;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	3301      	adds	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4413      	add	r3, r2
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	73fb      	strb	r3, [r7, #15]
				Index++;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	3301      	adds	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80079a0:	7c3b      	ldrb	r3, [r7, #16]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4413      	add	r3, r2
 80079ae:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	89ba      	ldrh	r2, [r7, #12]
 80079b4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80079b8:	e04d      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	4413      	add	r3, r2
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	743b      	strb	r3, [r7, #16]
				Index++;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	3301      	adds	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	4413      	add	r3, r2
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3301      	adds	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80079da:	7c3b      	ldrb	r3, [r7, #16]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4413      	add	r3, r2
 80079e8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	89ba      	ldrh	r2, [r7, #12]
 80079ee:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80079f2:	e030      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079f4:	23fc      	movs	r3, #252	; 0xfc
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e02d      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80079fa:	7cfb      	ldrb	r3, [r7, #19]
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d828      	bhi.n	8007a52 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	e00f      	b.n	8007a36 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	f107 0208 	add.w	r2, r7, #8
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	4413      	add	r3, r2
 8007a26:	460a      	mov	r2, r1
 8007a28:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	3301      	adds	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	7cfb      	ldrb	r3, [r7, #19]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	dbeb      	blt.n	8007a16 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007a3e:	7cfb      	ldrb	r3, [r7, #19]
 8007a40:	f107 0208 	add.w	r2, r7, #8
 8007a44:	7cb9      	ldrb	r1, [r7, #18]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fdee 	bl	8008628 <VL53L0X_WriteMulti>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e001      	b.n	8007a56 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a52:	23fc      	movs	r3, #252	; 0xfc
 8007a54:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <VL53L0X_load_tuning_settings+0x1b8>
 8007a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f43f af2e 	beq.w	80078c8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007a8e:	f107 0313 	add.w	r3, r7, #19
 8007a92:	4619      	mov	r1, r3
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7fc ffc5 	bl	8004a24 <VL53L0X_GetXTalkCompensationEnable>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007a9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d111      	bne.n	8007aca <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007aa6:	7cfb      	ldrb	r3, [r7, #19]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00e      	beq.n	8007aca <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	8a9b      	ldrh	r3, [r3, #20]
 8007ab6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3380      	adds	r3, #128	; 0x80
 8007ac4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007aca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007aee:	f107 0310 	add.w	r3, r7, #16
 8007af2:	461a      	mov	r2, r3
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff ffbe 	bl	8007a78 <VL53L0X_get_total_xtalk_rate>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007b00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	441a      	add	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]

	return Status;
 8007b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b09a      	sub	sp, #104	; 0x68
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007b2e:	2312      	movs	r3, #18
 8007b30:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b36:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007b38:	2342      	movs	r3, #66	; 0x42
 8007b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007b3c:	2306      	movs	r3, #6
 8007b3e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007b40:	2307      	movs	r3, #7
 8007b42:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007b58:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b5e:	fb02 f303 	mul.w	r3, r2, r3
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	3380      	adds	r3, #128	; 0x80
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b70:	fb02 f303 	mul.w	r3, r2, r3
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01a      	beq.n	8007bb6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	029b      	lsls	r3, r3, #10
 8007b84:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8c:	4413      	add	r3, r2
 8007b8e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007b90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007b9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ba6:	fb03 f303 	mul.w	r3, r3, r3
 8007baa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bc6:	0c1b      	lsrs	r3, r3, #16
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	fb03 f303 	mul.w	r3, r3, r3
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bde:	085a      	lsrs	r2, r3, #1
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	441a      	add	r2, r3
 8007be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bf0:	fb02 f303 	mul.w	r3, r2, r3
 8007bf4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d302      	bcc.n	8007c04 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007bfe:	4b54      	ldr	r3, [pc, #336]	; (8007d50 <VL53L0X_calc_dmax+0x230>)
 8007c00:	663b      	str	r3, [r7, #96]	; 0x60
 8007c02:	e015      	b.n	8007c30 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c06:	085a      	lsrs	r2, r3, #1
 8007c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c0a:	441a      	add	r2, r3
 8007c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c2a:	fb03 f303 	mul.w	r3, r3, r3
 8007c2e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c32:	039b      	lsls	r3, r3, #14
 8007c34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c38:	4a46      	ldr	r2, [pc, #280]	; (8007d54 <VL53L0X_calc_dmax+0x234>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	099b      	lsrs	r3, r3, #6
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	fb03 f303 	mul.w	r3, r3, r3
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4c:	fb03 f303 	mul.w	r3, r3, r3
 8007c50:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	3308      	adds	r3, #8
 8007c56:	091b      	lsrs	r3, r3, #4
 8007c58:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c64:	4613      	mov	r3, r2
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	4413      	add	r3, r2
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c74:	0b9b      	lsrs	r3, r3, #14
 8007c76:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4413      	add	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c92:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	039b      	lsls	r3, r3, #14
 8007c98:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	085b      	lsrs	r3, r3, #1
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cac:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
 8007cb6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cbe:	4a25      	ldr	r2, [pc, #148]	; (8007d54 <VL53L0X_calc_dmax+0x234>)
 8007cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc4:	099b      	lsrs	r3, r3, #6
 8007cc6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cd4:	4a1f      	ldr	r2, [pc, #124]	; (8007d54 <VL53L0X_calc_dmax+0x234>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	099b      	lsrs	r3, r3, #6
 8007cdc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce0:	3380      	adds	r3, #128	; 0x80
 8007ce2:	0a1b      	lsrs	r3, r3, #8
 8007ce4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	085a      	lsrs	r2, r3, #1
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	441a      	add	r2, r3
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cfc:	e001      	b.n	8007d02 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007d02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007d04:	f7fe fc45 	bl	8006592 <VL53L0X_isqrt>
 8007d08:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	085a      	lsrs	r2, r3, #1
 8007d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d16:	441a      	add	r2, r3
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d20:	e001      	b.n	8007d26 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007d26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007d28:	f7fe fc33 	bl	8006592 <VL53L0X_isqrt>
 8007d2c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d902      	bls.n	8007d42 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d40:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007d42:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3768      	adds	r7, #104	; 0x68
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	fff00000 	.word	0xfff00000
 8007d54:	10624dd3 	.word	0x10624dd3

08007d58 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b0b4      	sub	sp, #208	; 0xd0
 8007d5c:	af04      	add	r7, sp, #16
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007d66:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007d6e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007d76:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007d7e:	f241 235c 	movw	r3, #4700	; 0x125c
 8007d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007d86:	4b9e      	ldr	r3, [pc, #632]	; (8008000 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007d8c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007d90:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007d92:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007da0:	4b98      	ldr	r3, [pc, #608]	; (8008004 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007da2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007daa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007dae:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007db0:	f240 6377 	movw	r3, #1655	; 0x677
 8007db4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007dd8:	f107 0310 	add.w	r3, r7, #16
 8007ddc:	461a      	mov	r2, r3
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fe78 	bl	8007ad6 <VL53L0X_get_total_signal_rate>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007dec:	f107 0314 	add.w	r3, r7, #20
 8007df0:	461a      	mov	r2, r3
 8007df2:	68b9      	ldr	r1, [r7, #8]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff fe3f 	bl	8007a78 <VL53L0X_get_total_xtalk_rate>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e12:	0c1b      	lsrs	r3, r3, #16
 8007e14:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007e24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d902      	bls.n	8007e34 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007e34:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d168      	bne.n	8007f0e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007e4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007e50:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007e54:	461a      	mov	r2, r3
 8007e56:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff f93a 	bl	80070d4 <VL53L0X_calc_timeout_mclks>
 8007e60:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007e72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007e76:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff f927 	bl	80070d4 <VL53L0X_calc_timeout_mclks>
 8007e86:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007e8e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d102      	bne.n	8007e9c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007e96:	2302      	movs	r3, #2
 8007e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007ea2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007ea6:	fb02 f303 	mul.w	r3, r2, r3
 8007eaa:	02db      	lsls	r3, r3, #11
 8007eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007eb8:	4a53      	ldr	r2, [pc, #332]	; (8008008 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007eba:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebe:	099b      	lsrs	r3, r3, #6
 8007ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ec8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eca:	fb02 f303 	mul.w	r3, r2, r3
 8007ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ed6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007eda:	4a4b      	ldr	r2, [pc, #300]	; (8008008 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	099b      	lsrs	r3, r3, #6
 8007ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	3380      	adds	r3, #128	; 0x80
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ef4:	fb02 f303 	mul.w	r3, r2, r3
 8007ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f00:	3380      	adds	r3, #128	; 0x80
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007f0e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007f16:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007f1a:	e15e      	b.n	80081da <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8007f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10c      	bne.n	8007f3c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f28:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f30:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e14c      	b.n	80081d6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d102      	bne.n	8007f4a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f52:	041a      	lsls	r2, r3, #16
 8007f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d902      	bls.n	8007f6e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007f82:	4613      	mov	r3, r2
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fb01 	bl	8006592 <VL53L0X_isqrt>
 8007f90:	4603      	mov	r3, r0
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	891b      	ldrh	r3, [r3, #8]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
 8007fa2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007fa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fac:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007fae:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007fb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007fb4:	4a14      	ldr	r2, [pc, #80]	; (8008008 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fba:	099b      	lsrs	r3, r3, #6
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007fc6:	4a10      	ldr	r2, [pc, #64]	; (8008008 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fcc:	099b      	lsrs	r3, r3, #6
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfb8      	it	lt
 8007fe2:	425b      	neglt	r3, r3
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	7e1b      	ldrb	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ffc:	e033      	b.n	8008066 <VL53L0X_calc_sigma_estimate+0x30e>
 8007ffe:	bf00      	nop
 8008000:	028f87ae 	.word	0x028f87ae
 8008004:	0006999a 	.word	0x0006999a
 8008008:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800800c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800800e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008012:	fbb2 f3f3 	udiv	r3, r2, r3
 8008016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008024:	fb02 f303 	mul.w	r3, r2, r3
 8008028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800802c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008032:	4413      	add	r3, r2
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800803a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800803e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800804a:	085b      	lsrs	r3, r3, #1
 800804c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008054:	fb03 f303 	mul.w	r3, r3, r3
 8008058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800805c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008060:	0b9b      	lsrs	r3, r3, #14
 8008062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800806a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	fb03 f303 	mul.w	r3, r3, r3
 8008082:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	fb03 f303 	mul.w	r3, r3, r3
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800809c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	4413      	add	r3, r2
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80080a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a6:	f7fe fa74 	bl	8006592 <VL53L0X_isqrt>
 80080aa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	3332      	adds	r3, #50	; 0x32
 80080b6:	4a4b      	ldr	r2, [pc, #300]	; (80081e4 <VL53L0X_calc_sigma_estimate+0x48c>)
 80080b8:	fba2 2303 	umull	r2, r3, r2, r3
 80080bc:	095a      	lsrs	r2, r3, #5
 80080be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80080c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080cc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80080d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80080e0:	3308      	adds	r3, #8
 80080e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80080e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080ea:	4a3f      	ldr	r2, [pc, #252]	; (80081e8 <VL53L0X_calc_sigma_estimate+0x490>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	0b5b      	lsrs	r3, r3, #13
 80080f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80080f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d902      	bls.n	8008106 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008102:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800810a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800810e:	4413      	add	r3, r2
 8008110:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008114:	4a35      	ldr	r2, [pc, #212]	; (80081ec <VL53L0X_calc_sigma_estimate+0x494>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	099b      	lsrs	r3, r3, #6
 800811c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008126:	441a      	add	r2, r3
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	fbb2 f3f3 	udiv	r3, r2, r3
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fa2f 	bl	8006592 <VL53L0X_isqrt>
 8008134:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008142:	4a2a      	ldr	r2, [pc, #168]	; (80081ec <VL53L0X_calc_sigma_estimate+0x494>)
 8008144:	fba2 2303 	umull	r2, r3, r2, r3
 8008148:	099b      	lsrs	r3, r3, #6
 800814a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800814c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008150:	fb03 f303 	mul.w	r3, r3, r3
 8008154:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	fb03 f303 	mul.w	r3, r3, r3
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800815e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	4413      	add	r3, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fa14 	bl	8006592 <VL53L0X_isqrt>
 800816a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800817a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <VL53L0X_calc_sigma_estimate+0x43c>
 8008180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <VL53L0X_calc_sigma_estimate+0x43c>
 8008188:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800818c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008190:	429a      	cmp	r2, r3
 8008192:	d903      	bls.n	800819c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80081a2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80081ae:	6939      	ldr	r1, [r7, #16]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	9303      	str	r3, [sp, #12]
 80081b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081b8:	9302      	str	r3, [sp, #8]
 80081ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff fca8 	bl	8007b20 <VL53L0X_calc_dmax>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081d6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80081da:	4618      	mov	r0, r3
 80081dc:	37c0      	adds	r7, #192	; 0xc0
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	51eb851f 	.word	0x51eb851f
 80081e8:	d1b71759 	.word	0xd1b71759
 80081ec:	10624dd3 	.word	0x10624dd3

080081f0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b090      	sub	sp, #64	; 0x40
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	461a      	mov	r2, r3
 80081fc:	460b      	mov	r3, r1
 80081fe:	72fb      	strb	r3, [r7, #11]
 8008200:	4613      	mov	r3, r2
 8008202:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008204:	2300      	movs	r3, #0
 8008206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	10db      	asrs	r3, r3, #3
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 030f 	and.w	r3, r3, #15
 800824c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008250:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d017      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
 8008258:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800825c:	2b05      	cmp	r3, #5
 800825e:	d013      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008260:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008264:	2b07      	cmp	r3, #7
 8008266:	d00f      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008268:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800826c:	2b0c      	cmp	r3, #12
 800826e:	d00b      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008270:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008274:	2b0d      	cmp	r3, #13
 8008276:	d007      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008278:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800827c:	2b0e      	cmp	r3, #14
 800827e:	d003      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008280:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008284:	2b0f      	cmp	r3, #15
 8008286:	d103      	bne.n	8008290 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800828e:	e002      	b.n	8008296 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800829e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80082a2:	461a      	mov	r2, r3
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7fc fc90 	bl	8004bcc <VL53L0X_GetLimitCheckEnable>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80082b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02e      	beq.n	8008318 <VL53L0X_get_pal_range_status+0x128>
 80082ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d12a      	bne.n	8008318 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff fd43 	bl	8007d58 <VL53L0X_calc_sigma_estimate>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80082d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80082e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d113      	bne.n	8008318 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80082f0:	f107 0320 	add.w	r3, r7, #32
 80082f4:	461a      	mov	r2, r3
 80082f6:	2100      	movs	r1, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7fc fceb 	bl	8004cd4 <VL53L0X_GetLimitCheckValue>
 80082fe:	4603      	mov	r3, r0
 8008300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d006      	beq.n	8008318 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800830a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800830e:	429a      	cmp	r2, r3
 8008310:	d902      	bls.n	8008318 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008318:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008320:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008324:	461a      	mov	r2, r3
 8008326:	2102      	movs	r1, #2
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7fc fc4f 	bl	8004bcc <VL53L0X_GetLimitCheckEnable>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008334:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008338:	2b00      	cmp	r3, #0
 800833a:	d044      	beq.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
 800833c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008340:	2b00      	cmp	r3, #0
 8008342:	d140      	bne.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008344:	f107 031c 	add.w	r3, r7, #28
 8008348:	461a      	mov	r2, r3
 800834a:	2102      	movs	r1, #2
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7fc fcc1 	bl	8004cd4 <VL53L0X_GetLimitCheckValue>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008358:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800835c:	2b00      	cmp	r3, #0
 800835e:	d107      	bne.n	8008370 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008360:	2201      	movs	r2, #1
 8008362:	21ff      	movs	r1, #255	; 0xff
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f9bb 	bl	80086e0 <VL53L0X_WrByte>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008370:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008378:	f107 0316 	add.w	r3, r7, #22
 800837c:	461a      	mov	r2, r3
 800837e:	21b6      	movs	r1, #182	; 0xb6
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fa59 	bl	8008838 <VL53L0X_RdWord>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800838c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008390:	2b00      	cmp	r3, #0
 8008392:	d107      	bne.n	80083a4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008394:	2200      	movs	r2, #0
 8008396:	21ff      	movs	r1, #255	; 0xff
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f9a1 	bl	80086e0 <VL53L0X_WrByte>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80083a4:	8afb      	ldrh	r3, [r7, #22]
 80083a6:	025b      	lsls	r3, r3, #9
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d006      	beq.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80083b8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80083ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d902      	bls.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80083c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80083ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083d2:	461a      	mov	r2, r3
 80083d4:	2103      	movs	r1, #3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7fc fbf8 	bl	8004bcc <VL53L0X_GetLimitCheckEnable>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80083e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d023      	beq.n	8008432 <VL53L0X_get_pal_range_status+0x242>
 80083ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d11f      	bne.n	8008432 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80083f2:	893b      	ldrh	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	e005      	b.n	800840a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	021a      	lsls	r2, r3, #8
 8008402:	893b      	ldrh	r3, [r7, #8]
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800840a:	f107 0318 	add.w	r3, r7, #24
 800840e:	461a      	mov	r2, r3
 8008410:	2103      	movs	r1, #3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7fc fc5e 	bl	8004cd4 <VL53L0X_GetLimitCheckValue>
 8008418:	4603      	mov	r3, r0
 800841a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008424:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008428:	429a      	cmp	r2, r3
 800842a:	d202      	bcs.n	8008432 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008432:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008436:	2b00      	cmp	r3, #0
 8008438:	d14a      	bne.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800843a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800843e:	2b01      	cmp	r3, #1
 8008440:	d103      	bne.n	800844a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008444:	22ff      	movs	r2, #255	; 0xff
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e042      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800844a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800844e:	2b01      	cmp	r3, #1
 8008450:	d007      	beq.n	8008462 <VL53L0X_get_pal_range_status+0x272>
 8008452:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008456:	2b02      	cmp	r3, #2
 8008458:	d003      	beq.n	8008462 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800845a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800845e:	2b03      	cmp	r3, #3
 8008460:	d103      	bne.n	800846a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008464:	2205      	movs	r2, #5
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e032      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800846a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800846e:	2b06      	cmp	r3, #6
 8008470:	d003      	beq.n	800847a <VL53L0X_get_pal_range_status+0x28a>
 8008472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008476:	2b09      	cmp	r3, #9
 8008478:	d103      	bne.n	8008482 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800847a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847c:	2204      	movs	r2, #4
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e026      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008482:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008486:	2b08      	cmp	r3, #8
 8008488:	d007      	beq.n	800849a <VL53L0X_get_pal_range_status+0x2aa>
 800848a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800848e:	2b0a      	cmp	r3, #10
 8008490:	d003      	beq.n	800849a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008492:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d103      	bne.n	80084a2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	2203      	movs	r2, #3
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e016      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80084a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d003      	beq.n	80084b2 <VL53L0X_get_pal_range_status+0x2c2>
 80084aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d103      	bne.n	80084ba <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80084b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b4:	2202      	movs	r2, #2
 80084b6:	701a      	strb	r2, [r3, #0]
 80084b8:	e00a      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80084ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d103      	bne.n	80084ca <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	2201      	movs	r2, #1
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e002      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80084d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084da:	2200      	movs	r2, #0
 80084dc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80084de:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80084e2:	461a      	mov	r2, r3
 80084e4:	2101      	movs	r1, #1
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7fc fb70 	bl	8004bcc <VL53L0X_GetLimitCheckEnable>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80084f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d14f      	bne.n	800859a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80084fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <VL53L0X_get_pal_range_status+0x31a>
 8008502:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008506:	2b01      	cmp	r3, #1
 8008508:	d103      	bne.n	8008512 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008510:	e002      	b.n	8008518 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800851e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008522:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008526:	2b04      	cmp	r3, #4
 8008528:	d003      	beq.n	8008532 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800852a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008538:	e002      	b.n	8008540 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008546:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800854a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <VL53L0X_get_pal_range_status+0x36a>
 8008552:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008556:	2b01      	cmp	r3, #1
 8008558:	d103      	bne.n	8008562 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008560:	e002      	b.n	8008568 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800856e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <VL53L0X_get_pal_range_status+0x392>
 800857a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800857e:	2b01      	cmp	r3, #1
 8008580:	d103      	bne.n	800858a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008582:	2301      	movs	r3, #1
 8008584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008588:	e002      	b.n	8008590 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008596:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800859a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800859e:	4618      	mov	r0, r3
 80085a0:	3740      	adds	r7, #64	; 0x40
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b088      	sub	sp, #32
 80085aa:	af02      	add	r7, sp, #8
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	330a      	adds	r3, #10
 80085b6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80085c4:	b299      	uxth	r1, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	f7f8 ffbb 	bl	800154c <HAL_I2C_Master_Transmit>
 80085d6:	4603      	mov	r3, r0
 80085d8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80085da:	693b      	ldr	r3, [r7, #16]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	330a      	adds	r3, #10
 80085f4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	b299      	uxth	r1, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	b29a      	uxth	r2, r3
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4613      	mov	r3, r2
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	f7f9 f897 	bl	8001748 <HAL_I2C_Master_Receive>
 800861a:	4603      	mov	r3, r0
 800861c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800861e:	693b      	ldr	r3, [r7, #16]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	607a      	str	r2, [r7, #4]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	460b      	mov	r3, r1
 8008636:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b3f      	cmp	r3, #63	; 0x3f
 8008640:	d902      	bls.n	8008648 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008642:	f06f 0303 	mvn.w	r3, #3
 8008646:	e016      	b.n	8008676 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008648:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <VL53L0X_WriteMulti+0x58>)
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	480c      	ldr	r0, [pc, #48]	; (8008684 <VL53L0X_WriteMulti+0x5c>)
 8008654:	f000 fcf2 	bl	800903c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	461a      	mov	r2, r3
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <VL53L0X_WriteMulti+0x58>)
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff ffa0 	bl	80085a6 <_I2CWrite>
 8008666:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800866e:	23ec      	movs	r3, #236	; 0xec
 8008670:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000424 	.word	0x20000424
 8008684:	20000425 	.word	0x20000425

08008688 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	460b      	mov	r3, r1
 8008696:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800869c:	f107 030b 	add.w	r3, r7, #11
 80086a0:	2201      	movs	r2, #1
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff ff7e 	bl	80085a6 <_I2CWrite>
 80086aa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086b2:	23ec      	movs	r3, #236	; 0xec
 80086b4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80086b6:	e00c      	b.n	80086d2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff ff91 	bl	80085e4 <_I2CRead>
 80086c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086ca:	23ec      	movs	r3, #236	; 0xec
 80086cc:	75fb      	strb	r3, [r7, #23]
 80086ce:	e000      	b.n	80086d2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80086d0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80086d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
 80086ec:	4613      	mov	r3, r2
 80086ee:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80086f4:	4a0b      	ldr	r2, [pc, #44]	; (8008724 <VL53L0X_WrByte+0x44>)
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80086fa:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <VL53L0X_WrByte+0x44>)
 80086fc:	78bb      	ldrb	r3, [r7, #2]
 80086fe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008700:	2202      	movs	r2, #2
 8008702:	4908      	ldr	r1, [pc, #32]	; (8008724 <VL53L0X_WrByte+0x44>)
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff4e 	bl	80085a6 <_I2CWrite>
 800870a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008712:	23ec      	movs	r3, #236	; 0xec
 8008714:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000424 	.word	0x20000424

08008728 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
 8008734:	4613      	mov	r3, r2
 8008736:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800873c:	4a0e      	ldr	r2, [pc, #56]	; (8008778 <VL53L0X_WrWord+0x50>)
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008742:	883b      	ldrh	r3, [r7, #0]
 8008744:	0a1b      	lsrs	r3, r3, #8
 8008746:	b29b      	uxth	r3, r3
 8008748:	b2da      	uxtb	r2, r3
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <VL53L0X_WrWord+0x50>)
 800874c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800874e:	883b      	ldrh	r3, [r7, #0]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <VL53L0X_WrWord+0x50>)
 8008754:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008756:	2203      	movs	r2, #3
 8008758:	4907      	ldr	r1, [pc, #28]	; (8008778 <VL53L0X_WrWord+0x50>)
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ff23 	bl	80085a6 <_I2CWrite>
 8008760:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008768:	23ec      	movs	r3, #236	; 0xec
 800876a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800876c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20000424 	.word	0x20000424

0800877c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	4608      	mov	r0, r1
 8008786:	4611      	mov	r1, r2
 8008788:	461a      	mov	r2, r3
 800878a:	4603      	mov	r3, r0
 800878c:	70fb      	strb	r3, [r7, #3]
 800878e:	460b      	mov	r3, r1
 8008790:	70bb      	strb	r3, [r7, #2]
 8008792:	4613      	mov	r3, r2
 8008794:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800879a:	f107 020e 	add.w	r2, r7, #14
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f81e 	bl	80087e4 <VL53L0X_RdByte>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80087ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d110      	bne.n	80087d6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80087b4:	7bba      	ldrb	r2, [r7, #14]
 80087b6:	78bb      	ldrb	r3, [r7, #2]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	787b      	ldrb	r3, [r7, #1]
 80087be:	4313      	orrs	r3, r2
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80087c4:	7bba      	ldrb	r2, [r7, #14]
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ff88 	bl	80086e0 <VL53L0X_WrByte>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	e000      	b.n	80087d8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80087d6:	bf00      	nop
done:
    return Status;
 80087d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	460b      	mov	r3, r1
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80087f6:	f107 030b 	add.w	r3, r7, #11
 80087fa:	2201      	movs	r2, #1
 80087fc:	4619      	mov	r1, r3
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff fed1 	bl	80085a6 <_I2CWrite>
 8008804:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800880c:	23ec      	movs	r3, #236	; 0xec
 800880e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008810:	e00c      	b.n	800882c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008812:	2201      	movs	r2, #1
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fee4 	bl	80085e4 <_I2CRead>
 800881c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008824:	23ec      	movs	r3, #236	; 0xec
 8008826:	75fb      	strb	r3, [r7, #23]
 8008828:	e000      	b.n	800882c <VL53L0X_RdByte+0x48>
    }
done:
 800882a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800882c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800884a:	f107 030b 	add.w	r3, r7, #11
 800884e:	2201      	movs	r2, #1
 8008850:	4619      	mov	r1, r3
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fea7 	bl	80085a6 <_I2CWrite>
 8008858:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008860:	23ec      	movs	r3, #236	; 0xec
 8008862:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008864:	e017      	b.n	8008896 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008866:	2202      	movs	r2, #2
 8008868:	490e      	ldr	r1, [pc, #56]	; (80088a4 <VL53L0X_RdWord+0x6c>)
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff feba 	bl	80085e4 <_I2CRead>
 8008870:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008878:	23ec      	movs	r3, #236	; 0xec
 800887a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800887c:	e00b      	b.n	8008896 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <VL53L0X_RdWord+0x6c>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	b29a      	uxth	r2, r3
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <VL53L0X_RdWord+0x6c>)
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	b29b      	uxth	r3, r3
 800888e:	4413      	add	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8008896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000424 	.word	0x20000424

080088a8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	460b      	mov	r3, r1
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80088ba:	f107 030b 	add.w	r3, r7, #11
 80088be:	2201      	movs	r2, #1
 80088c0:	4619      	mov	r1, r3
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff fe6f 	bl	80085a6 <_I2CWrite>
 80088c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088d0:	23ec      	movs	r3, #236	; 0xec
 80088d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80088d4:	e01b      	b.n	800890e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80088d6:	2204      	movs	r2, #4
 80088d8:	4910      	ldr	r1, [pc, #64]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fe82 	bl	80085e4 <_I2CRead>
 80088e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088e8:	23ec      	movs	r3, #236	; 0xec
 80088ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 80088ec:	e00f      	b.n	800890e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	061a      	lsls	r2, r3, #24
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088f6:	785b      	ldrb	r3, [r3, #1]
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	441a      	add	r2, r3
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088fe:	789b      	ldrb	r3, [r3, #2]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	4413      	add	r3, r2
 8008904:	4a05      	ldr	r2, [pc, #20]	; (800891c <VL53L0X_RdDWord+0x74>)
 8008906:	78d2      	ldrb	r2, [r2, #3]
 8008908:	441a      	add	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800890e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000424 	.word	0x20000424

08008920 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800892c:	2002      	movs	r0, #2
 800892e:	f7f8 f997 	bl	8000c60 <HAL_Delay>
    return status;
 8008932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	4603      	mov	r3, r0
 8008946:	460a      	mov	r2, r1
 8008948:	80fb      	strh	r3, [r7, #6]
 800894a:	4613      	mov	r3, r2
 800894c:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800894e:	88fa      	ldrh	r2, [r7, #6]
 8008950:	88bb      	ldrh	r3, [r7, #4]
 8008952:	4413      	add	r3, r2
 8008954:	2b3f      	cmp	r3, #63	; 0x3f
 8008956:	dc01      	bgt.n	800895c <bytestowrite+0x1e>
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	e003      	b.n	8008964 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800895c:	88bb      	ldrh	r3, [r7, #4]
 800895e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008962:	b29b      	uxth	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	bc80      	pop	{r7}
 800896c:	4770      	bx	lr
	...

08008970 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	; 0x38
 8008974:	af04      	add	r7, sp, #16
 8008976:	60ba      	str	r2, [r7, #8]
 8008978:	461a      	mov	r2, r3
 800897a:	4603      	mov	r3, r0
 800897c:	81fb      	strh	r3, [r7, #14]
 800897e:	460b      	mov	r3, r1
 8008980:	81bb      	strh	r3, [r7, #12]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8008986:	2306      	movs	r3, #6
 8008988:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 800898a:	89fb      	ldrh	r3, [r7, #14]
 800898c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	89bb      	ldrh	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	2b00      	cmp	r3, #0
 8008996:	da00      	bge.n	800899a <EEPROM_Write+0x2a>
 8008998:	333f      	adds	r3, #63	; 0x3f
 800899a:	119b      	asrs	r3, r3, #6
 800899c:	b29a      	uxth	r2, r3
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	4413      	add	r3, r2
 80089a2:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80089a4:	8b7a      	ldrh	r2, [r7, #26]
 80089a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3301      	adds	r3, #1
 80089ae:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	623b      	str	r3, [r7, #32]
 80089b8:	e034      	b.n	8008a24 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80089ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	b21a      	sxth	r2, r3
 80089c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80089ce:	89ba      	ldrh	r2, [r7, #12]
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff ffb2 	bl	800893e <bytestowrite>
 80089da:	4603      	mov	r3, r0
 80089dc:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 80089de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	8af9      	ldrh	r1, [r7, #22]
 80089e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089ea:	9202      	str	r2, [sp, #8]
 80089ec:	8aba      	ldrh	r2, [r7, #20]
 80089ee:	9201      	str	r2, [sp, #4]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	2302      	movs	r3, #2
 80089f4:	460a      	mov	r2, r1
 80089f6:	21a0      	movs	r1, #160	; 0xa0
 80089f8:	480f      	ldr	r0, [pc, #60]	; (8008a38 <EEPROM_Write+0xc8>)
 80089fa:	f7f9 f911 	bl	8001c20 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80089fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a00:	3301      	adds	r3, #1
 8008a02:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8008a04:	2300      	movs	r3, #0
 8008a06:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	8abb      	ldrh	r3, [r7, #20]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8008a10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a12:	8abb      	ldrh	r3, [r7, #20]
 8008a14:	4413      	add	r3, r2
 8008a16:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8008a18:	2005      	movs	r0, #5
 8008a1a:	f7f8 f921 	bl	8000c60 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	3301      	adds	r3, #1
 8008a22:	623b      	str	r3, [r7, #32]
 8008a24:	8b3b      	ldrh	r3, [r7, #24]
 8008a26:	6a3a      	ldr	r2, [r7, #32]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	dbc6      	blt.n	80089ba <EEPROM_Write+0x4a>
	}
}
 8008a2c:	bf00      	nop
 8008a2e:	bf00      	nop
 8008a30:	3728      	adds	r7, #40	; 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	2000033c 	.word	0x2000033c

08008a3c <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
 8008a4e:	e00b      	b.n	8008a68 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8008a50:	7bfa      	ldrb	r2, [r7, #15]
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	440b      	add	r3, r1
 8008a58:	3210      	adds	r2, #16
 8008a5a:	443a      	add	r2, r7
 8008a5c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8008a60:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	3301      	adds	r3, #1
 8008a66:	73fb      	strb	r3, [r7, #15]
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d9f0      	bls.n	8008a50 <float2Bytes+0x14>
    }

}
 8008a6e:	bf00      	nop
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr

08008a7a <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b087      	sub	sp, #28
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
 8008a86:	e00b      	b.n	8008aa0 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	3318      	adds	r3, #24
 8008a94:	443b      	add	r3, r7
 8008a96:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d9f0      	bls.n	8008a88 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	613b      	str	r3, [r7, #16]
   return float_variable;
 8008aaa:	693b      	ldr	r3, [r7, #16]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr
	...

08008ab8 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	603a      	str	r2, [r7, #0]
 8008ac2:	80fb      	strh	r3, [r7, #6]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	4806      	ldr	r0, [pc, #24]	; (8008ae4 <EEPROM_Write_NUM+0x2c>)
 8008acc:	f7ff ffb6 	bl	8008a3c <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8008ad0:	88b9      	ldrh	r1, [r7, #4]
 8008ad2:	88f8      	ldrh	r0, [r7, #6]
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	4a03      	ldr	r2, [pc, #12]	; (8008ae4 <EEPROM_Write_NUM+0x2c>)
 8008ad8:	f7ff ff4a 	bl	8008970 <EEPROM_Write>
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20000464 	.word	0x20000464

08008ae8 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	460a      	mov	r2, r1
 8008af2:	80fb      	strh	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8008af8:	f107 020c 	add.w	r2, r7, #12
 8008afc:	88b9      	ldrh	r1, [r7, #4]
 8008afe:	88f8      	ldrh	r0, [r7, #6]
 8008b00:	2304      	movs	r3, #4
 8008b02:	f000 f80b 	bl	8008b1c <EEPROM_Read>

	return (Bytes2float(buffer));
 8008b06:	f107 030c 	add.w	r3, r7, #12
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff ffb5 	bl	8008a7a <Bytes2float>
 8008b10:	4603      	mov	r3, r0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08e      	sub	sp, #56	; 0x38
 8008b20:	af04      	add	r7, sp, #16
 8008b22:	60ba      	str	r2, [r7, #8]
 8008b24:	461a      	mov	r2, r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	81fb      	strh	r3, [r7, #14]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	81bb      	strh	r3, [r7, #12]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8008b32:	2306      	movs	r3, #6
 8008b34:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8008b36:	89fb      	ldrh	r3, [r7, #14]
 8008b38:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8008b3a:	88fa      	ldrh	r2, [r7, #6]
 8008b3c:	89bb      	ldrh	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da00      	bge.n	8008b46 <EEPROM_Read+0x2a>
 8008b44:	333f      	adds	r3, #63	; 0x3f
 8008b46:	119b      	asrs	r3, r3, #6
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	89fb      	ldrh	r3, [r7, #14]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8008b50:	8b7a      	ldrh	r2, [r7, #26]
 8008b52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3301      	adds	r3, #1
 8008b5a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8008b60:	2300      	movs	r3, #0
 8008b62:	623b      	str	r3, [r7, #32]
 8008b64:	e031      	b.n	8008bca <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8008b66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	b21a      	sxth	r2, r3
 8008b70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	b21b      	sxth	r3, r3
 8008b78:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8008b7a:	89ba      	ldrh	r2, [r7, #12]
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fedc 	bl	800893e <bytestowrite>
 8008b86:	4603      	mov	r3, r0
 8008b88:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8008b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	4413      	add	r3, r2
 8008b90:	8af9      	ldrh	r1, [r7, #22]
 8008b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b96:	9202      	str	r2, [sp, #8]
 8008b98:	8aba      	ldrh	r2, [r7, #20]
 8008b9a:	9201      	str	r2, [sp, #4]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	460a      	mov	r2, r1
 8008ba2:	21a0      	movs	r1, #160	; 0xa0
 8008ba4:	480d      	ldr	r0, [pc, #52]	; (8008bdc <EEPROM_Read+0xc0>)
 8008ba6:	f7f9 f935 	bl	8001e14 <HAL_I2C_Mem_Read>
		startPage += 1;
 8008baa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bac:	3301      	adds	r3, #1
 8008bae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8008bb4:	88fa      	ldrh	r2, [r7, #6]
 8008bb6:	8abb      	ldrh	r3, [r7, #20]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8008bbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008bbe:	8abb      	ldrh	r3, [r7, #20]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	623b      	str	r3, [r7, #32]
 8008bca:	8b3b      	ldrh	r3, [r7, #24]
 8008bcc:	6a3a      	ldr	r2, [r7, #32]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	dbc9      	blt.n	8008b66 <EEPROM_Read+0x4a>
	}
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	3728      	adds	r7, #40	; 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	2000033c 	.word	0x2000033c

08008be0 <HAL_GPIO_EXTI_Callback>:
	EEPROM_Write_NUM(EEPROM_PAGE, EEPROM_OFFSET, distance);
	state_flag[1] = 1; //Change temporary progress flag to 1 (1 = task done)
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	80fb      	strh	r3, [r7, #6]
	//save button
	if (GPIO_Pin == B2_Pin)
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf0:	d107      	bne.n	8008c02 <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	2120      	movs	r1, #32
 8008bf6:	4813      	ldr	r0, [pc, #76]	; (8008c44 <HAL_GPIO_EXTI_Callback+0x64>)
 8008bf8:	f7f8 fb1a 	bl	8001230 <HAL_GPIO_WritePin>
		status = 3;
 8008bfc:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <HAL_GPIO_EXTI_Callback+0x68>)
 8008bfe:	2203      	movs	r2, #3
 8008c00:	701a      	strb	r2, [r3, #0]
	}
	//change state button
	if (GPIO_Pin == B1_Pin)
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c08:	d10f      	bne.n	8008c2a <HAL_GPIO_EXTI_Callback+0x4a>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2120      	movs	r1, #32
 8008c0e:	480d      	ldr	r0, [pc, #52]	; (8008c44 <HAL_GPIO_EXTI_Callback+0x64>)
 8008c10:	f7f8 fb0e 	bl	8001230 <HAL_GPIO_WritePin>
		if(mode == 0)
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d103      	bne.n	8008c24 <HAL_GPIO_EXTI_Callback+0x44>
		{
			mode = 1;
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e002      	b.n	8008c2a <HAL_GPIO_EXTI_Callback+0x4a>
		}
		else
		{
			mode = 0;
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	701a      	strb	r2, [r3, #0]
		}

	}
	if(GPIO_Pin == TOF_INT_Pin)
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d104      	bne.n	8008c3a <HAL_GPIO_EXTI_Callback+0x5a>
	{
		VL53_CLEAR_INTERRUPT_DATA();
 8008c30:	f000 f9bc 	bl	8008fac <VL53_CLEAR_INTERRUPT_DATA>
		TofDataRead = 1;
 8008c34:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <HAL_GPIO_EXTI_Callback+0x70>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	701a      	strb	r2, [r3, #0]
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40010800 	.word	0x40010800
 8008c48:	20000468 	.word	0x20000468
 8008c4c:	20000469 	.word	0x20000469
 8008c50:	2000046a 	.word	0x2000046a

08008c54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a06      	ldr	r2, [pc, #24]	; (8008c7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d106      	bne.n	8008c74 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8008c66:	2120      	movs	r1, #32
 8008c68:	4805      	ldr	r0, [pc, #20]	; (8008c80 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008c6a:	f7f8 faf9 	bl	8001260 <HAL_GPIO_TogglePin>
		status = 4;
 8008c6e:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8008c70:	2204      	movs	r2, #4
 8008c72:	701a      	strb	r2, [r3, #0]
	}
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	40012c00 	.word	0x40012c00
 8008c80:	40010800 	.word	0x40010800
 8008c84:	20000468 	.word	0x20000468

08008c88 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	4802      	ldr	r0, [pc, #8]	; (8008c9c <TM1637_ClkHigh+0x14>)
 8008c92:	f7f8 facd 	bl	8001230 <HAL_GPIO_WritePin>
}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	40011000 	.word	0x40011000

08008ca0 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <TM1637_ClkLow+0x14>)
 8008caa:	f7f8 fac1 	bl	8001230 <HAL_GPIO_WritePin>
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40011000 	.word	0x40011000

08008cb8 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	4802      	ldr	r0, [pc, #8]	; (8008ccc <TM1637_DataHigh+0x14>)
 8008cc2:	f7f8 fab5 	bl	8001230 <HAL_GPIO_WritePin>
}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40010c00 	.word	0x40010c00

08008cd0 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	4802      	ldr	r0, [pc, #8]	; (8008ce4 <TM1637_DataLow+0x14>)
 8008cda:	f7f8 faa9 	bl	8001230 <HAL_GPIO_WritePin>
}
 8008cde:	bf00      	nop
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40010c00 	.word	0x40010c00

08008ce8 <TM1637_DisplayDecimal>:
		TM1637_DisplayDecimal(i++, 0);
	}
}

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	e032      	b.n	8008d5e <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	4b30      	ldr	r3, [pc, #192]	; (8008dbc <TM1637_DisplayDecimal+0xd4>)
 8008cfc:	fb83 2301 	smull	r2, r3, r3, r1
 8008d00:	109a      	asrs	r2, r3, #2
 8008d02:	17cb      	asrs	r3, r1, #31
 8008d04:	1ad2      	subs	r2, r2, r3
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	1aca      	subs	r2, r1, r3
 8008d10:	4b2b      	ldr	r3, [pc, #172]	; (8008dc0 <TM1637_DisplayDecimal+0xd8>)
 8008d12:	5c99      	ldrb	r1, [r3, r2]
 8008d14:	f107 020c 	add.w	r2, r7, #12
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	460a      	mov	r2, r1
 8008d1e:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d110      	bne.n	8008d48 <TM1637_DisplayDecimal+0x60>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00d      	beq.n	8008d48 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8008d2c:	f107 020c 	add.w	r2, r7, #12
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	4413      	add	r3, r2
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d3a:	b2d9      	uxtb	r1, r3
 8008d3c:	f107 020c 	add.w	r2, r7, #12
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	4413      	add	r3, r2
 8008d44:	460a      	mov	r2, r1
 8008d46:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a1c      	ldr	r2, [pc, #112]	; (8008dbc <TM1637_DisplayDecimal+0xd4>)
 8008d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8008d50:	1092      	asrs	r2, r2, #2
 8008d52:	17db      	asrs	r3, r3, #31
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	ddc9      	ble.n	8008cf8 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8008d64:	f000 f843 	bl	8008dee <TM1637_Start>
    TM1637_WriteByte(0x40);
 8008d68:	2040      	movs	r0, #64	; 0x40
 8008d6a:	f000 f872 	bl	8008e52 <TM1637_WriteByte>
    TM1637_ReadResult();
 8008d6e:	f000 f860 	bl	8008e32 <TM1637_ReadResult>
    TM1637_Stop();
 8008d72:	f000 f849 	bl	8008e08 <TM1637_Stop>

    TM1637_Start();
 8008d76:	f000 f83a 	bl	8008dee <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8008d7a:	20c0      	movs	r0, #192	; 0xc0
 8008d7c:	f000 f869 	bl	8008e52 <TM1637_WriteByte>
    TM1637_ReadResult();
 8008d80:	f000 f857 	bl	8008e32 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8008d84:	2300      	movs	r3, #0
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	e00e      	b.n	8008da8 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f1c3 0303 	rsb	r3, r3, #3
 8008d90:	3318      	adds	r3, #24
 8008d92:	443b      	add	r3, r7
 8008d94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f85a 	bl	8008e52 <TM1637_WriteByte>
        TM1637_ReadResult();
 8008d9e:	f000 f848 	bl	8008e32 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3301      	adds	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	dded      	ble.n	8008d8a <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 8008dae:	f000 f82b 	bl	8008e08 <TM1637_Stop>
}
 8008db2:	bf00      	nop
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	66666667 	.word	0x66666667
 8008dc0:	0800909c 	.word	0x0800909c

08008dc4 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8008dce:	f000 f80e 	bl	8008dee <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	3b79      	subs	r3, #121	; 0x79
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f83a 	bl	8008e52 <TM1637_WriteByte>
    TM1637_ReadResult();
 8008dde:	f000 f828 	bl	8008e32 <TM1637_ReadResult>
    TM1637_Stop();
 8008de2:	f000 f811 	bl	8008e08 <TM1637_Stop>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <TM1637_Start>:

void TM1637_Start(void)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 8008df2:	f7ff ff49 	bl	8008c88 <TM1637_ClkHigh>
    TM1637_DataHigh();
 8008df6:	f7ff ff5f 	bl	8008cb8 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 8008dfa:	2002      	movs	r0, #2
 8008dfc:	f000 f853 	bl	8008ea6 <TM1637_DelayUsec>
    TM1637_DataLow();
 8008e00:	f7ff ff66 	bl	8008cd0 <TM1637_DataLow>
}
 8008e04:	bf00      	nop
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8008e0c:	f7ff ff48 	bl	8008ca0 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 8008e10:	2002      	movs	r0, #2
 8008e12:	f000 f848 	bl	8008ea6 <TM1637_DelayUsec>
    TM1637_DataLow();
 8008e16:	f7ff ff5b 	bl	8008cd0 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8008e1a:	2002      	movs	r0, #2
 8008e1c:	f000 f843 	bl	8008ea6 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8008e20:	f7ff ff32 	bl	8008c88 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8008e24:	2002      	movs	r0, #2
 8008e26:	f000 f83e 	bl	8008ea6 <TM1637_DelayUsec>
    TM1637_DataHigh();
 8008e2a:	f7ff ff45 	bl	8008cb8 <TM1637_DataHigh>
}
 8008e2e:	bf00      	nop
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8008e36:	f7ff ff33 	bl	8008ca0 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8008e3a:	2005      	movs	r0, #5
 8008e3c:	f000 f833 	bl	8008ea6 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8008e40:	f7ff ff22 	bl	8008c88 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8008e44:	2002      	movs	r0, #2
 8008e46:	f000 f82e 	bl	8008ea6 <TM1637_DelayUsec>
    TM1637_ClkLow();
 8008e4a:	f7ff ff29 	bl	8008ca0 <TM1637_ClkLow>
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	4603      	mov	r3, r0
 8008e5a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e019      	b.n	8008e96 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8008e62:	f7ff ff1d 	bl	8008ca0 <TM1637_ClkLow>
		if (b & 0x01) {
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8008e70:	f7ff ff22 	bl	8008cb8 <TM1637_DataHigh>
 8008e74:	e001      	b.n	8008e7a <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8008e76:	f7ff ff2b 	bl	8008cd0 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8008e7a:	2003      	movs	r0, #3
 8008e7c:	f000 f813 	bl	8008ea6 <TM1637_DelayUsec>
		b >>= 1;
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8008e86:	f7ff feff 	bl	8008c88 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8008e8a:	2003      	movs	r0, #3
 8008e8c:	f000 f80b 	bl	8008ea6 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b07      	cmp	r3, #7
 8008e9a:	dde2      	ble.n	8008e62 <TM1637_WriteByte+0x10>
	}
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8008eae:	e00d      	b.n	8008ecc <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e003      	b.n	8008ebe <TM1637_DelayUsec+0x18>
					__NOP();
 8008eb6:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008ec4:	dbf7      	blt.n	8008eb6 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1ee      	bne.n	8008eb0 <TM1637_DelayUsec+0xa>
        }
    }
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr
	...

08008ee0 <VL53_init>:
VL53L0X_RangingMeasurementData_t RangingData;
VL53L0X_Dev_t  vl53l0x_c; // center module
VL53L0X_DEV    Dev = &vl53l0x_c;

void VL53_init()
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c2;
 8008ee6:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <VL53_init+0xa4>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a27      	ldr	r2, [pc, #156]	; (8008f88 <VL53_init+0xa8>)
 8008eec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8008ef0:	4b24      	ldr	r3, [pc, #144]	; (8008f84 <VL53_init+0xa4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2252      	movs	r2, #82	; 0x52
 8008ef6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8008efa:	2200      	movs	r2, #0
 8008efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f00:	4822      	ldr	r0, [pc, #136]	; (8008f8c <VL53_init+0xac>)
 8008f02:	f7f8 f995 	bl	8001230 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8008f06:	2014      	movs	r0, #20
 8008f08:	f7f7 feaa 	bl	8000c60 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f12:	481e      	ldr	r0, [pc, #120]	; (8008f8c <VL53_init+0xac>)
 8008f14:	f7f8 f98c 	bl	8001230 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8008f18:	2014      	movs	r0, #20
 8008f1a:	f7f7 fea1 	bl	8000c60 <HAL_Delay>

	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8008f1e:	2007      	movs	r0, #7
 8008f20:	f7f7 ffe7 	bl	8000ef2 <HAL_NVIC_DisableIRQ>

	VL53L0X_WaitDeviceBooted( Dev );
 8008f24:	4b17      	ldr	r3, [pc, #92]	; (8008f84 <VL53_init+0xa4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fb fac5 	bl	80044b8 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <VL53_init+0xa4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fa ffda 	bl	8003eec <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8008f38:	4b12      	ldr	r3, [pc, #72]	; (8008f84 <VL53_init+0xa4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb f939 	bl	80041b4 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8008f42:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <VL53_init+0xa4>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	1c7a      	adds	r2, r7, #1
 8008f48:	1cb9      	adds	r1, r7, #2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fb ffb6 	bl	8004ebc <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <VL53_init+0xa4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	1cfa      	adds	r2, r7, #3
 8008f56:	1d39      	adds	r1, r7, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fc fc3b 	bl	80057d4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8008f5e:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <VL53_init+0xa4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2101      	movs	r1, #1
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fb fb45 	bl	80045f4 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(Dev);
 8008f6a:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <VL53_init+0xa4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fc f820 	bl	8004fb4 <VL53L0X_StartMeasurement>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8008f74:	2007      	movs	r0, #7
 8008f76:	f7f7 ffae 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	200002c8 	.word	0x200002c8
 8008f88:	2000033c 	.word	0x2000033c
 8008f8c:	40010800 	.word	0x40010800

08008f90 <VL53_MEASURE>:

uint16_t VL53_MEASURE()
{	uint16_t Measure = RangingData.RangeMilliMeter;
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <VL53_MEASURE+0x18>)
 8008f98:	891b      	ldrh	r3, [r3, #8]
 8008f9a:	80fb      	strh	r3, [r7, #6]
	return Measure;
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr
 8008fa8:	2000046c 	.word	0x2000046c

08008fac <VL53_CLEAR_INTERRUPT_DATA>:

void VL53_CLEAR_INTERRUPT_DATA()
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
	VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8008fb0:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4906      	ldr	r1, [pc, #24]	; (8008fd0 <VL53_CLEAR_INTERRUPT_DATA+0x24>)
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fc f8fe 	bl	80051b8 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8008fbc:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <VL53_CLEAR_INTERRUPT_DATA+0x20>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2104      	movs	r1, #4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fc fba4 	bl	8005710 <VL53L0X_ClearInterruptMask>
}
 8008fc8:	bf00      	nop
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	200002c8 	.word	0x200002c8
 8008fd0:	2000046c 	.word	0x2000046c

08008fd4 <memset>:
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	4402      	add	r2, r0
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d100      	bne.n	8008fde <memset+0xa>
 8008fdc:	4770      	bx	lr
 8008fde:	f803 1b01 	strb.w	r1, [r3], #1
 8008fe2:	e7f9      	b.n	8008fd8 <memset+0x4>

08008fe4 <__libc_init_array>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	4d0c      	ldr	r5, [pc, #48]	; (800901c <__libc_init_array+0x38>)
 8008fea:	4c0d      	ldr	r4, [pc, #52]	; (8009020 <__libc_init_array+0x3c>)
 8008fec:	1b64      	subs	r4, r4, r5
 8008fee:	10a4      	asrs	r4, r4, #2
 8008ff0:	42a6      	cmp	r6, r4
 8008ff2:	d109      	bne.n	8009008 <__libc_init_array+0x24>
 8008ff4:	f000 f830 	bl	8009058 <_init>
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	4d0a      	ldr	r5, [pc, #40]	; (8009024 <__libc_init_array+0x40>)
 8008ffc:	4c0a      	ldr	r4, [pc, #40]	; (8009028 <__libc_init_array+0x44>)
 8008ffe:	1b64      	subs	r4, r4, r5
 8009000:	10a4      	asrs	r4, r4, #2
 8009002:	42a6      	cmp	r6, r4
 8009004:	d105      	bne.n	8009012 <__libc_init_array+0x2e>
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	f855 3b04 	ldr.w	r3, [r5], #4
 800900c:	4798      	blx	r3
 800900e:	3601      	adds	r6, #1
 8009010:	e7ee      	b.n	8008ff0 <__libc_init_array+0xc>
 8009012:	f855 3b04 	ldr.w	r3, [r5], #4
 8009016:	4798      	blx	r3
 8009018:	3601      	adds	r6, #1
 800901a:	e7f2      	b.n	8009002 <__libc_init_array+0x1e>
 800901c:	080090b0 	.word	0x080090b0
 8009020:	080090b0 	.word	0x080090b0
 8009024:	080090b0 	.word	0x080090b0
 8009028:	080090b4 	.word	0x080090b4

0800902c <strcpy>:
 800902c:	4603      	mov	r3, r0
 800902e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009032:	f803 2b01 	strb.w	r2, [r3], #1
 8009036:	2a00      	cmp	r2, #0
 8009038:	d1f9      	bne.n	800902e <strcpy+0x2>
 800903a:	4770      	bx	lr

0800903c <memcpy>:
 800903c:	440a      	add	r2, r1
 800903e:	4291      	cmp	r1, r2
 8009040:	f100 33ff 	add.w	r3, r0, #4294967295
 8009044:	d100      	bne.n	8009048 <memcpy+0xc>
 8009046:	4770      	bx	lr
 8009048:	b510      	push	{r4, lr}
 800904a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904e:	4291      	cmp	r1, r2
 8009050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009054:	d1f9      	bne.n	800904a <memcpy+0xe>
 8009056:	bd10      	pop	{r4, pc}

08009058 <_init>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr

08009064 <_fini>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	bf00      	nop
 8009068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906a:	bc08      	pop	{r3}
 800906c:	469e      	mov	lr, r3
 800906e:	4770      	bx	lr
