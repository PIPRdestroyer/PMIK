
i2c_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb0  08002bb0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb0  08002bb0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb0  08002bb0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08002c14  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002c14  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000993b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7c  00000000  00000000  00029a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073d  00000000  00000000  0002bed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177ee  00000000  00000000  0002c615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3da  00000000  00000000  00043e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847c7  00000000  00000000  000511dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a3c  00000000  00000000  000d59a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d83e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b30 	.word	0x08002b30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b30 	.word	0x08002b30

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fe3d 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fcac 	bl	8000b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fc9e 	bl	8000b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fc62 	bl	8000ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fc7b 	bl	8000b06 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_I2C1_Init+0x50>)
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <MX_I2C1_Init+0x54>)
 8000230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <MX_I2C1_Init+0x50>)
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_I2C1_Init+0x58>)
 8000236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_I2C1_Init+0x50>)
 8000246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800024a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <MX_I2C1_Init+0x50>)
 8000266:	f000 fe27 	bl	8000eb8 <HAL_I2C_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f99f 	bl	80005b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000078 	.word	0x20000078
 800027c:	40005400 	.word	0x40005400
 8000280:	000186a0 	.word	0x000186a0

08000284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a15      	ldr	r2, [pc, #84]	; (80002f4 <HAL_I2C_MspInit+0x70>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d123      	bne.n	80002ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <HAL_I2C_MspInit+0x74>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <HAL_I2C_MspInit+0x74>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <HAL_I2C_MspInit+0x74>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002bc:	23c0      	movs	r3, #192	; 0xc0
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002c0:	2312      	movs	r3, #18
 80002c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c8:	f107 0310 	add.w	r3, r7, #16
 80002cc:	4619      	mov	r1, r3
 80002ce:	480b      	ldr	r0, [pc, #44]	; (80002fc <HAL_I2C_MspInit+0x78>)
 80002d0:	f000 fc34 	bl	8000b3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <HAL_I2C_MspInit+0x74>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <HAL_I2C_MspInit+0x74>)
 80002da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002de:	61d3      	str	r3, [r2, #28]
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <HAL_I2C_MspInit+0x74>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40005400 	.word	0x40005400
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010c00 	.word	0x40010c00

08000300 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000316:	2308      	movs	r3, #8
 8000318:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800031a:	2028      	movs	r0, #40	; 0x28
 800031c:	f000 fadc 	bl	80008d8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	7bfa      	ldrb	r2, [r7, #15]
 8000326:	2130      	movs	r1, #48	; 0x30
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f829 	bl	8000380 <lcd_write>
	HAL_Delay(5);
 800032e:	2005      	movs	r0, #5
 8000330:	f000 fad2 	bl	80008d8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	7bfa      	ldrb	r2, [r7, #15]
 800033a:	2130      	movs	r1, #48	; 0x30
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f81f 	bl	8000380 <lcd_write>
	HAL_Delay(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f000 fac8 	bl	80008d8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	7bfa      	ldrb	r2, [r7, #15]
 800034e:	2130      	movs	r1, #48	; 0x30
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f815 	bl	8000380 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	7bfa      	ldrb	r2, [r7, #15]
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f80e 	bl	8000380 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	7bfa      	ldrb	r2, [r7, #15]
 800036a:	210c      	movs	r1, #12
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f807 	bl	8000380 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 f89f 	bl	80004b6 <lcd_clear>

}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af02      	add	r7, sp, #8
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	460b      	mov	r3, r1
 800038c:	71bb      	strb	r3, [r7, #6]
 800038e:	4613      	mov	r3, r2
 8000390:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000392:	79bb      	ldrb	r3, [r7, #6]
 8000394:	f023 030f 	bic.w	r3, r3, #15
 8000398:	b2da      	uxtb	r2, r3
 800039a:	797b      	ldrb	r3, [r7, #5]
 800039c:	4313      	orrs	r3, r2
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80003a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003ac:	f023 030f 	bic.w	r3, r3, #15
 80003b0:	b25a      	sxtb	r2, r3
 80003b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003b6:	4313      	orrs	r3, r2
 80003b8:	b25b      	sxtb	r3, r3
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80003be:	79bb      	ldrb	r3, [r7, #6]
 80003c0:	011b      	lsls	r3, r3, #4
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	797b      	ldrb	r3, [r7, #5]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	011b      	lsls	r3, r3, #4
 80003d6:	b25a      	sxtb	r2, r3
 80003d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003dc:	4313      	orrs	r3, r2
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	b299      	uxth	r1, r3
 80003e8:	f107 020c 	add.w	r2, r7, #12
 80003ec:	2364      	movs	r3, #100	; 0x64
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2304      	movs	r3, #4
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <lcd_write+0x88>)
 80003f4:	f000 fea4 	bl	8001140 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 fa6d 	bl	80008d8 <HAL_Delay>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000078 	.word	0x20000078

0800040c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	2300      	movs	r3, #0
 800041a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000426:	2308      	movs	r3, #8
 8000428:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f843 	bl	80004b6 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	7bfa      	ldrb	r2, [r7, #15]
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ffa1 	bl	8000380 <lcd_write>
	while(lcd->f_line[i])
 800043e:	e00f      	b.n	8000460 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	7818      	ldrb	r0, [r3, #0]
 8000444:	7bbb      	ldrb	r3, [r7, #14]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	7859      	ldrb	r1, [r3, #1]
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	f7ff ff93 	bl	8000380 <lcd_write>
		i++;
 800045a:	7bbb      	ldrb	r3, [r7, #14]
 800045c:	3301      	adds	r3, #1
 800045e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000460:	7bbb      	ldrb	r3, [r7, #14]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1e9      	bne.n	8000440 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	7bfa      	ldrb	r2, [r7, #15]
 8000476:	21c0      	movs	r1, #192	; 0xc0
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff81 	bl	8000380 <lcd_write>
	while(lcd->s_line[i])
 800047e:	e00f      	b.n	80004a0 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7818      	ldrb	r0, [r3, #0]
 8000484:	7bbb      	ldrb	r3, [r7, #14]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	7c99      	ldrb	r1, [r3, #18]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	f7ff ff73 	bl	8000380 <lcd_write>
		i++;
 800049a:	7bbb      	ldrb	r3, [r7, #14]
 800049c:	3301      	adds	r3, #1
 800049e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	7c9b      	ldrb	r3, [r3, #18]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1e9      	bne.n	8000480 <lcd_display+0x74>
	}
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b084      	sub	sp, #16
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80004cc:	2308      	movs	r3, #8
 80004ce:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	7bfa      	ldrb	r2, [r7, #15]
 80004d6:	2101      	movs	r1, #1
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff51 	bl	8000380 <lcd_write>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 f992 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f81e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f7ff fe2a 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 f8fe 	bl	80006f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004fc:	f7ff fe94 	bl	8000228 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = 0x27;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x3c>)
 8000502:	2227      	movs	r2, #39	; 0x27
 8000504:	701a      	strb	r2, [r3, #0]
  disp.bl = false;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <main+0x3c>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x3c>)
 8000510:	f7ff fef6 	bl	8000300 <lcd_init>
  sprintf((char *)disp.f_line, "PMIK");
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <main+0x40>)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <main+0x44>)
 8000518:	f001 fe58 	bl	80021cc <siprintf>

  lcd_display(&disp);
 800051c:	4801      	ldr	r0, [pc, #4]	; (8000524 <main+0x3c>)
 800051e:	f7ff ff75 	bl	800040c <lcd_display>
//	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 32704, 2, toReadL, sizeof(toReadL), 1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x3a>
 8000524:	200000cc 	.word	0x200000cc
 8000528:	08002b48 	.word	0x08002b48
 800052c:	200000cd 	.word	0x200000cd

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b090      	sub	sp, #64	; 0x40
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fe64 	bl	800220c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000562:	2300      	movs	r3, #0
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000566:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f93d 	bl	80017f0 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800057c:	f000 f819 	bl	80005b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fbaa 	bl	8001cf4 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005a6:	f000 f804 	bl	80005b2 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3740      	adds	r7, #64	; 0x40
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b6:	b672      	cpsid	i
}
 80005b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ba:	e7fe      	b.n	80005ba <Error_Handler+0x8>

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <HAL_MspInit+0x5c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_MspInit+0x5c>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_MspInit+0x5c>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x5c>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_MspInit+0x60>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_MspInit+0x60>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000666:	f000 f91b 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}

0800066e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000672:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000676:	f000 fbfd 	bl	8000e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 fdb4 	bl	800221c <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20005000 	.word	0x20005000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	200000f0 	.word	0x200000f0
 80006e8:	20000288 	.word	0x20000288

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f001 fc6e 	bl	8002010 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f7ff ff3a 	bl	80005b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000f4 	.word	0x200000f4
 8000748:	40004400 	.word	0x40004400

0800074c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x70>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d123      	bne.n	80007b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_UART_MspInit+0x74>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <HAL_UART_MspInit+0x74>)
 8000772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_UART_MspInit+0x74>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_UART_MspInit+0x74>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <HAL_UART_MspInit+0x74>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_UART_MspInit+0x74>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800079c:	230c      	movs	r3, #12
 800079e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_UART_MspInit+0x78>)
 80007b0:	f000 f9c4 	bl	8000b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40004400 	.word	0x40004400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff ff90 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ce:	490c      	ldr	r1, [pc, #48]	; (8000800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a09      	ldr	r2, [pc, #36]	; (8000808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e4:	4c09      	ldr	r4, [pc, #36]	; (800080c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f001 fd19 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fe77 	bl	80004e8 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000804:	08002bb8 	.word	0x08002bb8
  ldr r2, =_sbss
 8000808:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800080c:	20000288 	.word	0x20000288

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f947 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fec4 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f95f 	bl	8000b22 <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f927 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000008 	.word	0x20000008
 80008c0:	2000013c 	.word	0x2000013c

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	2000013c 	.word	0x2000013c

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4906      	ldr	r1, [pc, #24]	; (80009b8 <__NVIC_EnableIRQ+0x34>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff90 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff2d 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff42 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff90 	bl	8000a10 <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5f 	bl	80009bc <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff35 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffa2 	bl	8000a74 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b08b      	sub	sp, #44	; 0x2c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e169      	b.n	8000e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b50:	2201      	movs	r2, #1
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 8158 	bne.w	8000e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a9a      	ldr	r2, [pc, #616]	; (8000ddc <HAL_GPIO_Init+0x2a0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d05e      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b78:	4a98      	ldr	r2, [pc, #608]	; (8000ddc <HAL_GPIO_Init+0x2a0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d875      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b7e:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <HAL_GPIO_Init+0x2a4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d058      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b84:	4a96      	ldr	r2, [pc, #600]	; (8000de0 <HAL_GPIO_Init+0x2a4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d86f      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b8a:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <HAL_GPIO_Init+0x2a8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d052      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b90:	4a94      	ldr	r2, [pc, #592]	; (8000de4 <HAL_GPIO_Init+0x2a8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d869      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b96:	4a94      	ldr	r2, [pc, #592]	; (8000de8 <HAL_GPIO_Init+0x2ac>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d04c      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <HAL_GPIO_Init+0x2ac>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d863      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000ba2:	4a92      	ldr	r2, [pc, #584]	; (8000dec <HAL_GPIO_Init+0x2b0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d046      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a90      	ldr	r2, [pc, #576]	; (8000dec <HAL_GPIO_Init+0x2b0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d85d      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d82a      	bhi.n	8000c08 <HAL_GPIO_Init+0xcc>
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d859      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <HAL_GPIO_Init+0x80>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000c37 	.word	0x08000c37
 8000bc0:	08000c11 	.word	0x08000c11
 8000bc4:	08000c23 	.word	0x08000c23
 8000bc8:	08000c65 	.word	0x08000c65
 8000bcc:	08000c6b 	.word	0x08000c6b
 8000bd0:	08000c6b 	.word	0x08000c6b
 8000bd4:	08000c6b 	.word	0x08000c6b
 8000bd8:	08000c6b 	.word	0x08000c6b
 8000bdc:	08000c6b 	.word	0x08000c6b
 8000be0:	08000c6b 	.word	0x08000c6b
 8000be4:	08000c6b 	.word	0x08000c6b
 8000be8:	08000c6b 	.word	0x08000c6b
 8000bec:	08000c6b 	.word	0x08000c6b
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c6b 	.word	0x08000c6b
 8000bf8:	08000c6b 	.word	0x08000c6b
 8000bfc:	08000c6b 	.word	0x08000c6b
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c2d 	.word	0x08000c2d
 8000c08:	4a79      	ldr	r2, [pc, #484]	; (8000df0 <HAL_GPIO_Init+0x2b4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0e:	e02c      	b.n	8000c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e029      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e024      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	3308      	adds	r3, #8
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e01f      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	330c      	adds	r3, #12
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e01a      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e013      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d105      	bne.n	8000c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	611a      	str	r2, [r3, #16]
          break;
 8000c56:	e009      	b.n	8000c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	615a      	str	r2, [r3, #20]
          break;
 8000c62:	e003      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e000      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          break;
 8000c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d801      	bhi.n	8000c76 <HAL_GPIO_Init+0x13a>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	e001      	b.n	8000c7a <HAL_GPIO_Init+0x13e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d802      	bhi.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x152>
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	3b08      	subs	r3, #8
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	210f      	movs	r1, #15
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	6a39      	ldr	r1, [r7, #32]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd4:	4a48      	ldr	r2, [pc, #288]	; (8000df8 <HAL_GPIO_Init+0x2bc>)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <HAL_GPIO_Init+0x2c0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x1ec>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3f      	ldr	r2, [pc, #252]	; (8000e00 <HAL_GPIO_Init+0x2c4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1e8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <HAL_GPIO_Init+0x2c8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <HAL_GPIO_Init+0x2cc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1e0>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3a:	492f      	ldr	r1, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x2bc>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	492c      	ldr	r1, [pc, #176]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4928      	ldr	r1, [pc, #160]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	4922      	ldr	r1, [pc, #136]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	491e      	ldr	r1, [pc, #120]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4918      	ldr	r1, [pc, #96]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4914      	ldr	r1, [pc, #80]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d021      	beq.n	8000e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	490e      	ldr	r1, [pc, #56]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e021      	b.n	8000e1e <HAL_GPIO_Init+0x2e2>
 8000dda:	bf00      	nop
 8000ddc:	10320000 	.word	0x10320000
 8000de0:	10310000 	.word	0x10310000
 8000de4:	10220000 	.word	0x10220000
 8000de8:	10210000 	.word	0x10210000
 8000dec:	10120000 	.word	0x10120000
 8000df0:	10110000 	.word	0x10110000
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40011400 	.word	0x40011400
 8000e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_GPIO_Init+0x304>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4909      	ldr	r1, [pc, #36]	; (8000e40 <HAL_GPIO_Init+0x304>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f ae8e 	bne.w	8000b50 <HAL_GPIO_Init+0x14>
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	372c      	adds	r7, #44	; 0x2c
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	611a      	str	r2, [r3, #16]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f806 	bl	8000ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e12b      	b.n	8001122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff f9d0 	bl	8000284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2224      	movs	r2, #36	; 0x24
 8000ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f1c:	f001 f832 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8000f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a81      	ldr	r2, [pc, #516]	; (800112c <HAL_I2C_Init+0x274>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d807      	bhi.n	8000f3c <HAL_I2C_Init+0x84>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a80      	ldr	r2, [pc, #512]	; (8001130 <HAL_I2C_Init+0x278>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	bf94      	ite	ls
 8000f34:	2301      	movls	r3, #1
 8000f36:	2300      	movhi	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	e006      	b.n	8000f4a <HAL_I2C_Init+0x92>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a7d      	ldr	r2, [pc, #500]	; (8001134 <HAL_I2C_Init+0x27c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	bf94      	ite	ls
 8000f44:	2301      	movls	r3, #1
 8000f46:	2300      	movhi	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0e7      	b.n	8001122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a78      	ldr	r2, [pc, #480]	; (8001138 <HAL_I2C_Init+0x280>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <HAL_I2C_Init+0x274>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d802      	bhi.n	8000f8c <HAL_I2C_Init+0xd4>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	e009      	b.n	8000fa0 <HAL_I2C_Init+0xe8>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a69      	ldr	r2, [pc, #420]	; (800113c <HAL_I2C_Init+0x284>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	495c      	ldr	r1, [pc, #368]	; (800112c <HAL_I2C_Init+0x274>)
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	d819      	bhi.n	8000ff4 <HAL_I2C_Init+0x13c>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1e59      	subs	r1, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fce:	1c59      	adds	r1, r3, #1
 8000fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00a      	beq.n	8000ff0 <HAL_I2C_Init+0x138>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	1e59      	subs	r1, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fee:	e051      	b.n	8001094 <HAL_I2C_Init+0x1dc>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e04f      	b.n	8001094 <HAL_I2C_Init+0x1dc>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d111      	bne.n	8001020 <HAL_I2C_Init+0x168>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	fbb0 f3f3 	udiv	r3, r0, r3
 800100e:	3301      	adds	r3, #1
 8001010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e012      	b.n	8001046 <HAL_I2C_Init+0x18e>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e58      	subs	r0, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	0099      	lsls	r1, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	fbb0 f3f3 	udiv	r3, r0, r3
 8001036:	3301      	adds	r3, #1
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_Init+0x196>
 800104a:	2301      	movs	r3, #1
 800104c:	e022      	b.n	8001094 <HAL_I2C_Init+0x1dc>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10e      	bne.n	8001074 <HAL_I2C_Init+0x1bc>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1e58      	subs	r0, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6859      	ldr	r1, [r3, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	fbb0 f3f3 	udiv	r3, r0, r3
 8001068:	3301      	adds	r3, #1
 800106a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	e00f      	b.n	8001094 <HAL_I2C_Init+0x1dc>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1e58      	subs	r0, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	0099      	lsls	r1, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	fbb0 f3f3 	udiv	r3, r0, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	6809      	ldr	r1, [r1, #0]
 8001098:	4313      	orrs	r3, r2
 800109a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6911      	ldr	r1, [r2, #16]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	4311      	orrs	r1, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	000186a0 	.word	0x000186a0
 8001130:	001e847f 	.word	0x001e847f
 8001134:	003d08ff 	.word	0x003d08ff
 8001138:	431bde83 	.word	0x431bde83
 800113c:	10624dd3 	.word	0x10624dd3

08001140 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	817b      	strh	r3, [r7, #10]
 8001150:	4613      	mov	r3, r2
 8001152:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fbb6 	bl	80008c4 <HAL_GetTick>
 8001158:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b20      	cmp	r3, #32
 8001164:	f040 80e0 	bne.w	8001328 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2319      	movs	r3, #25
 800116e:	2201      	movs	r2, #1
 8001170:	4970      	ldr	r1, [pc, #448]	; (8001334 <HAL_I2C_Master_Transmit+0x1f4>)
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 f964 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800117e:	2302      	movs	r3, #2
 8001180:	e0d3      	b.n	800132a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_I2C_Master_Transmit+0x50>
 800118c:	2302      	movs	r3, #2
 800118e:	e0cc      	b.n	800132a <HAL_I2C_Master_Transmit+0x1ea>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d007      	beq.n	80011b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2221      	movs	r2, #33	; 0x21
 80011ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2210      	movs	r2, #16
 80011d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	893a      	ldrh	r2, [r7, #8]
 80011e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4a50      	ldr	r2, [pc, #320]	; (8001338 <HAL_I2C_Master_Transmit+0x1f8>)
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011f8:	8979      	ldrh	r1, [r7, #10]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	6a3a      	ldr	r2, [r7, #32]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f89c 	bl	800133c <I2C_MasterRequestWrite>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e08d      	b.n	800132a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001224:	e066      	b.n	80012f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	6a39      	ldr	r1, [r7, #32]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 fa22 	bl	8001674 <I2C_WaitOnTXEFlagUntilTimeout>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00d      	beq.n	8001252 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b04      	cmp	r3, #4
 800123c:	d107      	bne.n	800124e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800124c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06b      	b.n	800132a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126c:	b29b      	uxth	r3, r3
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127a:	3b01      	subs	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b04      	cmp	r3, #4
 800128e:	d11b      	bne.n	80012c8 <HAL_I2C_Master_Transmit+0x188>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3b01      	subs	r3, #1
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6a39      	ldr	r1, [r7, #32]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fa19 	bl	8001704 <I2C_WaitOnBTFFlagUntilTimeout>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00d      	beq.n	80012f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d107      	bne.n	80012f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e01a      	b.n	800132a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d194      	bne.n	8001226 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2220      	movs	r2, #32
 8001310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	e000      	b.n	800132a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001328:	2302      	movs	r3, #2
  }
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	00100002 	.word	0x00100002
 8001338:	ffff0000 	.word	0xffff0000

0800133c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	460b      	mov	r3, r1
 800134a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b08      	cmp	r3, #8
 8001356:	d006      	beq.n	8001366 <I2C_MasterRequestWrite+0x2a>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d003      	beq.n	8001366 <I2C_MasterRequestWrite+0x2a>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001364:	d108      	bne.n	8001378 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00b      	b.n	8001390 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	2b12      	cmp	r3, #18
 800137e:	d107      	bne.n	8001390 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800138e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f84f 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00d      	beq.n	80013c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b6:	d103      	bne.n	80013c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e035      	b.n	8001430 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013cc:	d108      	bne.n	80013e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013ce:	897b      	ldrh	r3, [r7, #10]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	e01b      	b.n	8001418 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013e0:	897b      	ldrh	r3, [r7, #10]
 80013e2:	11db      	asrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f003 0306 	and.w	r3, r3, #6
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f063 030f 	orn	r3, r3, #15
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	490e      	ldr	r1, [pc, #56]	; (8001438 <I2C_MasterRequestWrite+0xfc>)
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f898 	bl	8001534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e010      	b.n	8001430 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800140e:	897b      	ldrh	r3, [r7, #10]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <I2C_MasterRequestWrite+0x100>)
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f888 	bl	8001534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	00010008 	.word	0x00010008
 800143c:	00010002 	.word	0x00010002

08001440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001450:	e048      	b.n	80014e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d044      	beq.n	80014e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800145a:	f7ff fa33 	bl	80008c4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d302      	bcc.n	8001470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d139      	bne.n	80014e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10d      	bne.n	8001496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	43da      	mvns	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4013      	ands	r3, r2
 8001486:	b29b      	uxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	e00c      	b.n	80014b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	43da      	mvns	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	4013      	ands	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d116      	bne.n	80014e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e023      	b.n	800152c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10d      	bne.n	800150a <I2C_WaitOnFlagUntilTimeout+0xca>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4013      	ands	r3, r2
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	e00c      	b.n	8001524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	43da      	mvns	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4013      	ands	r3, r2
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	429a      	cmp	r2, r3
 8001528:	d093      	beq.n	8001452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001542:	e071      	b.n	8001628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d123      	bne.n	800159c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800156c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f043 0204 	orr.w	r2, r3, #4
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e067      	b.n	800166c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a2:	d041      	beq.n	8001628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a4:	f7ff f98e 	bl	80008c4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d302      	bcc.n	80015ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d136      	bne.n	8001628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	0c1b      	lsrs	r3, r3, #16
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10c      	bne.n	80015de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4013      	ands	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	e00b      	b.n	80015f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4013      	ands	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d016      	beq.n	8001628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0220 	orr.w	r2, r3, #32
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e021      	b.n	800166c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10c      	bne.n	800164c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	43da      	mvns	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	4013      	ands	r3, r2
 800163e:	b29b      	uxth	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e00b      	b.n	8001664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4013      	ands	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f af6d 	bne.w	8001544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001680:	e034      	b.n	80016ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f886 	bl	8001794 <I2C_IsAcknowledgeFailed>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e034      	b.n	80016fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d028      	beq.n	80016ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169a:	f7ff f913 	bl	80008c4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d302      	bcc.n	80016b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d11d      	bne.n	80016ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	2b80      	cmp	r3, #128	; 0x80
 80016bc:	d016      	beq.n	80016ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f043 0220 	orr.w	r2, r3, #32
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e007      	b.n	80016fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b80      	cmp	r3, #128	; 0x80
 80016f8:	d1c3      	bne.n	8001682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001710:	e034      	b.n	800177c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f83e 	bl	8001794 <I2C_IsAcknowledgeFailed>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e034      	b.n	800178c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d028      	beq.n	800177c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172a:	f7ff f8cb 	bl	80008c4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	429a      	cmp	r2, r3
 8001738:	d302      	bcc.n	8001740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d11d      	bne.n	800177c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b04      	cmp	r3, #4
 800174c:	d016      	beq.n	800177c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0220 	orr.w	r2, r3, #32
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e007      	b.n	800178c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b04      	cmp	r3, #4
 8001788:	d1c3      	bne.n	8001712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d11b      	bne.n	80017e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f043 0204 	orr.w	r2, r3, #4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e272      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d00c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06c      	beq.n	800191c <HAL_RCC_OscConfig+0x12c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d168      	bne.n	800191c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e24c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x76>
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e02e      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xbc>
 8001892:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a71      	ldr	r2, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7fe fffa 	bl	80008c4 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7fe fff6 	bl	80008c4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e200      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xe4>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe ffe6 	bl	80008c4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7fe ffe2 	bl	80008c4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1ec      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x10c>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7fe ff9b 	bl	80008c4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7fe ff97 	bl	80008c4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe ff7a 	bl	80008c4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7fe ff76 	bl	80008c4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e180      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d019      	beq.n	8001a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7fe ff5a 	bl	80008c4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7fe ff56 	bl	80008c4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e160      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 face 	bl	8001fd4 <RCC_Delay>
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7fe ff40 	bl	80008c4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7fe ff3c 	bl	80008c4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e146      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a6 	beq.w	8001bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7fe fefd 	bl	80008c4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7fe fef9 	bl	80008c4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e103      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x312>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x356>
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fead 	bl	80008c4 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe fea9 	bl	80008c4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x37e>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7fe fe97 	bl	80008c4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7fe fe93 	bl	80008c4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d061      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d146      	bne.n	8001c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fe67 	bl	80008c4 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7fe fe63 	bl	80008c4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e06d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a19      	ldr	r1, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	430b      	orrs	r3, r1
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe fe37 	bl	80008c4 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fe33 	bl	80008c4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e03d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46a>
 8001c78:	e035      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7fe fe20 	bl	80008c4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe fe1c 	bl	80008c4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e026      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x498>
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x500>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d040      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e073      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06b      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4936      	ldr	r1, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7fe fd6e 	bl	80008c4 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7fe fd6a 	bl	80008c4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e053      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fccc 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08002b50 	.word	0x08002b50
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x36>
 8001ef6:	e027      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	e027      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0c5b      	lsrs	r3, r3, #17
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	fb03 f202 	mul.w	r2, r3, r2
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e004      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
      break;
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	613b      	str	r3, [r7, #16]
      break;
 8001f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4e:	693b      	ldr	r3, [r7, #16]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	08002b68 	.word	0x08002b68
 8001f68:	08002b78 	.word	0x08002b78
 8001f6c:	003d0900 	.word	0x003d0900

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff2 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08002b60 	.word	0x08002b60

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0adb      	lsrs	r3, r3, #11
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08002b60 	.word	0x08002b60

08001fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <RCC_Delay+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <RCC_Delay+0x38>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a5b      	lsrs	r3, r3, #9
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff0:	bf00      	nop
  }
  while (Delay --);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	60fa      	str	r2, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f9      	bne.n	8001ff0 <RCC_Delay+0x1c>
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000000 	.word	0x20000000
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e042      	b.n	80020a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fb88 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f82b 	bl	80020b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020ea:	f023 030c 	bic.w	r3, r3, #12
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <UART_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002118:	f7ff ff48 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	e002      	b.n	8002126 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002120:	f7ff ff30 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8002124:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009a      	lsls	r2, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <UART_SetConfig+0x118>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	0119      	lsls	r1, r3, #4
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb2 f2f3 	udiv	r2, r2, r3
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <UART_SetConfig+0x118>)
 800215e:	fba3 0302 	umull	r0, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2064      	movs	r0, #100	; 0x64
 8002166:	fb00 f303 	mul.w	r3, r0, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	3332      	adds	r3, #50	; 0x32
 8002170:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <UART_SetConfig+0x118>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217c:	4419      	add	r1, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009a      	lsls	r2, r3, #2
 8002188:	441a      	add	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fbb2 f2f3 	udiv	r2, r2, r3
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <UART_SetConfig+0x118>)
 8002196:	fba3 0302 	umull	r0, r3, r3, r2
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2064      	movs	r0, #100	; 0x64
 800219e:	fb00 f303 	mul.w	r3, r0, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	3332      	adds	r3, #50	; 0x32
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <UART_SetConfig+0x118>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	440a      	add	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40013800 	.word	0x40013800
 80021c8:	51eb851f 	.word	0x51eb851f

080021cc <siprintf>:
 80021cc:	b40e      	push	{r1, r2, r3}
 80021ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021d2:	b500      	push	{lr}
 80021d4:	b09c      	sub	sp, #112	; 0x70
 80021d6:	ab1d      	add	r3, sp, #116	; 0x74
 80021d8:	9002      	str	r0, [sp, #8]
 80021da:	9006      	str	r0, [sp, #24]
 80021dc:	9107      	str	r1, [sp, #28]
 80021de:	9104      	str	r1, [sp, #16]
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <siprintf+0x38>)
 80021e2:	4909      	ldr	r1, [pc, #36]	; (8002208 <siprintf+0x3c>)
 80021e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80021e8:	9105      	str	r1, [sp, #20]
 80021ea:	6800      	ldr	r0, [r0, #0]
 80021ec:	a902      	add	r1, sp, #8
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	f000 f98e 	bl	8002510 <_svfiprintf_r>
 80021f4:	2200      	movs	r2, #0
 80021f6:	9b02      	ldr	r3, [sp, #8]
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	b01c      	add	sp, #112	; 0x70
 80021fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002200:	b003      	add	sp, #12
 8002202:	4770      	bx	lr
 8002204:	20000058 	.word	0x20000058
 8002208:	ffff0208 	.word	0xffff0208

0800220c <memset>:
 800220c:	4603      	mov	r3, r0
 800220e:	4402      	add	r2, r0
 8002210:	4293      	cmp	r3, r2
 8002212:	d100      	bne.n	8002216 <memset+0xa>
 8002214:	4770      	bx	lr
 8002216:	f803 1b01 	strb.w	r1, [r3], #1
 800221a:	e7f9      	b.n	8002210 <memset+0x4>

0800221c <__errno>:
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <__errno+0x8>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000058 	.word	0x20000058

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	2600      	movs	r6, #0
 800222c:	4d0c      	ldr	r5, [pc, #48]	; (8002260 <__libc_init_array+0x38>)
 800222e:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 8002230:	1b64      	subs	r4, r4, r5
 8002232:	10a4      	asrs	r4, r4, #2
 8002234:	42a6      	cmp	r6, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	f000 fc7a 	bl	8002b30 <_init>
 800223c:	2600      	movs	r6, #0
 800223e:	4d0a      	ldr	r5, [pc, #40]	; (8002268 <__libc_init_array+0x40>)
 8002240:	4c0a      	ldr	r4, [pc, #40]	; (800226c <__libc_init_array+0x44>)
 8002242:	1b64      	subs	r4, r4, r5
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	42a6      	cmp	r6, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002250:	4798      	blx	r3
 8002252:	3601      	adds	r6, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f855 3b04 	ldr.w	r3, [r5], #4
 800225a:	4798      	blx	r3
 800225c:	3601      	adds	r6, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	08002bb0 	.word	0x08002bb0
 8002264:	08002bb0 	.word	0x08002bb0
 8002268:	08002bb0 	.word	0x08002bb0
 800226c:	08002bb4 	.word	0x08002bb4

08002270 <__retarget_lock_acquire_recursive>:
 8002270:	4770      	bx	lr

08002272 <__retarget_lock_release_recursive>:
 8002272:	4770      	bx	lr

08002274 <_free_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4605      	mov	r5, r0
 8002278:	2900      	cmp	r1, #0
 800227a:	d040      	beq.n	80022fe <_free_r+0x8a>
 800227c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002280:	1f0c      	subs	r4, r1, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	bfb8      	it	lt
 8002286:	18e4      	addlt	r4, r4, r3
 8002288:	f000 f8dc 	bl	8002444 <__malloc_lock>
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <_free_r+0x8c>)
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	b933      	cbnz	r3, 80022a0 <_free_r+0x2c>
 8002292:	6063      	str	r3, [r4, #4]
 8002294:	6014      	str	r4, [r2, #0]
 8002296:	4628      	mov	r0, r5
 8002298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800229c:	f000 b8d8 	b.w	8002450 <__malloc_unlock>
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	d908      	bls.n	80022b6 <_free_r+0x42>
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	1821      	adds	r1, r4, r0
 80022a8:	428b      	cmp	r3, r1
 80022aa:	bf01      	itttt	eq
 80022ac:	6819      	ldreq	r1, [r3, #0]
 80022ae:	685b      	ldreq	r3, [r3, #4]
 80022b0:	1809      	addeq	r1, r1, r0
 80022b2:	6021      	streq	r1, [r4, #0]
 80022b4:	e7ed      	b.n	8002292 <_free_r+0x1e>
 80022b6:	461a      	mov	r2, r3
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	b10b      	cbz	r3, 80022c0 <_free_r+0x4c>
 80022bc:	42a3      	cmp	r3, r4
 80022be:	d9fa      	bls.n	80022b6 <_free_r+0x42>
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	1850      	adds	r0, r2, r1
 80022c4:	42a0      	cmp	r0, r4
 80022c6:	d10b      	bne.n	80022e0 <_free_r+0x6c>
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	4401      	add	r1, r0
 80022cc:	1850      	adds	r0, r2, r1
 80022ce:	4283      	cmp	r3, r0
 80022d0:	6011      	str	r1, [r2, #0]
 80022d2:	d1e0      	bne.n	8002296 <_free_r+0x22>
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4408      	add	r0, r1
 80022da:	6010      	str	r0, [r2, #0]
 80022dc:	6053      	str	r3, [r2, #4]
 80022de:	e7da      	b.n	8002296 <_free_r+0x22>
 80022e0:	d902      	bls.n	80022e8 <_free_r+0x74>
 80022e2:	230c      	movs	r3, #12
 80022e4:	602b      	str	r3, [r5, #0]
 80022e6:	e7d6      	b.n	8002296 <_free_r+0x22>
 80022e8:	6820      	ldr	r0, [r4, #0]
 80022ea:	1821      	adds	r1, r4, r0
 80022ec:	428b      	cmp	r3, r1
 80022ee:	bf01      	itttt	eq
 80022f0:	6819      	ldreq	r1, [r3, #0]
 80022f2:	685b      	ldreq	r3, [r3, #4]
 80022f4:	1809      	addeq	r1, r1, r0
 80022f6:	6021      	streq	r1, [r4, #0]
 80022f8:	6063      	str	r3, [r4, #4]
 80022fa:	6054      	str	r4, [r2, #4]
 80022fc:	e7cb      	b.n	8002296 <_free_r+0x22>
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	20000280 	.word	0x20000280

08002304 <sbrk_aligned>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	4e0e      	ldr	r6, [pc, #56]	; (8002340 <sbrk_aligned+0x3c>)
 8002308:	460c      	mov	r4, r1
 800230a:	6831      	ldr	r1, [r6, #0]
 800230c:	4605      	mov	r5, r0
 800230e:	b911      	cbnz	r1, 8002316 <sbrk_aligned+0x12>
 8002310:	f000 fbaa 	bl	8002a68 <_sbrk_r>
 8002314:	6030      	str	r0, [r6, #0]
 8002316:	4621      	mov	r1, r4
 8002318:	4628      	mov	r0, r5
 800231a:	f000 fba5 	bl	8002a68 <_sbrk_r>
 800231e:	1c43      	adds	r3, r0, #1
 8002320:	d00a      	beq.n	8002338 <sbrk_aligned+0x34>
 8002322:	1cc4      	adds	r4, r0, #3
 8002324:	f024 0403 	bic.w	r4, r4, #3
 8002328:	42a0      	cmp	r0, r4
 800232a:	d007      	beq.n	800233c <sbrk_aligned+0x38>
 800232c:	1a21      	subs	r1, r4, r0
 800232e:	4628      	mov	r0, r5
 8002330:	f000 fb9a 	bl	8002a68 <_sbrk_r>
 8002334:	3001      	adds	r0, #1
 8002336:	d101      	bne.n	800233c <sbrk_aligned+0x38>
 8002338:	f04f 34ff 	mov.w	r4, #4294967295
 800233c:	4620      	mov	r0, r4
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	20000284 	.word	0x20000284

08002344 <_malloc_r>:
 8002344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002348:	1ccd      	adds	r5, r1, #3
 800234a:	f025 0503 	bic.w	r5, r5, #3
 800234e:	3508      	adds	r5, #8
 8002350:	2d0c      	cmp	r5, #12
 8002352:	bf38      	it	cc
 8002354:	250c      	movcc	r5, #12
 8002356:	2d00      	cmp	r5, #0
 8002358:	4607      	mov	r7, r0
 800235a:	db01      	blt.n	8002360 <_malloc_r+0x1c>
 800235c:	42a9      	cmp	r1, r5
 800235e:	d905      	bls.n	800236c <_malloc_r+0x28>
 8002360:	230c      	movs	r3, #12
 8002362:	2600      	movs	r6, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4630      	mov	r0, r6
 8002368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800236c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002440 <_malloc_r+0xfc>
 8002370:	f000 f868 	bl	8002444 <__malloc_lock>
 8002374:	f8d8 3000 	ldr.w	r3, [r8]
 8002378:	461c      	mov	r4, r3
 800237a:	bb5c      	cbnz	r4, 80023d4 <_malloc_r+0x90>
 800237c:	4629      	mov	r1, r5
 800237e:	4638      	mov	r0, r7
 8002380:	f7ff ffc0 	bl	8002304 <sbrk_aligned>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	4604      	mov	r4, r0
 8002388:	d155      	bne.n	8002436 <_malloc_r+0xf2>
 800238a:	f8d8 4000 	ldr.w	r4, [r8]
 800238e:	4626      	mov	r6, r4
 8002390:	2e00      	cmp	r6, #0
 8002392:	d145      	bne.n	8002420 <_malloc_r+0xdc>
 8002394:	2c00      	cmp	r4, #0
 8002396:	d048      	beq.n	800242a <_malloc_r+0xe6>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	4631      	mov	r1, r6
 800239c:	4638      	mov	r0, r7
 800239e:	eb04 0903 	add.w	r9, r4, r3
 80023a2:	f000 fb61 	bl	8002a68 <_sbrk_r>
 80023a6:	4581      	cmp	r9, r0
 80023a8:	d13f      	bne.n	800242a <_malloc_r+0xe6>
 80023aa:	6821      	ldr	r1, [r4, #0]
 80023ac:	4638      	mov	r0, r7
 80023ae:	1a6d      	subs	r5, r5, r1
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7ff ffa7 	bl	8002304 <sbrk_aligned>
 80023b6:	3001      	adds	r0, #1
 80023b8:	d037      	beq.n	800242a <_malloc_r+0xe6>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	442b      	add	r3, r5
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	f8d8 3000 	ldr.w	r3, [r8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d038      	beq.n	800243a <_malloc_r+0xf6>
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	42a2      	cmp	r2, r4
 80023cc:	d12b      	bne.n	8002426 <_malloc_r+0xe2>
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e00f      	b.n	80023f4 <_malloc_r+0xb0>
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	1b52      	subs	r2, r2, r5
 80023d8:	d41f      	bmi.n	800241a <_malloc_r+0xd6>
 80023da:	2a0b      	cmp	r2, #11
 80023dc:	d917      	bls.n	800240e <_malloc_r+0xca>
 80023de:	1961      	adds	r1, r4, r5
 80023e0:	42a3      	cmp	r3, r4
 80023e2:	6025      	str	r5, [r4, #0]
 80023e4:	bf18      	it	ne
 80023e6:	6059      	strne	r1, [r3, #4]
 80023e8:	6863      	ldr	r3, [r4, #4]
 80023ea:	bf08      	it	eq
 80023ec:	f8c8 1000 	streq.w	r1, [r8]
 80023f0:	5162      	str	r2, [r4, r5]
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	4638      	mov	r0, r7
 80023f6:	f104 060b 	add.w	r6, r4, #11
 80023fa:	f000 f829 	bl	8002450 <__malloc_unlock>
 80023fe:	f026 0607 	bic.w	r6, r6, #7
 8002402:	1d23      	adds	r3, r4, #4
 8002404:	1af2      	subs	r2, r6, r3
 8002406:	d0ae      	beq.n	8002366 <_malloc_r+0x22>
 8002408:	1b9b      	subs	r3, r3, r6
 800240a:	50a3      	str	r3, [r4, r2]
 800240c:	e7ab      	b.n	8002366 <_malloc_r+0x22>
 800240e:	42a3      	cmp	r3, r4
 8002410:	6862      	ldr	r2, [r4, #4]
 8002412:	d1dd      	bne.n	80023d0 <_malloc_r+0x8c>
 8002414:	f8c8 2000 	str.w	r2, [r8]
 8002418:	e7ec      	b.n	80023f4 <_malloc_r+0xb0>
 800241a:	4623      	mov	r3, r4
 800241c:	6864      	ldr	r4, [r4, #4]
 800241e:	e7ac      	b.n	800237a <_malloc_r+0x36>
 8002420:	4634      	mov	r4, r6
 8002422:	6876      	ldr	r6, [r6, #4]
 8002424:	e7b4      	b.n	8002390 <_malloc_r+0x4c>
 8002426:	4613      	mov	r3, r2
 8002428:	e7cc      	b.n	80023c4 <_malloc_r+0x80>
 800242a:	230c      	movs	r3, #12
 800242c:	4638      	mov	r0, r7
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	f000 f80e 	bl	8002450 <__malloc_unlock>
 8002434:	e797      	b.n	8002366 <_malloc_r+0x22>
 8002436:	6025      	str	r5, [r4, #0]
 8002438:	e7dc      	b.n	80023f4 <_malloc_r+0xb0>
 800243a:	605b      	str	r3, [r3, #4]
 800243c:	deff      	udf	#255	; 0xff
 800243e:	bf00      	nop
 8002440:	20000280 	.word	0x20000280

08002444 <__malloc_lock>:
 8002444:	4801      	ldr	r0, [pc, #4]	; (800244c <__malloc_lock+0x8>)
 8002446:	f7ff bf13 	b.w	8002270 <__retarget_lock_acquire_recursive>
 800244a:	bf00      	nop
 800244c:	2000027c 	.word	0x2000027c

08002450 <__malloc_unlock>:
 8002450:	4801      	ldr	r0, [pc, #4]	; (8002458 <__malloc_unlock+0x8>)
 8002452:	f7ff bf0e 	b.w	8002272 <__retarget_lock_release_recursive>
 8002456:	bf00      	nop
 8002458:	2000027c 	.word	0x2000027c

0800245c <__ssputs_r>:
 800245c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002460:	461f      	mov	r7, r3
 8002462:	688e      	ldr	r6, [r1, #8]
 8002464:	4682      	mov	sl, r0
 8002466:	42be      	cmp	r6, r7
 8002468:	460c      	mov	r4, r1
 800246a:	4690      	mov	r8, r2
 800246c:	680b      	ldr	r3, [r1, #0]
 800246e:	d82c      	bhi.n	80024ca <__ssputs_r+0x6e>
 8002470:	898a      	ldrh	r2, [r1, #12]
 8002472:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002476:	d026      	beq.n	80024c6 <__ssputs_r+0x6a>
 8002478:	6965      	ldr	r5, [r4, #20]
 800247a:	6909      	ldr	r1, [r1, #16]
 800247c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002480:	eba3 0901 	sub.w	r9, r3, r1
 8002484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002488:	1c7b      	adds	r3, r7, #1
 800248a:	444b      	add	r3, r9
 800248c:	106d      	asrs	r5, r5, #1
 800248e:	429d      	cmp	r5, r3
 8002490:	bf38      	it	cc
 8002492:	461d      	movcc	r5, r3
 8002494:	0553      	lsls	r3, r2, #21
 8002496:	d527      	bpl.n	80024e8 <__ssputs_r+0x8c>
 8002498:	4629      	mov	r1, r5
 800249a:	f7ff ff53 	bl	8002344 <_malloc_r>
 800249e:	4606      	mov	r6, r0
 80024a0:	b360      	cbz	r0, 80024fc <__ssputs_r+0xa0>
 80024a2:	464a      	mov	r2, r9
 80024a4:	6921      	ldr	r1, [r4, #16]
 80024a6:	f000 fafd 	bl	8002aa4 <memcpy>
 80024aa:	89a3      	ldrh	r3, [r4, #12]
 80024ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	81a3      	strh	r3, [r4, #12]
 80024b6:	6126      	str	r6, [r4, #16]
 80024b8:	444e      	add	r6, r9
 80024ba:	6026      	str	r6, [r4, #0]
 80024bc:	463e      	mov	r6, r7
 80024be:	6165      	str	r5, [r4, #20]
 80024c0:	eba5 0509 	sub.w	r5, r5, r9
 80024c4:	60a5      	str	r5, [r4, #8]
 80024c6:	42be      	cmp	r6, r7
 80024c8:	d900      	bls.n	80024cc <__ssputs_r+0x70>
 80024ca:	463e      	mov	r6, r7
 80024cc:	4632      	mov	r2, r6
 80024ce:	4641      	mov	r1, r8
 80024d0:	6820      	ldr	r0, [r4, #0]
 80024d2:	f000 faaf 	bl	8002a34 <memmove>
 80024d6:	2000      	movs	r0, #0
 80024d8:	68a3      	ldr	r3, [r4, #8]
 80024da:	1b9b      	subs	r3, r3, r6
 80024dc:	60a3      	str	r3, [r4, #8]
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	4433      	add	r3, r6
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e8:	462a      	mov	r2, r5
 80024ea:	f000 fae9 	bl	8002ac0 <_realloc_r>
 80024ee:	4606      	mov	r6, r0
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d1e0      	bne.n	80024b6 <__ssputs_r+0x5a>
 80024f4:	4650      	mov	r0, sl
 80024f6:	6921      	ldr	r1, [r4, #16]
 80024f8:	f7ff febc 	bl	8002274 <_free_r>
 80024fc:	230c      	movs	r3, #12
 80024fe:	f8ca 3000 	str.w	r3, [sl]
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	81a3      	strh	r3, [r4, #12]
 800250e:	e7e9      	b.n	80024e4 <__ssputs_r+0x88>

08002510 <_svfiprintf_r>:
 8002510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002514:	4698      	mov	r8, r3
 8002516:	898b      	ldrh	r3, [r1, #12]
 8002518:	4607      	mov	r7, r0
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	460d      	mov	r5, r1
 800251e:	4614      	mov	r4, r2
 8002520:	b09d      	sub	sp, #116	; 0x74
 8002522:	d50e      	bpl.n	8002542 <_svfiprintf_r+0x32>
 8002524:	690b      	ldr	r3, [r1, #16]
 8002526:	b963      	cbnz	r3, 8002542 <_svfiprintf_r+0x32>
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	f7ff ff0b 	bl	8002344 <_malloc_r>
 800252e:	6028      	str	r0, [r5, #0]
 8002530:	6128      	str	r0, [r5, #16]
 8002532:	b920      	cbnz	r0, 800253e <_svfiprintf_r+0x2e>
 8002534:	230c      	movs	r3, #12
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	e0d0      	b.n	80026e0 <_svfiprintf_r+0x1d0>
 800253e:	2340      	movs	r3, #64	; 0x40
 8002540:	616b      	str	r3, [r5, #20]
 8002542:	2300      	movs	r3, #0
 8002544:	9309      	str	r3, [sp, #36]	; 0x24
 8002546:	2320      	movs	r3, #32
 8002548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800254c:	2330      	movs	r3, #48	; 0x30
 800254e:	f04f 0901 	mov.w	r9, #1
 8002552:	f8cd 800c 	str.w	r8, [sp, #12]
 8002556:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80026f8 <_svfiprintf_r+0x1e8>
 800255a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800255e:	4623      	mov	r3, r4
 8002560:	469a      	mov	sl, r3
 8002562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002566:	b10a      	cbz	r2, 800256c <_svfiprintf_r+0x5c>
 8002568:	2a25      	cmp	r2, #37	; 0x25
 800256a:	d1f9      	bne.n	8002560 <_svfiprintf_r+0x50>
 800256c:	ebba 0b04 	subs.w	fp, sl, r4
 8002570:	d00b      	beq.n	800258a <_svfiprintf_r+0x7a>
 8002572:	465b      	mov	r3, fp
 8002574:	4622      	mov	r2, r4
 8002576:	4629      	mov	r1, r5
 8002578:	4638      	mov	r0, r7
 800257a:	f7ff ff6f 	bl	800245c <__ssputs_r>
 800257e:	3001      	adds	r0, #1
 8002580:	f000 80a9 	beq.w	80026d6 <_svfiprintf_r+0x1c6>
 8002584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002586:	445a      	add	r2, fp
 8002588:	9209      	str	r2, [sp, #36]	; 0x24
 800258a:	f89a 3000 	ldrb.w	r3, [sl]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a1 	beq.w	80026d6 <_svfiprintf_r+0x1c6>
 8002594:	2300      	movs	r3, #0
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800259e:	f10a 0a01 	add.w	sl, sl, #1
 80025a2:	9304      	str	r3, [sp, #16]
 80025a4:	9307      	str	r3, [sp, #28]
 80025a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025aa:	931a      	str	r3, [sp, #104]	; 0x68
 80025ac:	4654      	mov	r4, sl
 80025ae:	2205      	movs	r2, #5
 80025b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025b4:	4850      	ldr	r0, [pc, #320]	; (80026f8 <_svfiprintf_r+0x1e8>)
 80025b6:	f000 fa67 	bl	8002a88 <memchr>
 80025ba:	9a04      	ldr	r2, [sp, #16]
 80025bc:	b9d8      	cbnz	r0, 80025f6 <_svfiprintf_r+0xe6>
 80025be:	06d0      	lsls	r0, r2, #27
 80025c0:	bf44      	itt	mi
 80025c2:	2320      	movmi	r3, #32
 80025c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025c8:	0711      	lsls	r1, r2, #28
 80025ca:	bf44      	itt	mi
 80025cc:	232b      	movmi	r3, #43	; 0x2b
 80025ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025d2:	f89a 3000 	ldrb.w	r3, [sl]
 80025d6:	2b2a      	cmp	r3, #42	; 0x2a
 80025d8:	d015      	beq.n	8002606 <_svfiprintf_r+0xf6>
 80025da:	4654      	mov	r4, sl
 80025dc:	2000      	movs	r0, #0
 80025de:	f04f 0c0a 	mov.w	ip, #10
 80025e2:	9a07      	ldr	r2, [sp, #28]
 80025e4:	4621      	mov	r1, r4
 80025e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025ea:	3b30      	subs	r3, #48	; 0x30
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d94d      	bls.n	800268c <_svfiprintf_r+0x17c>
 80025f0:	b1b0      	cbz	r0, 8002620 <_svfiprintf_r+0x110>
 80025f2:	9207      	str	r2, [sp, #28]
 80025f4:	e014      	b.n	8002620 <_svfiprintf_r+0x110>
 80025f6:	eba0 0308 	sub.w	r3, r0, r8
 80025fa:	fa09 f303 	lsl.w	r3, r9, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	46a2      	mov	sl, r4
 8002602:	9304      	str	r3, [sp, #16]
 8002604:	e7d2      	b.n	80025ac <_svfiprintf_r+0x9c>
 8002606:	9b03      	ldr	r3, [sp, #12]
 8002608:	1d19      	adds	r1, r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	9103      	str	r1, [sp, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	bfbb      	ittet	lt
 8002612:	425b      	neglt	r3, r3
 8002614:	f042 0202 	orrlt.w	r2, r2, #2
 8002618:	9307      	strge	r3, [sp, #28]
 800261a:	9307      	strlt	r3, [sp, #28]
 800261c:	bfb8      	it	lt
 800261e:	9204      	strlt	r2, [sp, #16]
 8002620:	7823      	ldrb	r3, [r4, #0]
 8002622:	2b2e      	cmp	r3, #46	; 0x2e
 8002624:	d10c      	bne.n	8002640 <_svfiprintf_r+0x130>
 8002626:	7863      	ldrb	r3, [r4, #1]
 8002628:	2b2a      	cmp	r3, #42	; 0x2a
 800262a:	d134      	bne.n	8002696 <_svfiprintf_r+0x186>
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	3402      	adds	r4, #2
 8002630:	1d1a      	adds	r2, r3, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	9203      	str	r2, [sp, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	bfb8      	it	lt
 800263a:	f04f 33ff 	movlt.w	r3, #4294967295
 800263e:	9305      	str	r3, [sp, #20]
 8002640:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80026fc <_svfiprintf_r+0x1ec>
 8002644:	2203      	movs	r2, #3
 8002646:	4650      	mov	r0, sl
 8002648:	7821      	ldrb	r1, [r4, #0]
 800264a:	f000 fa1d 	bl	8002a88 <memchr>
 800264e:	b138      	cbz	r0, 8002660 <_svfiprintf_r+0x150>
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	9b04      	ldr	r3, [sp, #16]
 8002654:	eba0 000a 	sub.w	r0, r0, sl
 8002658:	4082      	lsls	r2, r0
 800265a:	4313      	orrs	r3, r2
 800265c:	3401      	adds	r4, #1
 800265e:	9304      	str	r3, [sp, #16]
 8002660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002664:	2206      	movs	r2, #6
 8002666:	4826      	ldr	r0, [pc, #152]	; (8002700 <_svfiprintf_r+0x1f0>)
 8002668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800266c:	f000 fa0c 	bl	8002a88 <memchr>
 8002670:	2800      	cmp	r0, #0
 8002672:	d038      	beq.n	80026e6 <_svfiprintf_r+0x1d6>
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <_svfiprintf_r+0x1f4>)
 8002676:	bb1b      	cbnz	r3, 80026c0 <_svfiprintf_r+0x1b0>
 8002678:	9b03      	ldr	r3, [sp, #12]
 800267a:	3307      	adds	r3, #7
 800267c:	f023 0307 	bic.w	r3, r3, #7
 8002680:	3308      	adds	r3, #8
 8002682:	9303      	str	r3, [sp, #12]
 8002684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002686:	4433      	add	r3, r6
 8002688:	9309      	str	r3, [sp, #36]	; 0x24
 800268a:	e768      	b.n	800255e <_svfiprintf_r+0x4e>
 800268c:	460c      	mov	r4, r1
 800268e:	2001      	movs	r0, #1
 8002690:	fb0c 3202 	mla	r2, ip, r2, r3
 8002694:	e7a6      	b.n	80025e4 <_svfiprintf_r+0xd4>
 8002696:	2300      	movs	r3, #0
 8002698:	f04f 0c0a 	mov.w	ip, #10
 800269c:	4619      	mov	r1, r3
 800269e:	3401      	adds	r4, #1
 80026a0:	9305      	str	r3, [sp, #20]
 80026a2:	4620      	mov	r0, r4
 80026a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026a8:	3a30      	subs	r2, #48	; 0x30
 80026aa:	2a09      	cmp	r2, #9
 80026ac:	d903      	bls.n	80026b6 <_svfiprintf_r+0x1a6>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0c6      	beq.n	8002640 <_svfiprintf_r+0x130>
 80026b2:	9105      	str	r1, [sp, #20]
 80026b4:	e7c4      	b.n	8002640 <_svfiprintf_r+0x130>
 80026b6:	4604      	mov	r4, r0
 80026b8:	2301      	movs	r3, #1
 80026ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80026be:	e7f0      	b.n	80026a2 <_svfiprintf_r+0x192>
 80026c0:	ab03      	add	r3, sp, #12
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	462a      	mov	r2, r5
 80026c6:	4638      	mov	r0, r7
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <_svfiprintf_r+0x1f8>)
 80026ca:	a904      	add	r1, sp, #16
 80026cc:	f3af 8000 	nop.w
 80026d0:	1c42      	adds	r2, r0, #1
 80026d2:	4606      	mov	r6, r0
 80026d4:	d1d6      	bne.n	8002684 <_svfiprintf_r+0x174>
 80026d6:	89ab      	ldrh	r3, [r5, #12]
 80026d8:	065b      	lsls	r3, r3, #25
 80026da:	f53f af2d 	bmi.w	8002538 <_svfiprintf_r+0x28>
 80026de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e0:	b01d      	add	sp, #116	; 0x74
 80026e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e6:	ab03      	add	r3, sp, #12
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	462a      	mov	r2, r5
 80026ec:	4638      	mov	r0, r7
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <_svfiprintf_r+0x1f8>)
 80026f0:	a904      	add	r1, sp, #16
 80026f2:	f000 f87d 	bl	80027f0 <_printf_i>
 80026f6:	e7eb      	b.n	80026d0 <_svfiprintf_r+0x1c0>
 80026f8:	08002b7a 	.word	0x08002b7a
 80026fc:	08002b80 	.word	0x08002b80
 8002700:	08002b84 	.word	0x08002b84
 8002704:	00000000 	.word	0x00000000
 8002708:	0800245d 	.word	0x0800245d

0800270c <_printf_common>:
 800270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	4616      	mov	r6, r2
 8002712:	4699      	mov	r9, r3
 8002714:	688a      	ldr	r2, [r1, #8]
 8002716:	690b      	ldr	r3, [r1, #16]
 8002718:	4607      	mov	r7, r0
 800271a:	4293      	cmp	r3, r2
 800271c:	bfb8      	it	lt
 800271e:	4613      	movlt	r3, r2
 8002720:	6033      	str	r3, [r6, #0]
 8002722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002726:	460c      	mov	r4, r1
 8002728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800272c:	b10a      	cbz	r2, 8002732 <_printf_common+0x26>
 800272e:	3301      	adds	r3, #1
 8002730:	6033      	str	r3, [r6, #0]
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	0699      	lsls	r1, r3, #26
 8002736:	bf42      	ittt	mi
 8002738:	6833      	ldrmi	r3, [r6, #0]
 800273a:	3302      	addmi	r3, #2
 800273c:	6033      	strmi	r3, [r6, #0]
 800273e:	6825      	ldr	r5, [r4, #0]
 8002740:	f015 0506 	ands.w	r5, r5, #6
 8002744:	d106      	bne.n	8002754 <_printf_common+0x48>
 8002746:	f104 0a19 	add.w	sl, r4, #25
 800274a:	68e3      	ldr	r3, [r4, #12]
 800274c:	6832      	ldr	r2, [r6, #0]
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	42ab      	cmp	r3, r5
 8002752:	dc2b      	bgt.n	80027ac <_printf_common+0xa0>
 8002754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002758:	1e13      	subs	r3, r2, #0
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	bf18      	it	ne
 800275e:	2301      	movne	r3, #1
 8002760:	0692      	lsls	r2, r2, #26
 8002762:	d430      	bmi.n	80027c6 <_printf_common+0xba>
 8002764:	4649      	mov	r1, r9
 8002766:	4638      	mov	r0, r7
 8002768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800276c:	47c0      	blx	r8
 800276e:	3001      	adds	r0, #1
 8002770:	d023      	beq.n	80027ba <_printf_common+0xae>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	6922      	ldr	r2, [r4, #16]
 8002776:	f003 0306 	and.w	r3, r3, #6
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf14      	ite	ne
 800277e:	2500      	movne	r5, #0
 8002780:	6833      	ldreq	r3, [r6, #0]
 8002782:	f04f 0600 	mov.w	r6, #0
 8002786:	bf08      	it	eq
 8002788:	68e5      	ldreq	r5, [r4, #12]
 800278a:	f104 041a 	add.w	r4, r4, #26
 800278e:	bf08      	it	eq
 8002790:	1aed      	subeq	r5, r5, r3
 8002792:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002796:	bf08      	it	eq
 8002798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800279c:	4293      	cmp	r3, r2
 800279e:	bfc4      	itt	gt
 80027a0:	1a9b      	subgt	r3, r3, r2
 80027a2:	18ed      	addgt	r5, r5, r3
 80027a4:	42b5      	cmp	r5, r6
 80027a6:	d11a      	bne.n	80027de <_printf_common+0xd2>
 80027a8:	2000      	movs	r0, #0
 80027aa:	e008      	b.n	80027be <_printf_common+0xb2>
 80027ac:	2301      	movs	r3, #1
 80027ae:	4652      	mov	r2, sl
 80027b0:	4649      	mov	r1, r9
 80027b2:	4638      	mov	r0, r7
 80027b4:	47c0      	blx	r8
 80027b6:	3001      	adds	r0, #1
 80027b8:	d103      	bne.n	80027c2 <_printf_common+0xb6>
 80027ba:	f04f 30ff 	mov.w	r0, #4294967295
 80027be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c2:	3501      	adds	r5, #1
 80027c4:	e7c1      	b.n	800274a <_printf_common+0x3e>
 80027c6:	2030      	movs	r0, #48	; 0x30
 80027c8:	18e1      	adds	r1, r4, r3
 80027ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027d4:	4422      	add	r2, r4
 80027d6:	3302      	adds	r3, #2
 80027d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027dc:	e7c2      	b.n	8002764 <_printf_common+0x58>
 80027de:	2301      	movs	r3, #1
 80027e0:	4622      	mov	r2, r4
 80027e2:	4649      	mov	r1, r9
 80027e4:	4638      	mov	r0, r7
 80027e6:	47c0      	blx	r8
 80027e8:	3001      	adds	r0, #1
 80027ea:	d0e6      	beq.n	80027ba <_printf_common+0xae>
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7d9      	b.n	80027a4 <_printf_common+0x98>

080027f0 <_printf_i>:
 80027f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	7e0f      	ldrb	r7, [r1, #24]
 80027f6:	4691      	mov	r9, r2
 80027f8:	2f78      	cmp	r7, #120	; 0x78
 80027fa:	4680      	mov	r8, r0
 80027fc:	460c      	mov	r4, r1
 80027fe:	469a      	mov	sl, r3
 8002800:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002806:	d807      	bhi.n	8002818 <_printf_i+0x28>
 8002808:	2f62      	cmp	r7, #98	; 0x62
 800280a:	d80a      	bhi.n	8002822 <_printf_i+0x32>
 800280c:	2f00      	cmp	r7, #0
 800280e:	f000 80d5 	beq.w	80029bc <_printf_i+0x1cc>
 8002812:	2f58      	cmp	r7, #88	; 0x58
 8002814:	f000 80c1 	beq.w	800299a <_printf_i+0x1aa>
 8002818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800281c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002820:	e03a      	b.n	8002898 <_printf_i+0xa8>
 8002822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002826:	2b15      	cmp	r3, #21
 8002828:	d8f6      	bhi.n	8002818 <_printf_i+0x28>
 800282a:	a101      	add	r1, pc, #4	; (adr r1, 8002830 <_printf_i+0x40>)
 800282c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002830:	08002889 	.word	0x08002889
 8002834:	0800289d 	.word	0x0800289d
 8002838:	08002819 	.word	0x08002819
 800283c:	08002819 	.word	0x08002819
 8002840:	08002819 	.word	0x08002819
 8002844:	08002819 	.word	0x08002819
 8002848:	0800289d 	.word	0x0800289d
 800284c:	08002819 	.word	0x08002819
 8002850:	08002819 	.word	0x08002819
 8002854:	08002819 	.word	0x08002819
 8002858:	08002819 	.word	0x08002819
 800285c:	080029a3 	.word	0x080029a3
 8002860:	080028c9 	.word	0x080028c9
 8002864:	0800295d 	.word	0x0800295d
 8002868:	08002819 	.word	0x08002819
 800286c:	08002819 	.word	0x08002819
 8002870:	080029c5 	.word	0x080029c5
 8002874:	08002819 	.word	0x08002819
 8002878:	080028c9 	.word	0x080028c9
 800287c:	08002819 	.word	0x08002819
 8002880:	08002819 	.word	0x08002819
 8002884:	08002965 	.word	0x08002965
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	1d1a      	adds	r2, r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	602a      	str	r2, [r5, #0]
 8002890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002898:	2301      	movs	r3, #1
 800289a:	e0a0      	b.n	80029de <_printf_i+0x1ee>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	0607      	lsls	r7, r0, #24
 80028a2:	f103 0104 	add.w	r1, r3, #4
 80028a6:	6029      	str	r1, [r5, #0]
 80028a8:	d501      	bpl.n	80028ae <_printf_i+0xbe>
 80028aa:	681e      	ldr	r6, [r3, #0]
 80028ac:	e003      	b.n	80028b6 <_printf_i+0xc6>
 80028ae:	0646      	lsls	r6, r0, #25
 80028b0:	d5fb      	bpl.n	80028aa <_printf_i+0xba>
 80028b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80028b6:	2e00      	cmp	r6, #0
 80028b8:	da03      	bge.n	80028c2 <_printf_i+0xd2>
 80028ba:	232d      	movs	r3, #45	; 0x2d
 80028bc:	4276      	negs	r6, r6
 80028be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c2:	230a      	movs	r3, #10
 80028c4:	4859      	ldr	r0, [pc, #356]	; (8002a2c <_printf_i+0x23c>)
 80028c6:	e012      	b.n	80028ee <_printf_i+0xfe>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	6820      	ldr	r0, [r4, #0]
 80028cc:	1d19      	adds	r1, r3, #4
 80028ce:	6029      	str	r1, [r5, #0]
 80028d0:	0605      	lsls	r5, r0, #24
 80028d2:	d501      	bpl.n	80028d8 <_printf_i+0xe8>
 80028d4:	681e      	ldr	r6, [r3, #0]
 80028d6:	e002      	b.n	80028de <_printf_i+0xee>
 80028d8:	0641      	lsls	r1, r0, #25
 80028da:	d5fb      	bpl.n	80028d4 <_printf_i+0xe4>
 80028dc:	881e      	ldrh	r6, [r3, #0]
 80028de:	2f6f      	cmp	r7, #111	; 0x6f
 80028e0:	bf0c      	ite	eq
 80028e2:	2308      	moveq	r3, #8
 80028e4:	230a      	movne	r3, #10
 80028e6:	4851      	ldr	r0, [pc, #324]	; (8002a2c <_printf_i+0x23c>)
 80028e8:	2100      	movs	r1, #0
 80028ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028ee:	6865      	ldr	r5, [r4, #4]
 80028f0:	2d00      	cmp	r5, #0
 80028f2:	bfa8      	it	ge
 80028f4:	6821      	ldrge	r1, [r4, #0]
 80028f6:	60a5      	str	r5, [r4, #8]
 80028f8:	bfa4      	itt	ge
 80028fa:	f021 0104 	bicge.w	r1, r1, #4
 80028fe:	6021      	strge	r1, [r4, #0]
 8002900:	b90e      	cbnz	r6, 8002906 <_printf_i+0x116>
 8002902:	2d00      	cmp	r5, #0
 8002904:	d04b      	beq.n	800299e <_printf_i+0x1ae>
 8002906:	4615      	mov	r5, r2
 8002908:	fbb6 f1f3 	udiv	r1, r6, r3
 800290c:	fb03 6711 	mls	r7, r3, r1, r6
 8002910:	5dc7      	ldrb	r7, [r0, r7]
 8002912:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002916:	4637      	mov	r7, r6
 8002918:	42bb      	cmp	r3, r7
 800291a:	460e      	mov	r6, r1
 800291c:	d9f4      	bls.n	8002908 <_printf_i+0x118>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d10b      	bne.n	800293a <_printf_i+0x14a>
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	07de      	lsls	r6, r3, #31
 8002926:	d508      	bpl.n	800293a <_printf_i+0x14a>
 8002928:	6923      	ldr	r3, [r4, #16]
 800292a:	6861      	ldr	r1, [r4, #4]
 800292c:	4299      	cmp	r1, r3
 800292e:	bfde      	ittt	le
 8002930:	2330      	movle	r3, #48	; 0x30
 8002932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002936:	f105 35ff 	addle.w	r5, r5, #4294967295
 800293a:	1b52      	subs	r2, r2, r5
 800293c:	6122      	str	r2, [r4, #16]
 800293e:	464b      	mov	r3, r9
 8002940:	4621      	mov	r1, r4
 8002942:	4640      	mov	r0, r8
 8002944:	f8cd a000 	str.w	sl, [sp]
 8002948:	aa03      	add	r2, sp, #12
 800294a:	f7ff fedf 	bl	800270c <_printf_common>
 800294e:	3001      	adds	r0, #1
 8002950:	d14a      	bne.n	80029e8 <_printf_i+0x1f8>
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	b004      	add	sp, #16
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	f043 0320 	orr.w	r3, r3, #32
 8002962:	6023      	str	r3, [r4, #0]
 8002964:	2778      	movs	r7, #120	; 0x78
 8002966:	4832      	ldr	r0, [pc, #200]	; (8002a30 <_printf_i+0x240>)
 8002968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	6829      	ldr	r1, [r5, #0]
 8002970:	061f      	lsls	r7, r3, #24
 8002972:	f851 6b04 	ldr.w	r6, [r1], #4
 8002976:	d402      	bmi.n	800297e <_printf_i+0x18e>
 8002978:	065f      	lsls	r7, r3, #25
 800297a:	bf48      	it	mi
 800297c:	b2b6      	uxthmi	r6, r6
 800297e:	07df      	lsls	r7, r3, #31
 8002980:	bf48      	it	mi
 8002982:	f043 0320 	orrmi.w	r3, r3, #32
 8002986:	6029      	str	r1, [r5, #0]
 8002988:	bf48      	it	mi
 800298a:	6023      	strmi	r3, [r4, #0]
 800298c:	b91e      	cbnz	r6, 8002996 <_printf_i+0x1a6>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	f023 0320 	bic.w	r3, r3, #32
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	2310      	movs	r3, #16
 8002998:	e7a6      	b.n	80028e8 <_printf_i+0xf8>
 800299a:	4824      	ldr	r0, [pc, #144]	; (8002a2c <_printf_i+0x23c>)
 800299c:	e7e4      	b.n	8002968 <_printf_i+0x178>
 800299e:	4615      	mov	r5, r2
 80029a0:	e7bd      	b.n	800291e <_printf_i+0x12e>
 80029a2:	682b      	ldr	r3, [r5, #0]
 80029a4:	6826      	ldr	r6, [r4, #0]
 80029a6:	1d18      	adds	r0, r3, #4
 80029a8:	6961      	ldr	r1, [r4, #20]
 80029aa:	6028      	str	r0, [r5, #0]
 80029ac:	0635      	lsls	r5, r6, #24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	d501      	bpl.n	80029b6 <_printf_i+0x1c6>
 80029b2:	6019      	str	r1, [r3, #0]
 80029b4:	e002      	b.n	80029bc <_printf_i+0x1cc>
 80029b6:	0670      	lsls	r0, r6, #25
 80029b8:	d5fb      	bpl.n	80029b2 <_printf_i+0x1c2>
 80029ba:	8019      	strh	r1, [r3, #0]
 80029bc:	2300      	movs	r3, #0
 80029be:	4615      	mov	r5, r2
 80029c0:	6123      	str	r3, [r4, #16]
 80029c2:	e7bc      	b.n	800293e <_printf_i+0x14e>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	2100      	movs	r1, #0
 80029c8:	1d1a      	adds	r2, r3, #4
 80029ca:	602a      	str	r2, [r5, #0]
 80029cc:	681d      	ldr	r5, [r3, #0]
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	4628      	mov	r0, r5
 80029d2:	f000 f859 	bl	8002a88 <memchr>
 80029d6:	b108      	cbz	r0, 80029dc <_printf_i+0x1ec>
 80029d8:	1b40      	subs	r0, r0, r5
 80029da:	6060      	str	r0, [r4, #4]
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	6123      	str	r3, [r4, #16]
 80029e0:	2300      	movs	r3, #0
 80029e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e6:	e7aa      	b.n	800293e <_printf_i+0x14e>
 80029e8:	462a      	mov	r2, r5
 80029ea:	4649      	mov	r1, r9
 80029ec:	4640      	mov	r0, r8
 80029ee:	6923      	ldr	r3, [r4, #16]
 80029f0:	47d0      	blx	sl
 80029f2:	3001      	adds	r0, #1
 80029f4:	d0ad      	beq.n	8002952 <_printf_i+0x162>
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	079b      	lsls	r3, r3, #30
 80029fa:	d413      	bmi.n	8002a24 <_printf_i+0x234>
 80029fc:	68e0      	ldr	r0, [r4, #12]
 80029fe:	9b03      	ldr	r3, [sp, #12]
 8002a00:	4298      	cmp	r0, r3
 8002a02:	bfb8      	it	lt
 8002a04:	4618      	movlt	r0, r3
 8002a06:	e7a6      	b.n	8002956 <_printf_i+0x166>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	4640      	mov	r0, r8
 8002a10:	47d0      	blx	sl
 8002a12:	3001      	adds	r0, #1
 8002a14:	d09d      	beq.n	8002952 <_printf_i+0x162>
 8002a16:	3501      	adds	r5, #1
 8002a18:	68e3      	ldr	r3, [r4, #12]
 8002a1a:	9903      	ldr	r1, [sp, #12]
 8002a1c:	1a5b      	subs	r3, r3, r1
 8002a1e:	42ab      	cmp	r3, r5
 8002a20:	dcf2      	bgt.n	8002a08 <_printf_i+0x218>
 8002a22:	e7eb      	b.n	80029fc <_printf_i+0x20c>
 8002a24:	2500      	movs	r5, #0
 8002a26:	f104 0619 	add.w	r6, r4, #25
 8002a2a:	e7f5      	b.n	8002a18 <_printf_i+0x228>
 8002a2c:	08002b8b 	.word	0x08002b8b
 8002a30:	08002b9c 	.word	0x08002b9c

08002a34 <memmove>:
 8002a34:	4288      	cmp	r0, r1
 8002a36:	b510      	push	{r4, lr}
 8002a38:	eb01 0402 	add.w	r4, r1, r2
 8002a3c:	d902      	bls.n	8002a44 <memmove+0x10>
 8002a3e:	4284      	cmp	r4, r0
 8002a40:	4623      	mov	r3, r4
 8002a42:	d807      	bhi.n	8002a54 <memmove+0x20>
 8002a44:	1e43      	subs	r3, r0, #1
 8002a46:	42a1      	cmp	r1, r4
 8002a48:	d008      	beq.n	8002a5c <memmove+0x28>
 8002a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a52:	e7f8      	b.n	8002a46 <memmove+0x12>
 8002a54:	4601      	mov	r1, r0
 8002a56:	4402      	add	r2, r0
 8002a58:	428a      	cmp	r2, r1
 8002a5a:	d100      	bne.n	8002a5e <memmove+0x2a>
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a66:	e7f7      	b.n	8002a58 <memmove+0x24>

08002a68 <_sbrk_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	4d05      	ldr	r5, [pc, #20]	; (8002a84 <_sbrk_r+0x1c>)
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	f7fd fe04 	bl	8000680 <_sbrk>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d102      	bne.n	8002a82 <_sbrk_r+0x1a>
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	b103      	cbz	r3, 8002a82 <_sbrk_r+0x1a>
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
 8002a84:	20000278 	.word	0x20000278

08002a88 <memchr>:
 8002a88:	4603      	mov	r3, r0
 8002a8a:	b510      	push	{r4, lr}
 8002a8c:	b2c9      	uxtb	r1, r1
 8002a8e:	4402      	add	r2, r0
 8002a90:	4293      	cmp	r3, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	d101      	bne.n	8002a9a <memchr+0x12>
 8002a96:	2000      	movs	r0, #0
 8002a98:	e003      	b.n	8002aa2 <memchr+0x1a>
 8002a9a:	7804      	ldrb	r4, [r0, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	428c      	cmp	r4, r1
 8002aa0:	d1f6      	bne.n	8002a90 <memchr+0x8>
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <memcpy>:
 8002aa4:	440a      	add	r2, r1
 8002aa6:	4291      	cmp	r1, r2
 8002aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002aac:	d100      	bne.n	8002ab0 <memcpy+0xc>
 8002aae:	4770      	bx	lr
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ab6:	4291      	cmp	r1, r2
 8002ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002abc:	d1f9      	bne.n	8002ab2 <memcpy+0xe>
 8002abe:	bd10      	pop	{r4, pc}

08002ac0 <_realloc_r>:
 8002ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	460e      	mov	r6, r1
 8002aca:	b921      	cbnz	r1, 8002ad6 <_realloc_r+0x16>
 8002acc:	4611      	mov	r1, r2
 8002ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad2:	f7ff bc37 	b.w	8002344 <_malloc_r>
 8002ad6:	b92a      	cbnz	r2, 8002ae4 <_realloc_r+0x24>
 8002ad8:	f7ff fbcc 	bl	8002274 <_free_r>
 8002adc:	4625      	mov	r5, r4
 8002ade:	4628      	mov	r0, r5
 8002ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ae4:	f000 f81b 	bl	8002b1e <_malloc_usable_size_r>
 8002ae8:	4284      	cmp	r4, r0
 8002aea:	4607      	mov	r7, r0
 8002aec:	d802      	bhi.n	8002af4 <_realloc_r+0x34>
 8002aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002af2:	d812      	bhi.n	8002b1a <_realloc_r+0x5a>
 8002af4:	4621      	mov	r1, r4
 8002af6:	4640      	mov	r0, r8
 8002af8:	f7ff fc24 	bl	8002344 <_malloc_r>
 8002afc:	4605      	mov	r5, r0
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d0ed      	beq.n	8002ade <_realloc_r+0x1e>
 8002b02:	42bc      	cmp	r4, r7
 8002b04:	4622      	mov	r2, r4
 8002b06:	4631      	mov	r1, r6
 8002b08:	bf28      	it	cs
 8002b0a:	463a      	movcs	r2, r7
 8002b0c:	f7ff ffca 	bl	8002aa4 <memcpy>
 8002b10:	4631      	mov	r1, r6
 8002b12:	4640      	mov	r0, r8
 8002b14:	f7ff fbae 	bl	8002274 <_free_r>
 8002b18:	e7e1      	b.n	8002ade <_realloc_r+0x1e>
 8002b1a:	4635      	mov	r5, r6
 8002b1c:	e7df      	b.n	8002ade <_realloc_r+0x1e>

08002b1e <_malloc_usable_size_r>:
 8002b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b22:	1f18      	subs	r0, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bfbc      	itt	lt
 8002b28:	580b      	ldrlt	r3, [r1, r0]
 8002b2a:	18c0      	addlt	r0, r0, r3
 8002b2c:	4770      	bx	lr
	...

08002b30 <_init>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr

08002b3c <_fini>:
 8002b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3e:	bf00      	nop
 8002b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b42:	bc08      	pop	{r3}
 8002b44:	469e      	mov	lr, r3
 8002b46:	4770      	bx	lr
